
labb4_d0003e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001a20  00001ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800106  00800106  00001aba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d1f  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce0  00000000  00000000  00003a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c0  00000000  00000000  000046e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a30  00000000  00000000  000058a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082f  00000000  00000000  000062d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023ae  00000000  00000000  00006b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00008eb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__vector_1>
       8:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_2>
       c:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_3>
      10:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__vector_4>
      14:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__vector_5>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_7>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_9>
      28:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_10>
      2c:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__vector_11>
      30:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__vector_12>
      34:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__vector_13>
      38:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_14>
      3c:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__vector_15>
      40:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__vector_16>
      44:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__vector_17>
      48:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_18>
      4c:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__vector_19>
      50:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__vector_20>
      54:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__vector_21>
      58:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__vector_22>
      5c:	a2 00       	.word	0x00a2	; ????
      5e:	86 00       	.word	0x0086	; ????
      60:	a5 00       	.word	0x00a5	; ????
      62:	89 00       	.word	0x0089	; ????
      64:	8c 00       	.word	0x008c	; ????
      66:	8f 00       	.word	0x008f	; ????
      68:	92 00       	.word	0x0092	; ????
      6a:	95 00       	.word	0x0095	; ????
      6c:	98 00       	.word	0x0098	; ????
      6e:	9b 00       	.word	0x009b	; ????
      70:	9e 00       	.word	0x009e	; ????

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf ef       	ldi	r28, 0xFF	; 255
      78:	d4 e0       	ldi	r29, 0x04	; 4
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	11 e0       	ldi	r17, 0x01	; 1
      80:	a0 e0       	ldi	r26, 0x00	; 0
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	e0 e2       	ldi	r30, 0x20	; 32
      86:	fa e1       	ldi	r31, 0x1A	; 26
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a6 30       	cpi	r26, 0x06	; 6
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	24 e0       	ldi	r18, 0x04	; 4
      96:	a6 e0       	ldi	r26, 0x06	; 6
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a9 35       	cpi	r26, 0x59	; 89
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 22 03 	call	0x644	; 0x644 <main>
      a8:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <LCD_Init>:




void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      b0:	e1 e6       	ldi	r30, 0x61	; 97
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 e8       	ldi	r24, 0x80	; 128
      b6:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b8:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      ba:	87 eb       	ldi	r24, 0xB7	; 183
      bc:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      c0:	87 e0       	ldi	r24, 0x07	; 7
      c2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c6:	8f e0       	ldi	r24, 0x0F	; 15
      c8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      cc:	80 ec       	ldi	r24, 0xC0	; 192
      ce:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d2:	08 95       	ret

000000d4 <button_init>:

void button_init(void){


    // initialize button
    PORTB |= ((1 << 7)| (1 << 6 ) | (1 << 4));  // 7 down, 6 up, 4 center down 
      d4:	85 b1       	in	r24, 0x05	; 5
      d6:	80 6d       	ori	r24, 0xD0	; 208
      d8:	85 b9       	out	0x05, r24	; 5
	PORTE |= ( (1 << 2) | ( 1 << 3));           // 2 left, 3 right
      da:	8e b1       	in	r24, 0x0e	; 14
      dc:	8c 60       	ori	r24, 0x0C	; 12
      de:	8e b9       	out	0x0e, r24	; 14


	// enable interupts for joystick
    EIMSK |= (1 << PCIE1) | (1 << PCIE0); //  PCIE1 enables PCINT15..8 interupts // PCIE0 enables PCINT7..0 interupts
      e0:	8d b3       	in	r24, 0x1d	; 29
      e2:	80 6c       	ori	r24, 0xC0	; 192
      e4:	8d bb       	out	0x1d, r24	; 29
	//EIMSK |= (1 << PCINT15);

	PCMSK1 |= (1 << PCINT15)|(1 << PCINT14)|(1 << PCINT12); //enables those pins
      e6:	ec e6       	ldi	r30, 0x6C	; 108
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	80 6d       	ori	r24, 0xD0	; 208
      ee:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3)|(1 << PCINT2);
      f0:	eb e6       	ldi	r30, 0x6B	; 107
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	8c 60       	ori	r24, 0x0C	; 12
      f8:	80 83       	st	Z, r24
      fa:	08 95       	ret

000000fc <getValueArray>:


}

int getValueArray(int i){
    switch (i)
      fc:	8b 30       	cpi	r24, 0x0B	; 11
      fe:	91 05       	cpc	r25, r1
     100:	00 f5       	brcc	.+64     	; 0x142 <getValueArray+0x46>
     102:	fc 01       	movw	r30, r24
     104:	e2 5d       	subi	r30, 0xD2	; 210
     106:	ff 4f       	sbci	r31, 0xFF	; 255
     108:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
     10c:	80 e8       	ldi	r24, 0x80	; 128
     10e:	90 e2       	ldi	r25, 0x20	; 32
     110:	08 95       	ret
    
    case 2:
        return TwoValue;

    case 3:
        return ThreeValue;
     112:	81 e1       	ldi	r24, 0x11	; 17
     114:	9b e1       	ldi	r25, 0x1B	; 27
     116:	08 95       	ret
    
    case 4:
        return FourValue;
     118:	80 e5       	ldi	r24, 0x50	; 80
     11a:	9b e0       	ldi	r25, 0x0B	; 11
     11c:	08 95       	ret

    case 5:
        return FiveValue;
     11e:	81 e4       	ldi	r24, 0x41	; 65
     120:	9b e1       	ldi	r25, 0x1B	; 27
     122:	08 95       	ret
    
    case 6:
        return SixValue;
     124:	81 e4       	ldi	r24, 0x41	; 65
     126:	9f e1       	ldi	r25, 0x1F	; 31
     128:	08 95       	ret
    
    case 7:
        return SevenValue;
     12a:	81 e1       	ldi	r24, 0x11	; 17
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	08 95       	ret
        
    case 8:
        return EightValue;
     130:	81 e5       	ldi	r24, 0x51	; 81
     132:	9f e1       	ldi	r25, 0x1F	; 31
     134:	08 95       	ret
    
    case 9:
        return NineValue;
     136:	81 e5       	ldi	r24, 0x51	; 81
     138:	9b e0       	ldi	r25, 0x0B	; 11
     13a:	08 95       	ret
    
    case 10:
        return BlankValue;
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	08 95       	ret
    }
}
     142:	08 95       	ret

int getValueArray(int i){
    switch (i)
    {
    case 0:
        return ZeroValue;
     144:	81 e5       	ldi	r24, 0x51	; 81
     146:	95 e1       	ldi	r25, 0x15	; 21
     148:	08 95       	ret

    case 1:
        return OneValue;
    
    case 2:
        return TwoValue;
     14a:	81 e1       	ldi	r24, 0x11	; 17
     14c:	9e e1       	ldi	r25, 0x1E	; 30
        return NineValue;
    
    case 10:
        return BlankValue;
    }
}
     14e:	08 95       	ret

00000150 <writeChar>:


void writeChar(char ch, int pos) {
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	00 d0       	rcall	.+0      	; 0x15c <writeChar+0xc>
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
	

	volatile int i = 0;
     160:	1a 82       	std	Y+2, r1	; 0x02
     162:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     164:	66 30       	cpi	r22, 0x06	; 6
     166:	71 05       	cpc	r23, r1
     168:	08 f0       	brcs	.+2      	; 0x16c <writeChar+0x1c>
     16a:	fe c1       	rjmp	.+1020   	; 0x568 <__stack+0x69>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     16c:	90 ed       	ldi	r25, 0xD0	; 208
     16e:	98 0f       	add	r25, r24
     170:	9a 30       	cpi	r25, 0x0A	; 10
     172:	28 f0       	brcs	.+10     	; 0x17e <writeChar+0x2e>
		i=10;
     174:	8a e0       	ldi	r24, 0x0A	; 10
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	9a 83       	std	Y+2, r25	; 0x02
     17a:	89 83       	std	Y+1, r24	; 0x01
     17c:	04 c0       	rjmp	.+8      	; 0x186 <writeChar+0x36>
	}else{
        i = ch - 48;
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	c0 97       	sbiw	r24, 0x30	; 48
     182:	9a 83       	std	Y+2, r25	; 0x02
     184:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     186:	61 15       	cp	r22, r1
     188:	71 05       	cpc	r23, r1
     18a:	09 f0       	breq	.+2      	; 0x18e <writeChar+0x3e>
     18c:	4e c0       	rjmp	.+156    	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     18e:	0f 2e       	mov	r0, r31
     190:	fc ee       	ldi	r31, 0xEC	; 236
     192:	ef 2e       	mov	r14, r31
     194:	f1 2c       	mov	r15, r1
     196:	f0 2d       	mov	r31, r0
     198:	f7 01       	movw	r30, r14
     19a:	10 81       	ld	r17, Z
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	9a 81       	ldd	r25, Y+2	; 0x02
     1a0:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     1a4:	10 7f       	andi	r17, 0xF0	; 240
     1a6:	8f 70       	andi	r24, 0x0F	; 15
     1a8:	81 2b       	or	r24, r17
     1aa:	f7 01       	movw	r30, r14
     1ac:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     1ae:	0f 2e       	mov	r0, r31
     1b0:	f1 ef       	ldi	r31, 0xF1	; 241
     1b2:	ef 2e       	mov	r14, r31
     1b4:	f1 2c       	mov	r15, r1
     1b6:	f0 2d       	mov	r31, r0
     1b8:	f7 01       	movw	r30, r14
     1ba:	10 81       	ld	r17, Z
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	9a 81       	ldd	r25, Y+2	; 0x02
     1c0:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     1c4:	80 7f       	andi	r24, 0xF0	; 240
     1c6:	99 27       	eor	r25, r25
     1c8:	95 95       	asr	r25
     1ca:	87 95       	ror	r24
     1cc:	95 95       	asr	r25
     1ce:	87 95       	ror	r24
     1d0:	95 95       	asr	r25
     1d2:	87 95       	ror	r24
     1d4:	95 95       	asr	r25
     1d6:	87 95       	ror	r24
     1d8:	10 7f       	andi	r17, 0xF0	; 240
     1da:	81 2b       	or	r24, r17
     1dc:	f7 01       	movw	r30, r14
     1de:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1e0:	0f 2e       	mov	r0, r31
     1e2:	f6 ef       	ldi	r31, 0xF6	; 246
     1e4:	ef 2e       	mov	r14, r31
     1e6:	f1 2c       	mov	r15, r1
     1e8:	f0 2d       	mov	r31, r0
     1ea:	f7 01       	movw	r30, r14
     1ec:	10 81       	ld	r17, Z
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	9a 81       	ldd	r25, Y+2	; 0x02
     1f2:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     1f6:	88 27       	eor	r24, r24
     1f8:	9f 70       	andi	r25, 0x0F	; 15
     1fa:	10 7f       	andi	r17, 0xF0	; 240
     1fc:	19 2b       	or	r17, r25
     1fe:	f7 01       	movw	r30, r14
     200:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     202:	0f 2e       	mov	r0, r31
     204:	fb ef       	ldi	r31, 0xFB	; 251
     206:	ef 2e       	mov	r14, r31
     208:	f1 2c       	mov	r15, r1
     20a:	f0 2d       	mov	r31, r0
     20c:	f7 01       	movw	r30, r14
     20e:	10 81       	ld	r17, Z
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	9a 81       	ldd	r25, Y+2	; 0x02
     214:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     218:	10 7f       	andi	r17, 0xF0	; 240
     21a:	95 95       	asr	r25
     21c:	95 95       	asr	r25
     21e:	95 95       	asr	r25
     220:	95 95       	asr	r25
     222:	91 2b       	or	r25, r17
     224:	f7 01       	movw	r30, r14
     226:	90 83       	st	Z, r25
     228:	9f c1       	rjmp	.+830    	; 0x568 <__stack+0x69>
		
	} else if(pos==1){
     22a:	61 30       	cpi	r22, 0x01	; 1
     22c:	71 05       	cpc	r23, r1
     22e:	09 f0       	breq	.+2      	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
     230:	50 c0       	rjmp	.+160    	; 0x2d2 <__EEPROM_REGION_LENGTH__+0xd2>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     232:	0f 2e       	mov	r0, r31
     234:	fc ee       	ldi	r31, 0xEC	; 236
     236:	ef 2e       	mov	r14, r31
     238:	f1 2c       	mov	r15, r1
     23a:	f0 2d       	mov	r31, r0
     23c:	f7 01       	movw	r30, r14
     23e:	10 81       	ld	r17, Z
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	9a 81       	ldd	r25, Y+2	; 0x02
     244:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     248:	1f 70       	andi	r17, 0x0F	; 15
     24a:	82 95       	swap	r24
     24c:	92 95       	swap	r25
     24e:	90 7f       	andi	r25, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	80 7f       	andi	r24, 0xF0	; 240
     254:	98 27       	eor	r25, r24
     256:	81 2b       	or	r24, r17
     258:	f7 01       	movw	r30, r14
     25a:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     25c:	0f 2e       	mov	r0, r31
     25e:	f1 ef       	ldi	r31, 0xF1	; 241
     260:	ef 2e       	mov	r14, r31
     262:	f1 2c       	mov	r15, r1
     264:	f0 2d       	mov	r31, r0
     266:	f7 01       	movw	r30, r14
     268:	10 81       	ld	r17, Z
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     272:	1f 70       	andi	r17, 0x0F	; 15
     274:	80 7f       	andi	r24, 0xF0	; 240
     276:	81 2b       	or	r24, r17
     278:	f7 01       	movw	r30, r14
     27a:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     27c:	0f 2e       	mov	r0, r31
     27e:	f6 ef       	ldi	r31, 0xF6	; 246
     280:	ef 2e       	mov	r14, r31
     282:	f1 2c       	mov	r15, r1
     284:	f0 2d       	mov	r31, r0
     286:	f7 01       	movw	r30, r14
     288:	10 81       	ld	r17, Z
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     292:	88 27       	eor	r24, r24
     294:	9f 70       	andi	r25, 0x0F	; 15
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	95 95       	asr	r25
     2a4:	87 95       	ror	r24
     2a6:	1f 70       	andi	r17, 0x0F	; 15
     2a8:	81 2b       	or	r24, r17
     2aa:	f7 01       	movw	r30, r14
     2ac:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     2ae:	0f 2e       	mov	r0, r31
     2b0:	fb ef       	ldi	r31, 0xFB	; 251
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f1 2c       	mov	r15, r1
     2b6:	f0 2d       	mov	r31, r0
     2b8:	f7 01       	movw	r30, r14
     2ba:	10 81       	ld	r17, Z
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     2c4:	88 27       	eor	r24, r24
     2c6:	90 7f       	andi	r25, 0xF0	; 240
     2c8:	1f 70       	andi	r17, 0x0F	; 15
     2ca:	19 2b       	or	r17, r25
     2cc:	f7 01       	movw	r30, r14
     2ce:	10 83       	st	Z, r17
     2d0:	4b c1       	rjmp	.+662    	; 0x568 <__stack+0x69>
	} else if(pos==2){
     2d2:	62 30       	cpi	r22, 0x02	; 2
     2d4:	71 05       	cpc	r23, r1
     2d6:	09 f0       	breq	.+2      	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
     2d8:	4e c0       	rjmp	.+156    	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2da:	0f 2e       	mov	r0, r31
     2dc:	fd ee       	ldi	r31, 0xED	; 237
     2de:	ef 2e       	mov	r14, r31
     2e0:	f1 2c       	mov	r15, r1
     2e2:	f0 2d       	mov	r31, r0
     2e4:	f7 01       	movw	r30, r14
     2e6:	10 81       	ld	r17, Z
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	9a 81       	ldd	r25, Y+2	; 0x02
     2ec:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     2f0:	10 7f       	andi	r17, 0xF0	; 240
     2f2:	8f 70       	andi	r24, 0x0F	; 15
     2f4:	81 2b       	or	r24, r17
     2f6:	f7 01       	movw	r30, r14
     2f8:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     2fa:	0f 2e       	mov	r0, r31
     2fc:	f2 ef       	ldi	r31, 0xF2	; 242
     2fe:	ef 2e       	mov	r14, r31
     300:	f1 2c       	mov	r15, r1
     302:	f0 2d       	mov	r31, r0
     304:	f7 01       	movw	r30, r14
     306:	10 81       	ld	r17, Z
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	9a 81       	ldd	r25, Y+2	; 0x02
     30c:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     310:	80 7f       	andi	r24, 0xF0	; 240
     312:	99 27       	eor	r25, r25
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	95 95       	asr	r25
     31a:	87 95       	ror	r24
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	95 95       	asr	r25
     322:	87 95       	ror	r24
     324:	10 7f       	andi	r17, 0xF0	; 240
     326:	81 2b       	or	r24, r17
     328:	f7 01       	movw	r30, r14
     32a:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     32c:	0f 2e       	mov	r0, r31
     32e:	f7 ef       	ldi	r31, 0xF7	; 247
     330:	ef 2e       	mov	r14, r31
     332:	f1 2c       	mov	r15, r1
     334:	f0 2d       	mov	r31, r0
     336:	f7 01       	movw	r30, r14
     338:	10 81       	ld	r17, Z
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     342:	88 27       	eor	r24, r24
     344:	9f 70       	andi	r25, 0x0F	; 15
     346:	10 7f       	andi	r17, 0xF0	; 240
     348:	19 2b       	or	r17, r25
     34a:	f7 01       	movw	r30, r14
     34c:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     34e:	0f 2e       	mov	r0, r31
     350:	fc ef       	ldi	r31, 0xFC	; 252
     352:	ef 2e       	mov	r14, r31
     354:	f1 2c       	mov	r15, r1
     356:	f0 2d       	mov	r31, r0
     358:	f7 01       	movw	r30, r14
     35a:	10 81       	ld	r17, Z
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     364:	10 7f       	andi	r17, 0xF0	; 240
     366:	95 95       	asr	r25
     368:	95 95       	asr	r25
     36a:	95 95       	asr	r25
     36c:	95 95       	asr	r25
     36e:	91 2b       	or	r25, r17
     370:	f7 01       	movw	r30, r14
     372:	90 83       	st	Z, r25
     374:	f9 c0       	rjmp	.+498    	; 0x568 <__stack+0x69>
		
	} else if(pos==3){
     376:	63 30       	cpi	r22, 0x03	; 3
     378:	71 05       	cpc	r23, r1
     37a:	09 f0       	breq	.+2      	; 0x37e <__EEPROM_REGION_LENGTH__+0x17e>
     37c:	50 c0       	rjmp	.+160    	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     37e:	0f 2e       	mov	r0, r31
     380:	fd ee       	ldi	r31, 0xED	; 237
     382:	ef 2e       	mov	r14, r31
     384:	f1 2c       	mov	r15, r1
     386:	f0 2d       	mov	r31, r0
     388:	f7 01       	movw	r30, r14
     38a:	10 81       	ld	r17, Z
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	9a 81       	ldd	r25, Y+2	; 0x02
     390:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     394:	1f 70       	andi	r17, 0x0F	; 15
     396:	82 95       	swap	r24
     398:	92 95       	swap	r25
     39a:	90 7f       	andi	r25, 0xF0	; 240
     39c:	98 27       	eor	r25, r24
     39e:	80 7f       	andi	r24, 0xF0	; 240
     3a0:	98 27       	eor	r25, r24
     3a2:	81 2b       	or	r24, r17
     3a4:	f7 01       	movw	r30, r14
     3a6:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     3a8:	0f 2e       	mov	r0, r31
     3aa:	f2 ef       	ldi	r31, 0xF2	; 242
     3ac:	ef 2e       	mov	r14, r31
     3ae:	f1 2c       	mov	r15, r1
     3b0:	f0 2d       	mov	r31, r0
     3b2:	f7 01       	movw	r30, r14
     3b4:	10 81       	ld	r17, Z
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ba:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     3be:	1f 70       	andi	r17, 0x0F	; 15
     3c0:	80 7f       	andi	r24, 0xF0	; 240
     3c2:	81 2b       	or	r24, r17
     3c4:	f7 01       	movw	r30, r14
     3c6:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     3c8:	0f 2e       	mov	r0, r31
     3ca:	f7 ef       	ldi	r31, 0xF7	; 247
     3cc:	ef 2e       	mov	r14, r31
     3ce:	f1 2c       	mov	r15, r1
     3d0:	f0 2d       	mov	r31, r0
     3d2:	f7 01       	movw	r30, r14
     3d4:	10 81       	ld	r17, Z
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     3de:	88 27       	eor	r24, r24
     3e0:	9f 70       	andi	r25, 0x0F	; 15
     3e2:	95 95       	asr	r25
     3e4:	87 95       	ror	r24
     3e6:	95 95       	asr	r25
     3e8:	87 95       	ror	r24
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	1f 70       	andi	r17, 0x0F	; 15
     3f4:	81 2b       	or	r24, r17
     3f6:	f7 01       	movw	r30, r14
     3f8:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     3fa:	0f 2e       	mov	r0, r31
     3fc:	fc ef       	ldi	r31, 0xFC	; 252
     3fe:	ef 2e       	mov	r14, r31
     400:	f1 2c       	mov	r15, r1
     402:	f0 2d       	mov	r31, r0
     404:	f7 01       	movw	r30, r14
     406:	10 81       	ld	r17, Z
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     410:	88 27       	eor	r24, r24
     412:	90 7f       	andi	r25, 0xF0	; 240
     414:	1f 70       	andi	r17, 0x0F	; 15
     416:	19 2b       	or	r17, r25
     418:	f7 01       	movw	r30, r14
     41a:	10 83       	st	Z, r17
     41c:	a5 c0       	rjmp	.+330    	; 0x568 <__stack+0x69>
		
	} else if(pos==4){
     41e:	64 30       	cpi	r22, 0x04	; 4
     420:	71 05       	cpc	r23, r1
     422:	09 f0       	breq	.+2      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
     424:	4e c0       	rjmp	.+156    	; 0x4c2 <__DATA_REGION_LENGTH__+0xc2>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     426:	0f 2e       	mov	r0, r31
     428:	fe ee       	ldi	r31, 0xEE	; 238
     42a:	ef 2e       	mov	r14, r31
     42c:	f1 2c       	mov	r15, r1
     42e:	f0 2d       	mov	r31, r0
     430:	f7 01       	movw	r30, r14
     432:	10 81       	ld	r17, Z
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	9a 81       	ldd	r25, Y+2	; 0x02
     438:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     43c:	10 7f       	andi	r17, 0xF0	; 240
     43e:	8f 70       	andi	r24, 0x0F	; 15
     440:	81 2b       	or	r24, r17
     442:	f7 01       	movw	r30, r14
     444:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     446:	0f 2e       	mov	r0, r31
     448:	f3 ef       	ldi	r31, 0xF3	; 243
     44a:	ef 2e       	mov	r14, r31
     44c:	f1 2c       	mov	r15, r1
     44e:	f0 2d       	mov	r31, r0
     450:	f7 01       	movw	r30, r14
     452:	10 81       	ld	r17, Z
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     45c:	80 7f       	andi	r24, 0xF0	; 240
     45e:	99 27       	eor	r25, r25
     460:	95 95       	asr	r25
     462:	87 95       	ror	r24
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	10 7f       	andi	r17, 0xF0	; 240
     472:	81 2b       	or	r24, r17
     474:	f7 01       	movw	r30, r14
     476:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     478:	0f 2e       	mov	r0, r31
     47a:	f8 ef       	ldi	r31, 0xF8	; 248
     47c:	ef 2e       	mov	r14, r31
     47e:	f1 2c       	mov	r15, r1
     480:	f0 2d       	mov	r31, r0
     482:	f7 01       	movw	r30, r14
     484:	10 81       	ld	r17, Z
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     48e:	88 27       	eor	r24, r24
     490:	9f 70       	andi	r25, 0x0F	; 15
     492:	10 7f       	andi	r17, 0xF0	; 240
     494:	19 2b       	or	r17, r25
     496:	f7 01       	movw	r30, r14
     498:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     49a:	0f 2e       	mov	r0, r31
     49c:	fd ef       	ldi	r31, 0xFD	; 253
     49e:	ef 2e       	mov	r14, r31
     4a0:	f1 2c       	mov	r15, r1
     4a2:	f0 2d       	mov	r31, r0
     4a4:	f7 01       	movw	r30, r14
     4a6:	10 81       	ld	r17, Z
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	9a 81       	ldd	r25, Y+2	; 0x02
     4ac:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     4b0:	10 7f       	andi	r17, 0xF0	; 240
     4b2:	95 95       	asr	r25
     4b4:	95 95       	asr	r25
     4b6:	95 95       	asr	r25
     4b8:	95 95       	asr	r25
     4ba:	91 2b       	or	r25, r17
     4bc:	f7 01       	movw	r30, r14
     4be:	90 83       	st	Z, r25
     4c0:	53 c0       	rjmp	.+166    	; 0x568 <__stack+0x69>
		
	} else if(pos==5){
     4c2:	65 30       	cpi	r22, 0x05	; 5
     4c4:	71 05       	cpc	r23, r1
     4c6:	09 f0       	breq	.+2      	; 0x4ca <__DATA_REGION_LENGTH__+0xca>
     4c8:	4f c0       	rjmp	.+158    	; 0x568 <__stack+0x69>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     4ca:	0f 2e       	mov	r0, r31
     4cc:	fe ee       	ldi	r31, 0xEE	; 238
     4ce:	ef 2e       	mov	r14, r31
     4d0:	f1 2c       	mov	r15, r1
     4d2:	f0 2d       	mov	r31, r0
     4d4:	f7 01       	movw	r30, r14
     4d6:	10 81       	ld	r17, Z
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     4e0:	1f 70       	andi	r17, 0x0F	; 15
     4e2:	82 95       	swap	r24
     4e4:	92 95       	swap	r25
     4e6:	90 7f       	andi	r25, 0xF0	; 240
     4e8:	98 27       	eor	r25, r24
     4ea:	80 7f       	andi	r24, 0xF0	; 240
     4ec:	98 27       	eor	r25, r24
     4ee:	81 2b       	or	r24, r17
     4f0:	f7 01       	movw	r30, r14
     4f2:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4f4:	0f 2e       	mov	r0, r31
     4f6:	f3 ef       	ldi	r31, 0xF3	; 243
     4f8:	ef 2e       	mov	r14, r31
     4fa:	f1 2c       	mov	r15, r1
     4fc:	f0 2d       	mov	r31, r0
     4fe:	f7 01       	movw	r30, r14
     500:	10 81       	ld	r17, Z
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	9a 81       	ldd	r25, Y+2	; 0x02
     506:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     50a:	1f 70       	andi	r17, 0x0F	; 15
     50c:	80 7f       	andi	r24, 0xF0	; 240
     50e:	81 2b       	or	r24, r17
     510:	f7 01       	movw	r30, r14
     512:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     514:	0f 2e       	mov	r0, r31
     516:	f8 ef       	ldi	r31, 0xF8	; 248
     518:	ef 2e       	mov	r14, r31
     51a:	f1 2c       	mov	r15, r1
     51c:	f0 2d       	mov	r31, r0
     51e:	f7 01       	movw	r30, r14
     520:	10 81       	ld	r17, Z
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     52a:	88 27       	eor	r24, r24
     52c:	9f 70       	andi	r25, 0x0F	; 15
     52e:	95 95       	asr	r25
     530:	87 95       	ror	r24
     532:	95 95       	asr	r25
     534:	87 95       	ror	r24
     536:	95 95       	asr	r25
     538:	87 95       	ror	r24
     53a:	95 95       	asr	r25
     53c:	87 95       	ror	r24
     53e:	1f 70       	andi	r17, 0x0F	; 15
     540:	81 2b       	or	r24, r17
     542:	f7 01       	movw	r30, r14
     544:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     546:	0f 2e       	mov	r0, r31
     548:	fd ef       	ldi	r31, 0xFD	; 253
     54a:	ef 2e       	mov	r14, r31
     54c:	f1 2c       	mov	r15, r1
     54e:	f0 2d       	mov	r31, r0
     550:	f7 01       	movw	r30, r14
     552:	10 81       	ld	r17, Z
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	9a 81       	ldd	r25, Y+2	; 0x02
     558:	0e 94 7e 00 	call	0xfc	; 0xfc <getValueArray>
     55c:	88 27       	eor	r24, r24
     55e:	90 7f       	andi	r25, 0xF0	; 240
     560:	1f 70       	andi	r17, 0x0F	; 15
     562:	19 2b       	or	r17, r25
     564:	f7 01       	movw	r30, r14
     566:	10 83       	st	Z, r17
		
	}
	

}
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	08 95       	ret

00000578 <printAt>:


void printAt(long num, int pos) {
     578:	cf 92       	push	r12
     57a:	df 92       	push	r13
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	00 d0       	rcall	.+0      	; 0x58a <printAt+0x12>
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	6b 01       	movw	r12, r22
     590:	7c 01       	movw	r14, r24
     592:	8a 01       	movw	r16, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     594:	24 e6       	ldi	r18, 0x64	; 100
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	0e 94 86 0c 	call	0x190c	; 0x190c <__divmodsi4>
     5a0:	2a e0       	ldi	r18, 0x0A	; 10
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	0e 94 86 0c 	call	0x190c	; 0x190c <__divmodsi4>
     5ac:	b8 01       	movw	r22, r16
     5ae:	80 e3       	ldi	r24, 0x30	; 48
     5b0:	82 0f       	add	r24, r18
     5b2:	0e 94 a8 00 	call	0x150	; 0x150 <writeChar>
	for(volatile int i=0; i<1000; i++){
     5b6:	1a 82       	std	Y+2, r1	; 0x02
     5b8:	19 82       	std	Y+1, r1	; 0x01
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	88 3e       	cpi	r24, 0xE8	; 232
     5c0:	93 40       	sbci	r25, 0x03	; 3
     5c2:	54 f4       	brge	.+20     	; 0x5d8 <printAt+0x60>
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	9a 81       	ldd	r25, Y+2	; 0x02
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	9a 83       	std	Y+2, r25	; 0x02
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	88 3e       	cpi	r24, 0xE8	; 232
     5d4:	93 40       	sbci	r25, 0x03	; 3
     5d6:	b4 f3       	brlt	.-20     	; 0x5c4 <printAt+0x4c>
		
	}
    pp++;
    writeChar( num % 10 + '0', pp);
     5d8:	0f 5f       	subi	r16, 0xFF	; 255
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	c7 01       	movw	r24, r14
     5de:	b6 01       	movw	r22, r12
     5e0:	2a e0       	ldi	r18, 0x0A	; 10
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	0e 94 86 0c 	call	0x190c	; 0x190c <__divmodsi4>
     5ec:	86 2f       	mov	r24, r22
     5ee:	b8 01       	movw	r22, r16
     5f0:	80 5d       	subi	r24, 0xD0	; 208
     5f2:	0e 94 a8 00 	call	0x150	; 0x150 <writeChar>
}
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	08 95       	ret

0000060c <readJoystick>:

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
     60c:	1f 9b       	sbis	0x03, 7	; 3
     60e:	0b c0       	rjmp	.+22     	; 0x626 <readJoystick+0x1a>
        return 7;
    }else if((PINB & (1<<6))==0){ // 6 up
     610:	1e 9b       	sbis	0x03, 6	; 3
     612:	0c c0       	rjmp	.+24     	; 0x62c <readJoystick+0x20>
        return 6;
    }else if((PINB & (1<<4))==0){ // 4 center
     614:	1c 9b       	sbis	0x03, 4	; 3
     616:	0d c0       	rjmp	.+26     	; 0x632 <readJoystick+0x26>
        return 4;
    }else if((PINE & (1<<2))==0){ // 2 left
     618:	62 9b       	sbis	0x0c, 2	; 12
     61a:	0e c0       	rjmp	.+28     	; 0x638 <readJoystick+0x2c>
        return 2;
    }else if((PINE & (1<<3))==0){ // 3 right
     61c:	63 9b       	sbis	0x0c, 3	; 12
     61e:	0f c0       	rjmp	.+30     	; 0x63e <readJoystick+0x32>
        return 3;
    }else{
        return 0;
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	08 95       	ret
    writeChar( num % 10 + '0', pp);
}

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
        return 7;
     626:	87 e0       	ldi	r24, 0x07	; 7
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	08 95       	ret
    }else if((PINB & (1<<6))==0){ // 6 up
        return 6;
     62c:	86 e0       	ldi	r24, 0x06	; 6
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	08 95       	ret
    }else if((PINB & (1<<4))==0){ // 4 center
        return 4;
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	08 95       	ret
    }else if((PINE & (1<<2))==0){ // 2 left
        return 2;
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	08 95       	ret
    }else if((PINE & (1<<3))==0){ // 3 right
        return 3;
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	90 e0       	ldi	r25, 0x00	; 0
    }else{
        return 0;
    }


}
     642:	08 95       	ret

00000644 <main>:
#include <avr/io.h>


int main(void)
{
    button_init();
     644:	0e 94 6a 00 	call	0xd4	; 0xd4 <button_init>
    LCD_Init();
     648:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Init>
    while (1) 
    {
        if(readJoystick()==3){
     64c:	0e 94 06 03 	call	0x60c	; 0x60c <readJoystick>
     650:	03 97       	sbiw	r24, 0x03	; 3
     652:	e1 f7       	brne	.-8      	; 0x64c <main+0x8>
            printAt(0,0);
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	cb 01       	movw	r24, r22
     65e:	0e 94 bc 02 	call	0x578	; 0x578 <printAt>
     662:	f4 cf       	rjmp	.-24     	; 0x64c <main+0x8>

00000664 <dispatch>:

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    return t;
}
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	00 d0       	rcall	.+0      	; 0x66a <dispatch+0x6>
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	9a 83       	std	Y+2, r25	; 0x02
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     676:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     67a:	06 96       	adiw	r24, 0x06	; 6
     67c:	0e 94 cd 0c 	call	0x199a	; 0x199a <setjmp>
     680:	89 2b       	or	r24, r25
     682:	59 f4       	brne	.+22     	; 0x69a <dispatch+0x36>
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     68c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	06 96       	adiw	r24, 0x06	; 6
     696:	0e 94 ed 0c 	call	0x19da	; 0x19da <longjmp>
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <schedule>:
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <msgQ>
     6b0:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <msgQ+0x1>
     6b4:	30 97       	sbiw	r30, 0x00	; 0
     6b6:	61 f1       	breq	.+88     	; 0x710 <schedule+0x6c>
     6b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     6bc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	31 f1       	breq	.+76     	; 0x710 <schedule+0x6c>
     6c4:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     6c8:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     6cc:	aa 81       	ldd	r26, Y+2	; 0x02
     6ce:	bb 81       	ldd	r27, Y+3	; 0x03
     6d0:	10 97       	sbiw	r26, 0x00	; 0
     6d2:	79 f0       	breq	.+30     	; 0x6f2 <schedule+0x4e>
     6d4:	46 81       	ldd	r20, Z+6	; 0x06
     6d6:	57 81       	ldd	r21, Z+7	; 0x07
     6d8:	60 85       	ldd	r22, Z+8	; 0x08
     6da:	71 85       	ldd	r23, Z+9	; 0x09
     6dc:	16 96       	adiw	r26, 0x06	; 6
     6de:	0d 91       	ld	r16, X+
     6e0:	1d 91       	ld	r17, X+
     6e2:	2d 91       	ld	r18, X+
     6e4:	3c 91       	ld	r19, X
     6e6:	19 97       	sbiw	r26, 0x09	; 9
     6e8:	40 1b       	sub	r20, r16
     6ea:	51 0b       	sbc	r21, r17
     6ec:	62 0b       	sbc	r22, r18
     6ee:	73 0b       	sbc	r23, r19
     6f0:	7a f4       	brpl	.+30     	; 0x710 <schedule+0x6c>
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 81       	ld	r18, Z
     6f6:	31 81       	ldd	r19, Z+1	; 0x01
     6f8:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     6fc:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     700:	d1 83       	std	Z+1, r29	; 0x01
     702:	c0 83       	st	Z, r28
     704:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     708:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     70c:	0e 94 32 03 	call	0x664	; 0x664 <dispatch>
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	08 95       	ret

0000071a <__vector_1>:
     71a:	1f 92       	push	r1
     71c:	0f 92       	push	r0
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	0f 92       	push	r0
     722:	11 24       	eor	r1, r1
     724:	2f 93       	push	r18
     726:	3f 93       	push	r19
     728:	4f 93       	push	r20
     72a:	5f 93       	push	r21
     72c:	6f 93       	push	r22
     72e:	7f 93       	push	r23
     730:	8f 93       	push	r24
     732:	9f 93       	push	r25
     734:	af 93       	push	r26
     736:	bf 93       	push	r27
     738:	ef 93       	push	r30
     73a:	ff 93       	push	r31
     73c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     740:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     744:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     748:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     74c:	c9 01       	movw	r24, r18
     74e:	03 2e       	mov	r0, r19
     750:	00 0c       	add	r0, r0
     752:	aa 0b       	sbc	r26, r26
     754:	bb 0b       	sbc	r27, r27
     756:	dc 01       	movw	r26, r24
     758:	99 27       	eor	r25, r25
     75a:	88 27       	eor	r24, r24
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	84 2b       	or	r24, r20
     762:	95 2b       	or	r25, r21
     764:	a6 2b       	or	r26, r22
     766:	b7 2b       	or	r27, r23
     768:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     76c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     770:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     774:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     778:	b0 9b       	sbis	0x16, 0	; 22
     77a:	1b c0       	rjmp	.+54     	; 0x7b2 <__vector_1+0x98>
     77c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     780:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     784:	c9 01       	movw	r24, r18
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	09 2e       	mov	r0, r25
     78a:	00 0c       	add	r0, r0
     78c:	aa 0b       	sbc	r26, r26
     78e:	bb 0b       	sbc	r27, r27
     790:	dc 01       	movw	r26, r24
     792:	99 27       	eor	r25, r25
     794:	88 27       	eor	r24, r24
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	84 2b       	or	r24, r20
     79c:	95 2b       	or	r25, r21
     79e:	a6 2b       	or	r26, r22
     7a0:	b7 2b       	or	r27, r23
     7a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     7a6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     7aa:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     7ae:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     7b2:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <mtable>
     7b6:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <mtable+0x1>
     7ba:	30 97       	sbiw	r30, 0x00	; 0
     7bc:	39 f0       	breq	.+14     	; 0x7cc <__vector_1+0xb2>
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <otable>
     7c6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <otable+0x1>
     7ca:	09 95       	icall
     7cc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	7f 91       	pop	r23
     7de:	6f 91       	pop	r22
     7e0:	5f 91       	pop	r21
     7e2:	4f 91       	pop	r20
     7e4:	3f 91       	pop	r19
     7e6:	2f 91       	pop	r18
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <__vector_2>:
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	11 24       	eor	r1, r1
     7fc:	2f 93       	push	r18
     7fe:	3f 93       	push	r19
     800:	4f 93       	push	r20
     802:	5f 93       	push	r21
     804:	6f 93       	push	r22
     806:	7f 93       	push	r23
     808:	8f 93       	push	r24
     80a:	9f 93       	push	r25
     80c:	af 93       	push	r26
     80e:	bf 93       	push	r27
     810:	ef 93       	push	r30
     812:	ff 93       	push	r31
     814:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     818:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     81c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     820:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     824:	c9 01       	movw	r24, r18
     826:	03 2e       	mov	r0, r19
     828:	00 0c       	add	r0, r0
     82a:	aa 0b       	sbc	r26, r26
     82c:	bb 0b       	sbc	r27, r27
     82e:	dc 01       	movw	r26, r24
     830:	99 27       	eor	r25, r25
     832:	88 27       	eor	r24, r24
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	84 2b       	or	r24, r20
     83a:	95 2b       	or	r25, r21
     83c:	a6 2b       	or	r26, r22
     83e:	b7 2b       	or	r27, r23
     840:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     844:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     848:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     84c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     850:	b0 9b       	sbis	0x16, 0	; 22
     852:	1b c0       	rjmp	.+54     	; 0x88a <__vector_2+0x98>
     854:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     858:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     85c:	c9 01       	movw	r24, r18
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	09 2e       	mov	r0, r25
     862:	00 0c       	add	r0, r0
     864:	aa 0b       	sbc	r26, r26
     866:	bb 0b       	sbc	r27, r27
     868:	dc 01       	movw	r26, r24
     86a:	99 27       	eor	r25, r25
     86c:	88 27       	eor	r24, r24
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	84 2b       	or	r24, r20
     874:	95 2b       	or	r25, r21
     876:	a6 2b       	or	r26, r22
     878:	b7 2b       	or	r27, r23
     87a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     87e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     882:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     886:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     88a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <mtable+0x2>
     88e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <mtable+0x3>
     892:	30 97       	sbiw	r30, 0x00	; 0
     894:	39 f0       	breq	.+14     	; 0x8a4 <__vector_2+0xb2>
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <otable+0x2>
     89e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <otable+0x3>
     8a2:	09 95       	icall
     8a4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	7f 91       	pop	r23
     8b6:	6f 91       	pop	r22
     8b8:	5f 91       	pop	r21
     8ba:	4f 91       	pop	r20
     8bc:	3f 91       	pop	r19
     8be:	2f 91       	pop	r18
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <__vector_3>:
     8ca:	1f 92       	push	r1
     8cc:	0f 92       	push	r0
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	0f 92       	push	r0
     8d2:	11 24       	eor	r1, r1
     8d4:	2f 93       	push	r18
     8d6:	3f 93       	push	r19
     8d8:	4f 93       	push	r20
     8da:	5f 93       	push	r21
     8dc:	6f 93       	push	r22
     8de:	7f 93       	push	r23
     8e0:	8f 93       	push	r24
     8e2:	9f 93       	push	r25
     8e4:	af 93       	push	r26
     8e6:	bf 93       	push	r27
     8e8:	ef 93       	push	r30
     8ea:	ff 93       	push	r31
     8ec:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     8f0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     8f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     8f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     8fc:	c9 01       	movw	r24, r18
     8fe:	03 2e       	mov	r0, r19
     900:	00 0c       	add	r0, r0
     902:	aa 0b       	sbc	r26, r26
     904:	bb 0b       	sbc	r27, r27
     906:	dc 01       	movw	r26, r24
     908:	99 27       	eor	r25, r25
     90a:	88 27       	eor	r24, r24
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	84 2b       	or	r24, r20
     912:	95 2b       	or	r25, r21
     914:	a6 2b       	or	r26, r22
     916:	b7 2b       	or	r27, r23
     918:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     91c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     920:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     924:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     928:	b0 9b       	sbis	0x16, 0	; 22
     92a:	1b c0       	rjmp	.+54     	; 0x962 <__vector_3+0x98>
     92c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     930:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     934:	c9 01       	movw	r24, r18
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	09 2e       	mov	r0, r25
     93a:	00 0c       	add	r0, r0
     93c:	aa 0b       	sbc	r26, r26
     93e:	bb 0b       	sbc	r27, r27
     940:	dc 01       	movw	r26, r24
     942:	99 27       	eor	r25, r25
     944:	88 27       	eor	r24, r24
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	84 2b       	or	r24, r20
     94c:	95 2b       	or	r25, r21
     94e:	a6 2b       	or	r26, r22
     950:	b7 2b       	or	r27, r23
     952:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     956:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     95a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     95e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     962:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <mtable+0x4>
     966:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <mtable+0x5>
     96a:	30 97       	sbiw	r30, 0x00	; 0
     96c:	39 f0       	breq	.+14     	; 0x97c <__vector_3+0xb2>
     96e:	62 e0       	ldi	r22, 0x02	; 2
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <otable+0x4>
     976:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <otable+0x5>
     97a:	09 95       	icall
     97c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     980:	ff 91       	pop	r31
     982:	ef 91       	pop	r30
     984:	bf 91       	pop	r27
     986:	af 91       	pop	r26
     988:	9f 91       	pop	r25
     98a:	8f 91       	pop	r24
     98c:	7f 91       	pop	r23
     98e:	6f 91       	pop	r22
     990:	5f 91       	pop	r21
     992:	4f 91       	pop	r20
     994:	3f 91       	pop	r19
     996:	2f 91       	pop	r18
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	0f 90       	pop	r0
     99e:	1f 90       	pop	r1
     9a0:	18 95       	reti

000009a2 <__vector_4>:
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	11 24       	eor	r1, r1
     9ac:	2f 93       	push	r18
     9ae:	3f 93       	push	r19
     9b0:	4f 93       	push	r20
     9b2:	5f 93       	push	r21
     9b4:	6f 93       	push	r22
     9b6:	7f 93       	push	r23
     9b8:	8f 93       	push	r24
     9ba:	9f 93       	push	r25
     9bc:	af 93       	push	r26
     9be:	bf 93       	push	r27
     9c0:	ef 93       	push	r30
     9c2:	ff 93       	push	r31
     9c4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     9c8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     9cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9d4:	c9 01       	movw	r24, r18
     9d6:	03 2e       	mov	r0, r19
     9d8:	00 0c       	add	r0, r0
     9da:	aa 0b       	sbc	r26, r26
     9dc:	bb 0b       	sbc	r27, r27
     9de:	dc 01       	movw	r26, r24
     9e0:	99 27       	eor	r25, r25
     9e2:	88 27       	eor	r24, r24
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	84 2b       	or	r24, r20
     9ea:	95 2b       	or	r25, r21
     9ec:	a6 2b       	or	r26, r22
     9ee:	b7 2b       	or	r27, r23
     9f0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     9f4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     9f8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     9fc:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     a00:	b0 9b       	sbis	0x16, 0	; 22
     a02:	1b c0       	rjmp	.+54     	; 0xa3a <__vector_4+0x98>
     a04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a0c:	c9 01       	movw	r24, r18
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	09 2e       	mov	r0, r25
     a12:	00 0c       	add	r0, r0
     a14:	aa 0b       	sbc	r26, r26
     a16:	bb 0b       	sbc	r27, r27
     a18:	dc 01       	movw	r26, r24
     a1a:	99 27       	eor	r25, r25
     a1c:	88 27       	eor	r24, r24
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	84 2b       	or	r24, r20
     a24:	95 2b       	or	r25, r21
     a26:	a6 2b       	or	r26, r22
     a28:	b7 2b       	or	r27, r23
     a2a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     a2e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     a32:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     a36:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     a3a:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <mtable+0x6>
     a3e:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <mtable+0x7>
     a42:	30 97       	sbiw	r30, 0x00	; 0
     a44:	39 f0       	breq	.+14     	; 0xa54 <__vector_4+0xb2>
     a46:	63 e0       	ldi	r22, 0x03	; 3
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <otable+0x6>
     a4e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <otable+0x7>
     a52:	09 95       	icall
     a54:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     a58:	ff 91       	pop	r31
     a5a:	ef 91       	pop	r30
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <__vector_5>:
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	11 24       	eor	r1, r1
     a84:	2f 93       	push	r18
     a86:	3f 93       	push	r19
     a88:	4f 93       	push	r20
     a8a:	5f 93       	push	r21
     a8c:	6f 93       	push	r22
     a8e:	7f 93       	push	r23
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	af 93       	push	r26
     a96:	bf 93       	push	r27
     a98:	ef 93       	push	r30
     a9a:	ff 93       	push	r31
     a9c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     aa0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     aa4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     aa8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     aac:	c9 01       	movw	r24, r18
     aae:	03 2e       	mov	r0, r19
     ab0:	00 0c       	add	r0, r0
     ab2:	aa 0b       	sbc	r26, r26
     ab4:	bb 0b       	sbc	r27, r27
     ab6:	dc 01       	movw	r26, r24
     ab8:	99 27       	eor	r25, r25
     aba:	88 27       	eor	r24, r24
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	84 2b       	or	r24, r20
     ac2:	95 2b       	or	r25, r21
     ac4:	a6 2b       	or	r26, r22
     ac6:	b7 2b       	or	r27, r23
     ac8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     acc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     ad0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     ad4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     ad8:	b0 9b       	sbis	0x16, 0	; 22
     ada:	1b c0       	rjmp	.+54     	; 0xb12 <__vector_5+0x98>
     adc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ae0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ae4:	c9 01       	movw	r24, r18
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	09 2e       	mov	r0, r25
     aea:	00 0c       	add	r0, r0
     aec:	aa 0b       	sbc	r26, r26
     aee:	bb 0b       	sbc	r27, r27
     af0:	dc 01       	movw	r26, r24
     af2:	99 27       	eor	r25, r25
     af4:	88 27       	eor	r24, r24
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	84 2b       	or	r24, r20
     afc:	95 2b       	or	r25, r21
     afe:	a6 2b       	or	r26, r22
     b00:	b7 2b       	or	r27, r23
     b02:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     b06:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     b0a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     b0e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     b12:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mtable+0x8>
     b16:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mtable+0x9>
     b1a:	30 97       	sbiw	r30, 0x00	; 0
     b1c:	39 f0       	breq	.+14     	; 0xb2c <__vector_5+0xb2>
     b1e:	64 e0       	ldi	r22, 0x04	; 4
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <otable+0x8>
     b26:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <otable+0x9>
     b2a:	09 95       	icall
     b2c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <__vector_10>:
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
     b5c:	2f 93       	push	r18
     b5e:	3f 93       	push	r19
     b60:	4f 93       	push	r20
     b62:	5f 93       	push	r21
     b64:	6f 93       	push	r22
     b66:	7f 93       	push	r23
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25
     b6c:	af 93       	push	r26
     b6e:	bf 93       	push	r27
     b70:	ef 93       	push	r30
     b72:	ff 93       	push	r31
     b74:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     b78:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     b7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b84:	c9 01       	movw	r24, r18
     b86:	03 2e       	mov	r0, r19
     b88:	00 0c       	add	r0, r0
     b8a:	aa 0b       	sbc	r26, r26
     b8c:	bb 0b       	sbc	r27, r27
     b8e:	dc 01       	movw	r26, r24
     b90:	99 27       	eor	r25, r25
     b92:	88 27       	eor	r24, r24
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	84 2b       	or	r24, r20
     b9a:	95 2b       	or	r25, r21
     b9c:	a6 2b       	or	r26, r22
     b9e:	b7 2b       	or	r27, r23
     ba0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     ba4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     ba8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     bac:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     bb0:	b0 9b       	sbis	0x16, 0	; 22
     bb2:	1b c0       	rjmp	.+54     	; 0xbea <__vector_10+0x98>
     bb4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bb8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bbc:	c9 01       	movw	r24, r18
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	09 2e       	mov	r0, r25
     bc2:	00 0c       	add	r0, r0
     bc4:	aa 0b       	sbc	r26, r26
     bc6:	bb 0b       	sbc	r27, r27
     bc8:	dc 01       	movw	r26, r24
     bca:	99 27       	eor	r25, r25
     bcc:	88 27       	eor	r24, r24
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	84 2b       	or	r24, r20
     bd4:	95 2b       	or	r25, r21
     bd6:	a6 2b       	or	r26, r22
     bd8:	b7 2b       	or	r27, r23
     bda:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     bde:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     be2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     be6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     bea:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <mtable+0xa>
     bee:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <mtable+0xb>
     bf2:	30 97       	sbiw	r30, 0x00	; 0
     bf4:	39 f0       	breq	.+14     	; 0xc04 <__vector_10+0xb2>
     bf6:	65 e0       	ldi	r22, 0x05	; 5
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <otable+0xa>
     bfe:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <otable+0xb>
     c02:	09 95       	icall
     c04:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	bf 91       	pop	r27
     c0e:	af 91       	pop	r26
     c10:	9f 91       	pop	r25
     c12:	8f 91       	pop	r24
     c14:	7f 91       	pop	r23
     c16:	6f 91       	pop	r22
     c18:	5f 91       	pop	r21
     c1a:	4f 91       	pop	r20
     c1c:	3f 91       	pop	r19
     c1e:	2f 91       	pop	r18
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <__vector_11>:
     c2a:	1f 92       	push	r1
     c2c:	0f 92       	push	r0
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	0f 92       	push	r0
     c32:	11 24       	eor	r1, r1
     c34:	2f 93       	push	r18
     c36:	3f 93       	push	r19
     c38:	4f 93       	push	r20
     c3a:	5f 93       	push	r21
     c3c:	6f 93       	push	r22
     c3e:	7f 93       	push	r23
     c40:	8f 93       	push	r24
     c42:	9f 93       	push	r25
     c44:	af 93       	push	r26
     c46:	bf 93       	push	r27
     c48:	ef 93       	push	r30
     c4a:	ff 93       	push	r31
     c4c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     c50:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     c54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c5c:	c9 01       	movw	r24, r18
     c5e:	03 2e       	mov	r0, r19
     c60:	00 0c       	add	r0, r0
     c62:	aa 0b       	sbc	r26, r26
     c64:	bb 0b       	sbc	r27, r27
     c66:	dc 01       	movw	r26, r24
     c68:	99 27       	eor	r25, r25
     c6a:	88 27       	eor	r24, r24
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	84 2b       	or	r24, r20
     c72:	95 2b       	or	r25, r21
     c74:	a6 2b       	or	r26, r22
     c76:	b7 2b       	or	r27, r23
     c78:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     c7c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     c80:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     c84:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     c88:	b0 9b       	sbis	0x16, 0	; 22
     c8a:	1b c0       	rjmp	.+54     	; 0xcc2 <__vector_11+0x98>
     c8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c94:	c9 01       	movw	r24, r18
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	09 2e       	mov	r0, r25
     c9a:	00 0c       	add	r0, r0
     c9c:	aa 0b       	sbc	r26, r26
     c9e:	bb 0b       	sbc	r27, r27
     ca0:	dc 01       	movw	r26, r24
     ca2:	99 27       	eor	r25, r25
     ca4:	88 27       	eor	r24, r24
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	84 2b       	or	r24, r20
     cac:	95 2b       	or	r25, r21
     cae:	a6 2b       	or	r26, r22
     cb0:	b7 2b       	or	r27, r23
     cb2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     cb6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     cba:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     cbe:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     cc2:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable+0xc>
     cc6:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0xd>
     cca:	30 97       	sbiw	r30, 0x00	; 0
     ccc:	39 f0       	breq	.+14     	; 0xcdc <__vector_11+0xb2>
     cce:	66 e0       	ldi	r22, 0x06	; 6
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable+0xc>
     cd6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0xd>
     cda:	09 95       	icall
     cdc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	bf 91       	pop	r27
     ce6:	af 91       	pop	r26
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	7f 91       	pop	r23
     cee:	6f 91       	pop	r22
     cf0:	5f 91       	pop	r21
     cf2:	4f 91       	pop	r20
     cf4:	3f 91       	pop	r19
     cf6:	2f 91       	pop	r18
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__vector_12>:
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	4f 93       	push	r20
     d12:	5f 93       	push	r21
     d14:	6f 93       	push	r22
     d16:	7f 93       	push	r23
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	af 93       	push	r26
     d1e:	bf 93       	push	r27
     d20:	ef 93       	push	r30
     d22:	ff 93       	push	r31
     d24:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     d28:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     d2c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d30:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d34:	c9 01       	movw	r24, r18
     d36:	03 2e       	mov	r0, r19
     d38:	00 0c       	add	r0, r0
     d3a:	aa 0b       	sbc	r26, r26
     d3c:	bb 0b       	sbc	r27, r27
     d3e:	dc 01       	movw	r26, r24
     d40:	99 27       	eor	r25, r25
     d42:	88 27       	eor	r24, r24
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	84 2b       	or	r24, r20
     d4a:	95 2b       	or	r25, r21
     d4c:	a6 2b       	or	r26, r22
     d4e:	b7 2b       	or	r27, r23
     d50:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     d54:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     d58:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     d5c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     d60:	b0 9b       	sbis	0x16, 0	; 22
     d62:	1b c0       	rjmp	.+54     	; 0xd9a <__vector_12+0x98>
     d64:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d68:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d6c:	c9 01       	movw	r24, r18
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	09 2e       	mov	r0, r25
     d72:	00 0c       	add	r0, r0
     d74:	aa 0b       	sbc	r26, r26
     d76:	bb 0b       	sbc	r27, r27
     d78:	dc 01       	movw	r26, r24
     d7a:	99 27       	eor	r25, r25
     d7c:	88 27       	eor	r24, r24
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	84 2b       	or	r24, r20
     d84:	95 2b       	or	r25, r21
     d86:	a6 2b       	or	r26, r22
     d88:	b7 2b       	or	r27, r23
     d8a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     d8e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     d92:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     d96:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     d9a:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0xe>
     d9e:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0xf>
     da2:	30 97       	sbiw	r30, 0x00	; 0
     da4:	39 f0       	breq	.+14     	; 0xdb4 <__vector_12+0xb2>
     da6:	67 e0       	ldi	r22, 0x07	; 7
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0xe>
     dae:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0xf>
     db2:	09 95       	icall
     db4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     db8:	ff 91       	pop	r31
     dba:	ef 91       	pop	r30
     dbc:	bf 91       	pop	r27
     dbe:	af 91       	pop	r26
     dc0:	9f 91       	pop	r25
     dc2:	8f 91       	pop	r24
     dc4:	7f 91       	pop	r23
     dc6:	6f 91       	pop	r22
     dc8:	5f 91       	pop	r21
     dca:	4f 91       	pop	r20
     dcc:	3f 91       	pop	r19
     dce:	2f 91       	pop	r18
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <__vector_13>:
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	2f 93       	push	r18
     de6:	3f 93       	push	r19
     de8:	4f 93       	push	r20
     dea:	5f 93       	push	r21
     dec:	6f 93       	push	r22
     dee:	7f 93       	push	r23
     df0:	8f 93       	push	r24
     df2:	9f 93       	push	r25
     df4:	af 93       	push	r26
     df6:	bf 93       	push	r27
     df8:	ef 93       	push	r30
     dfa:	ff 93       	push	r31
     dfc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     e00:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     e04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e0c:	c9 01       	movw	r24, r18
     e0e:	03 2e       	mov	r0, r19
     e10:	00 0c       	add	r0, r0
     e12:	aa 0b       	sbc	r26, r26
     e14:	bb 0b       	sbc	r27, r27
     e16:	dc 01       	movw	r26, r24
     e18:	99 27       	eor	r25, r25
     e1a:	88 27       	eor	r24, r24
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	84 2b       	or	r24, r20
     e22:	95 2b       	or	r25, r21
     e24:	a6 2b       	or	r26, r22
     e26:	b7 2b       	or	r27, r23
     e28:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     e2c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     e30:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     e34:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     e38:	b0 9b       	sbis	0x16, 0	; 22
     e3a:	1b c0       	rjmp	.+54     	; 0xe72 <__vector_13+0x98>
     e3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e44:	c9 01       	movw	r24, r18
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	09 2e       	mov	r0, r25
     e4a:	00 0c       	add	r0, r0
     e4c:	aa 0b       	sbc	r26, r26
     e4e:	bb 0b       	sbc	r27, r27
     e50:	dc 01       	movw	r26, r24
     e52:	99 27       	eor	r25, r25
     e54:	88 27       	eor	r24, r24
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	84 2b       	or	r24, r20
     e5c:	95 2b       	or	r25, r21
     e5e:	a6 2b       	or	r26, r22
     e60:	b7 2b       	or	r27, r23
     e62:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     e66:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     e6a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     e6e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     e72:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0x10>
     e76:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0x11>
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	39 f0       	breq	.+14     	; 0xe8c <__vector_13+0xb2>
     e7e:	68 e0       	ldi	r22, 0x08	; 8
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0x10>
     e86:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0x11>
     e8a:	09 95       	icall
     e8c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	bf 91       	pop	r27
     e96:	af 91       	pop	r26
     e98:	9f 91       	pop	r25
     e9a:	8f 91       	pop	r24
     e9c:	7f 91       	pop	r23
     e9e:	6f 91       	pop	r22
     ea0:	5f 91       	pop	r21
     ea2:	4f 91       	pop	r20
     ea4:	3f 91       	pop	r19
     ea6:	2f 91       	pop	r18
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <__vector_14>:
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	ef 93       	push	r30
     ed2:	ff 93       	push	r31
     ed4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     ed8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     edc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ee0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ee4:	c9 01       	movw	r24, r18
     ee6:	03 2e       	mov	r0, r19
     ee8:	00 0c       	add	r0, r0
     eea:	aa 0b       	sbc	r26, r26
     eec:	bb 0b       	sbc	r27, r27
     eee:	dc 01       	movw	r26, r24
     ef0:	99 27       	eor	r25, r25
     ef2:	88 27       	eor	r24, r24
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	84 2b       	or	r24, r20
     efa:	95 2b       	or	r25, r21
     efc:	a6 2b       	or	r26, r22
     efe:	b7 2b       	or	r27, r23
     f00:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     f04:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     f08:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     f0c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     f10:	b0 9b       	sbis	0x16, 0	; 22
     f12:	1b c0       	rjmp	.+54     	; 0xf4a <__vector_14+0x98>
     f14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f1c:	c9 01       	movw	r24, r18
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	09 2e       	mov	r0, r25
     f22:	00 0c       	add	r0, r0
     f24:	aa 0b       	sbc	r26, r26
     f26:	bb 0b       	sbc	r27, r27
     f28:	dc 01       	movw	r26, r24
     f2a:	99 27       	eor	r25, r25
     f2c:	88 27       	eor	r24, r24
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	84 2b       	or	r24, r20
     f34:	95 2b       	or	r25, r21
     f36:	a6 2b       	or	r26, r22
     f38:	b7 2b       	or	r27, r23
     f3a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     f3e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     f42:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     f46:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     f4a:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x12>
     f4e:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x13>
     f52:	30 97       	sbiw	r30, 0x00	; 0
     f54:	39 f0       	breq	.+14     	; 0xf64 <__vector_14+0xb2>
     f56:	69 e0       	ldi	r22, 0x09	; 9
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x12>
     f5e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x13>
     f62:	09 95       	icall
     f64:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	0f 90       	pop	r0
     f86:	1f 90       	pop	r1
     f88:	18 95       	reti

00000f8a <__vector_15>:
     f8a:	1f 92       	push	r1
     f8c:	0f 92       	push	r0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	0f 92       	push	r0
     f92:	11 24       	eor	r1, r1
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	ef 93       	push	r30
     faa:	ff 93       	push	r31
     fac:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     fb0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     fb4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fb8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fbc:	c9 01       	movw	r24, r18
     fbe:	03 2e       	mov	r0, r19
     fc0:	00 0c       	add	r0, r0
     fc2:	aa 0b       	sbc	r26, r26
     fc4:	bb 0b       	sbc	r27, r27
     fc6:	dc 01       	movw	r26, r24
     fc8:	99 27       	eor	r25, r25
     fca:	88 27       	eor	r24, r24
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	84 2b       	or	r24, r20
     fd2:	95 2b       	or	r25, r21
     fd4:	a6 2b       	or	r26, r22
     fd6:	b7 2b       	or	r27, r23
     fd8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     fdc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     fe0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     fe4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     fe8:	b0 9b       	sbis	0x16, 0	; 22
     fea:	1b c0       	rjmp	.+54     	; 0x1022 <__vector_15+0x98>
     fec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ff0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ff4:	c9 01       	movw	r24, r18
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	09 2e       	mov	r0, r25
     ffa:	00 0c       	add	r0, r0
     ffc:	aa 0b       	sbc	r26, r26
     ffe:	bb 0b       	sbc	r27, r27
    1000:	dc 01       	movw	r26, r24
    1002:	99 27       	eor	r25, r25
    1004:	88 27       	eor	r24, r24
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	84 2b       	or	r24, r20
    100c:	95 2b       	or	r25, r21
    100e:	a6 2b       	or	r26, r22
    1010:	b7 2b       	or	r27, r23
    1012:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1016:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    101a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    101e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1022:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x14>
    1026:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x15>
    102a:	30 97       	sbiw	r30, 0x00	; 0
    102c:	39 f0       	breq	.+14     	; 0x103c <__vector_15+0xb2>
    102e:	6a e0       	ldi	r22, 0x0A	; 10
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x14>
    1036:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x15>
    103a:	09 95       	icall
    103c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <__vector_16>:
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	2f 93       	push	r18
    106e:	3f 93       	push	r19
    1070:	4f 93       	push	r20
    1072:	5f 93       	push	r21
    1074:	6f 93       	push	r22
    1076:	7f 93       	push	r23
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	af 93       	push	r26
    107e:	bf 93       	push	r27
    1080:	ef 93       	push	r30
    1082:	ff 93       	push	r31
    1084:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1088:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    108c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1090:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1094:	c9 01       	movw	r24, r18
    1096:	03 2e       	mov	r0, r19
    1098:	00 0c       	add	r0, r0
    109a:	aa 0b       	sbc	r26, r26
    109c:	bb 0b       	sbc	r27, r27
    109e:	dc 01       	movw	r26, r24
    10a0:	99 27       	eor	r25, r25
    10a2:	88 27       	eor	r24, r24
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	84 2b       	or	r24, r20
    10aa:	95 2b       	or	r25, r21
    10ac:	a6 2b       	or	r26, r22
    10ae:	b7 2b       	or	r27, r23
    10b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    10b4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    10b8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    10bc:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    10c0:	b0 9b       	sbis	0x16, 0	; 22
    10c2:	1b c0       	rjmp	.+54     	; 0x10fa <__vector_16+0x98>
    10c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10cc:	c9 01       	movw	r24, r18
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	09 2e       	mov	r0, r25
    10d2:	00 0c       	add	r0, r0
    10d4:	aa 0b       	sbc	r26, r26
    10d6:	bb 0b       	sbc	r27, r27
    10d8:	dc 01       	movw	r26, r24
    10da:	99 27       	eor	r25, r25
    10dc:	88 27       	eor	r24, r24
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	84 2b       	or	r24, r20
    10e4:	95 2b       	or	r25, r21
    10e6:	a6 2b       	or	r26, r22
    10e8:	b7 2b       	or	r27, r23
    10ea:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    10ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    10f2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    10f6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    10fa:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0x16>
    10fe:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x17>
    1102:	30 97       	sbiw	r30, 0x00	; 0
    1104:	39 f0       	breq	.+14     	; 0x1114 <__vector_16+0xb2>
    1106:	6b e0       	ldi	r22, 0x0B	; 11
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0x16>
    110e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x17>
    1112:	09 95       	icall
    1114:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti

0000113a <__vector_17>:
    113a:	1f 92       	push	r1
    113c:	0f 92       	push	r0
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	0f 92       	push	r0
    1142:	11 24       	eor	r1, r1
    1144:	2f 93       	push	r18
    1146:	3f 93       	push	r19
    1148:	4f 93       	push	r20
    114a:	5f 93       	push	r21
    114c:	6f 93       	push	r22
    114e:	7f 93       	push	r23
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	af 93       	push	r26
    1156:	bf 93       	push	r27
    1158:	ef 93       	push	r30
    115a:	ff 93       	push	r31
    115c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1160:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    1164:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1168:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    116c:	c9 01       	movw	r24, r18
    116e:	03 2e       	mov	r0, r19
    1170:	00 0c       	add	r0, r0
    1172:	aa 0b       	sbc	r26, r26
    1174:	bb 0b       	sbc	r27, r27
    1176:	dc 01       	movw	r26, r24
    1178:	99 27       	eor	r25, r25
    117a:	88 27       	eor	r24, r24
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	84 2b       	or	r24, r20
    1182:	95 2b       	or	r25, r21
    1184:	a6 2b       	or	r26, r22
    1186:	b7 2b       	or	r27, r23
    1188:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    118c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1190:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1194:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1198:	b0 9b       	sbis	0x16, 0	; 22
    119a:	1b c0       	rjmp	.+54     	; 0x11d2 <__vector_17+0x98>
    119c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11a4:	c9 01       	movw	r24, r18
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	09 2e       	mov	r0, r25
    11aa:	00 0c       	add	r0, r0
    11ac:	aa 0b       	sbc	r26, r26
    11ae:	bb 0b       	sbc	r27, r27
    11b0:	dc 01       	movw	r26, r24
    11b2:	99 27       	eor	r25, r25
    11b4:	88 27       	eor	r24, r24
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	84 2b       	or	r24, r20
    11bc:	95 2b       	or	r25, r21
    11be:	a6 2b       	or	r26, r22
    11c0:	b7 2b       	or	r27, r23
    11c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    11c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    11ca:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    11ce:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    11d2:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x18>
    11d6:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x19>
    11da:	30 97       	sbiw	r30, 0x00	; 0
    11dc:	39 f0       	breq	.+14     	; 0x11ec <__vector_17+0xb2>
    11de:	6c e0       	ldi	r22, 0x0C	; 12
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x18>
    11e6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x19>
    11ea:	09 95       	icall
    11ec:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <__vector_18>:
    1212:	1f 92       	push	r1
    1214:	0f 92       	push	r0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
    1234:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1238:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    123c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1240:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1244:	c9 01       	movw	r24, r18
    1246:	03 2e       	mov	r0, r19
    1248:	00 0c       	add	r0, r0
    124a:	aa 0b       	sbc	r26, r26
    124c:	bb 0b       	sbc	r27, r27
    124e:	dc 01       	movw	r26, r24
    1250:	99 27       	eor	r25, r25
    1252:	88 27       	eor	r24, r24
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	84 2b       	or	r24, r20
    125a:	95 2b       	or	r25, r21
    125c:	a6 2b       	or	r26, r22
    125e:	b7 2b       	or	r27, r23
    1260:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1264:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1268:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    126c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1270:	b0 9b       	sbis	0x16, 0	; 22
    1272:	1b c0       	rjmp	.+54     	; 0x12aa <__vector_18+0x98>
    1274:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1278:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    127c:	c9 01       	movw	r24, r18
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	09 2e       	mov	r0, r25
    1282:	00 0c       	add	r0, r0
    1284:	aa 0b       	sbc	r26, r26
    1286:	bb 0b       	sbc	r27, r27
    1288:	dc 01       	movw	r26, r24
    128a:	99 27       	eor	r25, r25
    128c:	88 27       	eor	r24, r24
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	84 2b       	or	r24, r20
    1294:	95 2b       	or	r25, r21
    1296:	a6 2b       	or	r26, r22
    1298:	b7 2b       	or	r27, r23
    129a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    129e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    12a2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    12a6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    12aa:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x1a>
    12ae:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x1b>
    12b2:	30 97       	sbiw	r30, 0x00	; 0
    12b4:	39 f0       	breq	.+14     	; 0x12c4 <__vector_18+0xb2>
    12b6:	6d e0       	ldi	r22, 0x0D	; 13
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x1a>
    12be:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x1b>
    12c2:	09 95       	icall
    12c4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
    12c8:	ff 91       	pop	r31
    12ca:	ef 91       	pop	r30
    12cc:	bf 91       	pop	r27
    12ce:	af 91       	pop	r26
    12d0:	9f 91       	pop	r25
    12d2:	8f 91       	pop	r24
    12d4:	7f 91       	pop	r23
    12d6:	6f 91       	pop	r22
    12d8:	5f 91       	pop	r21
    12da:	4f 91       	pop	r20
    12dc:	3f 91       	pop	r19
    12de:	2f 91       	pop	r18
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	0f 90       	pop	r0
    12e6:	1f 90       	pop	r1
    12e8:	18 95       	reti

000012ea <__vector_19>:
    12ea:	1f 92       	push	r1
    12ec:	0f 92       	push	r0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	0f 92       	push	r0
    12f2:	11 24       	eor	r1, r1
    12f4:	2f 93       	push	r18
    12f6:	3f 93       	push	r19
    12f8:	4f 93       	push	r20
    12fa:	5f 93       	push	r21
    12fc:	6f 93       	push	r22
    12fe:	7f 93       	push	r23
    1300:	8f 93       	push	r24
    1302:	9f 93       	push	r25
    1304:	af 93       	push	r26
    1306:	bf 93       	push	r27
    1308:	ef 93       	push	r30
    130a:	ff 93       	push	r31
    130c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1310:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    1314:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1318:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    131c:	c9 01       	movw	r24, r18
    131e:	03 2e       	mov	r0, r19
    1320:	00 0c       	add	r0, r0
    1322:	aa 0b       	sbc	r26, r26
    1324:	bb 0b       	sbc	r27, r27
    1326:	dc 01       	movw	r26, r24
    1328:	99 27       	eor	r25, r25
    132a:	88 27       	eor	r24, r24
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	84 2b       	or	r24, r20
    1332:	95 2b       	or	r25, r21
    1334:	a6 2b       	or	r26, r22
    1336:	b7 2b       	or	r27, r23
    1338:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    133c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1340:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1344:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1348:	b0 9b       	sbis	0x16, 0	; 22
    134a:	1b c0       	rjmp	.+54     	; 0x1382 <__vector_19+0x98>
    134c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1350:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1354:	c9 01       	movw	r24, r18
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	09 2e       	mov	r0, r25
    135a:	00 0c       	add	r0, r0
    135c:	aa 0b       	sbc	r26, r26
    135e:	bb 0b       	sbc	r27, r27
    1360:	dc 01       	movw	r26, r24
    1362:	99 27       	eor	r25, r25
    1364:	88 27       	eor	r24, r24
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	84 2b       	or	r24, r20
    136c:	95 2b       	or	r25, r21
    136e:	a6 2b       	or	r26, r22
    1370:	b7 2b       	or	r27, r23
    1372:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1376:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    137a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    137e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1382:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x1c>
    1386:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x1d>
    138a:	30 97       	sbiw	r30, 0x00	; 0
    138c:	39 f0       	breq	.+14     	; 0x139c <__vector_19+0xb2>
    138e:	6e e0       	ldi	r22, 0x0E	; 14
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x1c>
    1396:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x1d>
    139a:	09 95       	icall
    139c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
    13a0:	ff 91       	pop	r31
    13a2:	ef 91       	pop	r30
    13a4:	bf 91       	pop	r27
    13a6:	af 91       	pop	r26
    13a8:	9f 91       	pop	r25
    13aa:	8f 91       	pop	r24
    13ac:	7f 91       	pop	r23
    13ae:	6f 91       	pop	r22
    13b0:	5f 91       	pop	r21
    13b2:	4f 91       	pop	r20
    13b4:	3f 91       	pop	r19
    13b6:	2f 91       	pop	r18
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	0f 90       	pop	r0
    13be:	1f 90       	pop	r1
    13c0:	18 95       	reti

000013c2 <__vector_20>:
    13c2:	1f 92       	push	r1
    13c4:	0f 92       	push	r0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	0f 92       	push	r0
    13ca:	11 24       	eor	r1, r1
    13cc:	2f 93       	push	r18
    13ce:	3f 93       	push	r19
    13d0:	4f 93       	push	r20
    13d2:	5f 93       	push	r21
    13d4:	6f 93       	push	r22
    13d6:	7f 93       	push	r23
    13d8:	8f 93       	push	r24
    13da:	9f 93       	push	r25
    13dc:	af 93       	push	r26
    13de:	bf 93       	push	r27
    13e0:	ef 93       	push	r30
    13e2:	ff 93       	push	r31
    13e4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    13e8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    13ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13f4:	c9 01       	movw	r24, r18
    13f6:	03 2e       	mov	r0, r19
    13f8:	00 0c       	add	r0, r0
    13fa:	aa 0b       	sbc	r26, r26
    13fc:	bb 0b       	sbc	r27, r27
    13fe:	dc 01       	movw	r26, r24
    1400:	99 27       	eor	r25, r25
    1402:	88 27       	eor	r24, r24
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	84 2b       	or	r24, r20
    140a:	95 2b       	or	r25, r21
    140c:	a6 2b       	or	r26, r22
    140e:	b7 2b       	or	r27, r23
    1410:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1414:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1418:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    141c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1420:	b0 9b       	sbis	0x16, 0	; 22
    1422:	1b c0       	rjmp	.+54     	; 0x145a <__vector_20+0x98>
    1424:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1428:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    142c:	c9 01       	movw	r24, r18
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	09 2e       	mov	r0, r25
    1432:	00 0c       	add	r0, r0
    1434:	aa 0b       	sbc	r26, r26
    1436:	bb 0b       	sbc	r27, r27
    1438:	dc 01       	movw	r26, r24
    143a:	99 27       	eor	r25, r25
    143c:	88 27       	eor	r24, r24
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	84 2b       	or	r24, r20
    1444:	95 2b       	or	r25, r21
    1446:	a6 2b       	or	r26, r22
    1448:	b7 2b       	or	r27, r23
    144a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    144e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1452:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1456:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    145a:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x1e>
    145e:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x1f>
    1462:	30 97       	sbiw	r30, 0x00	; 0
    1464:	39 f0       	breq	.+14     	; 0x1474 <__vector_20+0xb2>
    1466:	6f e0       	ldi	r22, 0x0F	; 15
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x1e>
    146e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x1f>
    1472:	09 95       	icall
    1474:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
    1478:	ff 91       	pop	r31
    147a:	ef 91       	pop	r30
    147c:	bf 91       	pop	r27
    147e:	af 91       	pop	r26
    1480:	9f 91       	pop	r25
    1482:	8f 91       	pop	r24
    1484:	7f 91       	pop	r23
    1486:	6f 91       	pop	r22
    1488:	5f 91       	pop	r21
    148a:	4f 91       	pop	r20
    148c:	3f 91       	pop	r19
    148e:	2f 91       	pop	r18
    1490:	0f 90       	pop	r0
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	0f 90       	pop	r0
    1496:	1f 90       	pop	r1
    1498:	18 95       	reti

0000149a <__vector_21>:
    149a:	1f 92       	push	r1
    149c:	0f 92       	push	r0
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	0f 92       	push	r0
    14a2:	11 24       	eor	r1, r1
    14a4:	2f 93       	push	r18
    14a6:	3f 93       	push	r19
    14a8:	4f 93       	push	r20
    14aa:	5f 93       	push	r21
    14ac:	6f 93       	push	r22
    14ae:	7f 93       	push	r23
    14b0:	8f 93       	push	r24
    14b2:	9f 93       	push	r25
    14b4:	af 93       	push	r26
    14b6:	bf 93       	push	r27
    14b8:	ef 93       	push	r30
    14ba:	ff 93       	push	r31
    14bc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    14c0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    14c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14cc:	c9 01       	movw	r24, r18
    14ce:	03 2e       	mov	r0, r19
    14d0:	00 0c       	add	r0, r0
    14d2:	aa 0b       	sbc	r26, r26
    14d4:	bb 0b       	sbc	r27, r27
    14d6:	dc 01       	movw	r26, r24
    14d8:	99 27       	eor	r25, r25
    14da:	88 27       	eor	r24, r24
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	84 2b       	or	r24, r20
    14e2:	95 2b       	or	r25, r21
    14e4:	a6 2b       	or	r26, r22
    14e6:	b7 2b       	or	r27, r23
    14e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    14ec:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    14f0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    14f4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    14f8:	b0 9b       	sbis	0x16, 0	; 22
    14fa:	1b c0       	rjmp	.+54     	; 0x1532 <__vector_21+0x98>
    14fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1500:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1504:	c9 01       	movw	r24, r18
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	09 2e       	mov	r0, r25
    150a:	00 0c       	add	r0, r0
    150c:	aa 0b       	sbc	r26, r26
    150e:	bb 0b       	sbc	r27, r27
    1510:	dc 01       	movw	r26, r24
    1512:	99 27       	eor	r25, r25
    1514:	88 27       	eor	r24, r24
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	84 2b       	or	r24, r20
    151c:	95 2b       	or	r25, r21
    151e:	a6 2b       	or	r26, r22
    1520:	b7 2b       	or	r27, r23
    1522:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1526:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    152a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    152e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1532:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x20>
    1536:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x21>
    153a:	30 97       	sbiw	r30, 0x00	; 0
    153c:	39 f0       	breq	.+14     	; 0x154c <__vector_21+0xb2>
    153e:	60 e1       	ldi	r22, 0x10	; 16
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x20>
    1546:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x21>
    154a:	09 95       	icall
    154c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
    1550:	ff 91       	pop	r31
    1552:	ef 91       	pop	r30
    1554:	bf 91       	pop	r27
    1556:	af 91       	pop	r26
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	7f 91       	pop	r23
    155e:	6f 91       	pop	r22
    1560:	5f 91       	pop	r21
    1562:	4f 91       	pop	r20
    1564:	3f 91       	pop	r19
    1566:	2f 91       	pop	r18
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <__vector_22>:
    1572:	1f 92       	push	r1
    1574:	0f 92       	push	r0
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	0f 92       	push	r0
    157a:	11 24       	eor	r1, r1
    157c:	2f 93       	push	r18
    157e:	3f 93       	push	r19
    1580:	4f 93       	push	r20
    1582:	5f 93       	push	r21
    1584:	6f 93       	push	r22
    1586:	7f 93       	push	r23
    1588:	8f 93       	push	r24
    158a:	9f 93       	push	r25
    158c:	af 93       	push	r26
    158e:	bf 93       	push	r27
    1590:	ef 93       	push	r30
    1592:	ff 93       	push	r31
    1594:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1598:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    159c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15a4:	c9 01       	movw	r24, r18
    15a6:	03 2e       	mov	r0, r19
    15a8:	00 0c       	add	r0, r0
    15aa:	aa 0b       	sbc	r26, r26
    15ac:	bb 0b       	sbc	r27, r27
    15ae:	dc 01       	movw	r26, r24
    15b0:	99 27       	eor	r25, r25
    15b2:	88 27       	eor	r24, r24
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	84 2b       	or	r24, r20
    15ba:	95 2b       	or	r25, r21
    15bc:	a6 2b       	or	r26, r22
    15be:	b7 2b       	or	r27, r23
    15c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    15c4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    15c8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    15cc:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    15d0:	b0 9b       	sbis	0x16, 0	; 22
    15d2:	1b c0       	rjmp	.+54     	; 0x160a <__vector_22+0x98>
    15d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15dc:	c9 01       	movw	r24, r18
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	09 2e       	mov	r0, r25
    15e2:	00 0c       	add	r0, r0
    15e4:	aa 0b       	sbc	r26, r26
    15e6:	bb 0b       	sbc	r27, r27
    15e8:	dc 01       	movw	r26, r24
    15ea:	99 27       	eor	r25, r25
    15ec:	88 27       	eor	r24, r24
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	84 2b       	or	r24, r20
    15f4:	95 2b       	or	r25, r21
    15f6:	a6 2b       	or	r26, r22
    15f8:	b7 2b       	or	r27, r23
    15fa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    15fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1602:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1606:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    160a:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x22>
    160e:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x23>
    1612:	30 97       	sbiw	r30, 0x00	; 0
    1614:	39 f0       	breq	.+14     	; 0x1624 <__vector_22+0xb2>
    1616:	61 e1       	ldi	r22, 0x11	; 17
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x22>
    161e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x23>
    1622:	09 95       	icall
    1624:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
    1628:	ff 91       	pop	r31
    162a:	ef 91       	pop	r30
    162c:	bf 91       	pop	r27
    162e:	af 91       	pop	r26
    1630:	9f 91       	pop	r25
    1632:	8f 91       	pop	r24
    1634:	7f 91       	pop	r23
    1636:	6f 91       	pop	r22
    1638:	5f 91       	pop	r21
    163a:	4f 91       	pop	r20
    163c:	3f 91       	pop	r19
    163e:	2f 91       	pop	r18
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0
    1646:	1f 90       	pop	r1
    1648:	18 95       	reti

0000164a <enqueueByDeadline>:
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	7b 01       	movw	r14, r22
    1658:	eb 01       	movw	r28, r22
    165a:	a8 81       	ld	r26, Y
    165c:	b9 81       	ldd	r27, Y+1	; 0x01
    165e:	10 97       	sbiw	r26, 0x00	; 0
    1660:	61 f1       	breq	.+88     	; 0x16ba <enqueueByDeadline+0x70>
    1662:	fc 01       	movw	r30, r24
    1664:	06 81       	ldd	r16, Z+6	; 0x06
    1666:	17 81       	ldd	r17, Z+7	; 0x07
    1668:	20 85       	ldd	r18, Z+8	; 0x08
    166a:	31 85       	ldd	r19, Z+9	; 0x09
    166c:	16 96       	adiw	r26, 0x06	; 6
    166e:	4d 91       	ld	r20, X+
    1670:	5d 91       	ld	r21, X+
    1672:	6d 91       	ld	r22, X+
    1674:	7c 91       	ld	r23, X
    1676:	19 97       	sbiw	r26, 0x09	; 9
    1678:	04 17       	cp	r16, r20
    167a:	15 07       	cpc	r17, r21
    167c:	26 07       	cpc	r18, r22
    167e:	37 07       	cpc	r19, r23
    1680:	14 f4       	brge	.+4      	; 0x1686 <enqueueByDeadline+0x3c>
    1682:	1b c0       	rjmp	.+54     	; 0x16ba <enqueueByDeadline+0x70>
    1684:	df 01       	movw	r26, r30
    1686:	ed 91       	ld	r30, X+
    1688:	fc 91       	ld	r31, X
    168a:	11 97       	sbiw	r26, 0x01	; 1
    168c:	30 97       	sbiw	r30, 0x00	; 0
    168e:	49 f0       	breq	.+18     	; 0x16a2 <enqueueByDeadline+0x58>
    1690:	46 81       	ldd	r20, Z+6	; 0x06
    1692:	57 81       	ldd	r21, Z+7	; 0x07
    1694:	60 85       	ldd	r22, Z+8	; 0x08
    1696:	71 85       	ldd	r23, Z+9	; 0x09
    1698:	04 17       	cp	r16, r20
    169a:	15 07       	cpc	r17, r21
    169c:	26 07       	cpc	r18, r22
    169e:	37 07       	cpc	r19, r23
    16a0:	8c f7       	brge	.-30     	; 0x1684 <enqueueByDeadline+0x3a>
    16a2:	ec 01       	movw	r28, r24
    16a4:	f9 83       	std	Y+1, r31	; 0x01
    16a6:	e8 83       	st	Y, r30
    16a8:	10 97       	sbiw	r26, 0x00	; 0
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <enqueueByDeadline+0x6a>
    16ac:	f7 01       	movw	r30, r14
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	07 c0       	rjmp	.+14     	; 0x16c2 <enqueueByDeadline+0x78>
    16b4:	8d 93       	st	X+, r24
    16b6:	9c 93       	st	X, r25
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <enqueueByDeadline+0x78>
    16ba:	ec 01       	movw	r28, r24
    16bc:	b9 83       	std	Y+1, r27	; 0x01
    16be:	a8 83       	st	Y, r26
    16c0:	f5 cf       	rjmp	.-22     	; 0x16ac <enqueueByDeadline+0x62>
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	08 95       	ret

000016d0 <dequeue>:
    16d0:	dc 01       	movw	r26, r24
    16d2:	ed 91       	ld	r30, X+
    16d4:	fc 91       	ld	r31, X
    16d6:	11 97       	sbiw	r26, 0x01	; 1
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	59 f4       	brne	.+22     	; 0x16f2 <dequeue+0x22>
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    16e2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    16e6:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	83 bf       	out	0x33, r24	; 51
    16ee:	88 95       	sleep
    16f0:	fd cf       	rjmp	.-6      	; 0x16ec <dequeue+0x1c>
    16f2:	20 81       	ld	r18, Z
    16f4:	31 81       	ldd	r19, Z+1	; 0x01
    16f6:	2d 93       	st	X+, r18
    16f8:	3c 93       	st	X, r19
    16fa:	cf 01       	movw	r24, r30
    16fc:	08 95       	ret

000016fe <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    171c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
    1720:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
    172a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
    TIMERSET(timerQ);
    172e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    1732:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    1736:	30 97       	sbiw	r30, 0x00	; 0
    1738:	01 f1       	breq	.+64     	; 0x177a <__vector_9+0x7c>
    173a:	42 81       	ldd	r20, Z+2	; 0x02
    173c:	53 81       	ldd	r21, Z+3	; 0x03
    173e:	64 81       	ldd	r22, Z+4	; 0x04
    1740:	75 81       	ldd	r23, Z+5	; 0x05
    1742:	86 17       	cp	r24, r22
    1744:	97 07       	cpc	r25, r23
    1746:	c9 f4       	brne	.+50     	; 0x177a <__vector_9+0x7c>
    1748:	ca 01       	movw	r24, r20
    174a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    174e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1752:	42 1b       	sub	r20, r18
    1754:	53 0b       	sbc	r21, r19
    1756:	41 30       	cpi	r20, 0x01	; 1
    1758:	51 05       	cpc	r21, r1
    175a:	29 f4       	brne	.+10     	; 0x1766 <__vector_9+0x68>
    175c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1760:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    176a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    176e:	ef e6       	ldi	r30, 0x6F	; 111
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	82 60       	ori	r24, 0x02	; 2
    1776:	80 83       	st	Z, r24
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <__vector_9+0x86>
    177a:	ef e6       	ldi	r30, 0x6F	; 111
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8d 7f       	andi	r24, 0xFD	; 253
    1782:	80 83       	st	Z, r24
}
    1784:	ff 91       	pop	r31
    1786:	ef 91       	pop	r30
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_7>:

TIMER_COMPARE_INTERRUPT {
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	2f 93       	push	r18
    17b6:	3f 93       	push	r19
    17b8:	4f 93       	push	r20
    17ba:	5f 93       	push	r21
    17bc:	6f 93       	push	r22
    17be:	7f 93       	push	r23
    17c0:	8f 93       	push	r24
    17c2:	9f 93       	push	r25
    17c4:	af 93       	push	r26
    17c6:	bf 93       	push	r27
    17c8:	ef 93       	push	r30
    17ca:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    17cc:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <__data_end>
    17d0:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <__data_end+0x1>
    17d4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17d8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17dc:	b0 99       	sbic	0x16, 0	; 22
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <__vector_7+0x5c>
    17e0:	0d 2c       	mov	r0, r13
    17e2:	00 0c       	add	r0, r0
    17e4:	ee 08       	sbc	r14, r14
    17e6:	ff 08       	sbc	r15, r15
    17e8:	d6 01       	movw	r26, r12
    17ea:	99 27       	eor	r25, r25
    17ec:	88 27       	eor	r24, r24
    17ee:	69 01       	movw	r12, r18
    17f0:	e1 2c       	mov	r14, r1
    17f2:	f1 2c       	mov	r15, r1
    17f4:	c8 2a       	or	r12, r24
    17f6:	d9 2a       	or	r13, r25
    17f8:	ea 2a       	or	r14, r26
    17fa:	fb 2a       	or	r15, r27
    17fc:	15 c0       	rjmp	.+42     	; 0x1828 <__vector_7+0x86>
    17fe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1802:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1806:	8f ef       	ldi	r24, 0xFF	; 255
    1808:	c8 1a       	sub	r12, r24
    180a:	d8 0a       	sbc	r13, r24
    180c:	0d 2c       	mov	r0, r13
    180e:	00 0c       	add	r0, r0
    1810:	ee 08       	sbc	r14, r14
    1812:	ff 08       	sbc	r15, r15
    1814:	d6 01       	movw	r26, r12
    1816:	99 27       	eor	r25, r25
    1818:	88 27       	eor	r24, r24
    181a:	69 01       	movw	r12, r18
    181c:	e1 2c       	mov	r14, r1
    181e:	f1 2c       	mov	r15, r1
    1820:	c8 2a       	or	r12, r24
    1822:	d9 2a       	or	r13, r25
    1824:	ea 2a       	or	r14, r26
    1826:	fb 2a       	or	r15, r27
    while (timerQ && (timerQ->baseline - now <= 0))
    1828:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    182c:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    1830:	30 97       	sbiw	r30, 0x00	; 0
    1832:	09 f4       	brne	.+2      	; 0x1836 <__vector_7+0x94>
    1834:	42 c0       	rjmp	.+132    	; 0x18ba <__vector_7+0x118>
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	a4 81       	ldd	r26, Z+4	; 0x04
    183c:	b5 81       	ldd	r27, Z+5	; 0x05
    183e:	8c 19       	sub	r24, r12
    1840:	9d 09       	sbc	r25, r13
    1842:	ae 09       	sbc	r26, r14
    1844:	bf 09       	sbc	r27, r15
    1846:	18 16       	cp	r1, r24
    1848:	19 06       	cpc	r1, r25
    184a:	1a 06       	cpc	r1, r26
    184c:	1b 06       	cpc	r1, r27
    184e:	ec f1       	brlt	.+122    	; 0x18ca <__vector_7+0x128>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    1850:	8c e0       	ldi	r24, 0x0C	; 12
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <dequeue>
    1858:	6e e0       	ldi	r22, 0x0E	; 14
    185a:	71 e0       	ldi	r23, 0x01	; 1
    185c:	0e 94 25 0b 	call	0x164a	; 0x164a <enqueueByDeadline>

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    1860:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    1864:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    1868:	30 97       	sbiw	r30, 0x00	; 0
    186a:	39 f1       	breq	.+78     	; 0x18ba <__vector_7+0x118>
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	a4 81       	ldd	r26, Z+4	; 0x04
    1872:	b5 81       	ldd	r27, Z+5	; 0x05
    1874:	8c 19       	sub	r24, r12
    1876:	9d 09       	sbc	r25, r13
    1878:	ae 09       	sbc	r26, r14
    187a:	bf 09       	sbc	r27, r15
    187c:	18 16       	cp	r1, r24
    187e:	19 06       	cpc	r1, r25
    1880:	1a 06       	cpc	r1, r26
    1882:	1b 06       	cpc	r1, r27
    1884:	2c f7       	brge	.-54     	; 0x1850 <__vector_7+0xae>
    1886:	21 c0       	rjmp	.+66     	; 0x18ca <__vector_7+0x128>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    1888:	9c 01       	movw	r18, r24
    188a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    188e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1892:	84 1b       	sub	r24, r20
    1894:	95 0b       	sbc	r25, r21
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	31 f4       	brne	.+12     	; 0x18a6 <__vector_7+0x104>
    189a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    189e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18a2:	2f 5f       	subi	r18, 0xFF	; 255
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
    18a6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    18aa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    18ae:	ef e6       	ldi	r30, 0x6F	; 111
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	82 60       	ori	r24, 0x02	; 2
    18b6:	80 83       	st	Z, r24
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <__vector_7+0x122>
    18ba:	ef e6       	ldi	r30, 0x6F	; 111
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8d 7f       	andi	r24, 0xFD	; 253
    18c2:	80 83       	st	Z, r24
    schedule();
    18c4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <schedule>
}
    18c8:	0c c0       	rjmp	.+24     	; 0x18e2 <__vector_7+0x140>
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	a4 81       	ldd	r26, Z+4	; 0x04
    18d0:	b5 81       	ldd	r27, Z+5	; 0x05
    18d2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    18d6:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    18da:	2a 17       	cp	r18, r26
    18dc:	3b 07       	cpc	r19, r27
    18de:	69 f7       	brne	.-38     	; 0x18ba <__vector_7+0x118>
    18e0:	d3 cf       	rjmp	.-90     	; 0x1888 <__vector_7+0xe6>
    schedule();
}
    18e2:	ff 91       	pop	r31
    18e4:	ef 91       	pop	r30
    18e6:	bf 91       	pop	r27
    18e8:	af 91       	pop	r26
    18ea:	9f 91       	pop	r25
    18ec:	8f 91       	pop	r24
    18ee:	7f 91       	pop	r23
    18f0:	6f 91       	pop	r22
    18f2:	5f 91       	pop	r21
    18f4:	4f 91       	pop	r20
    18f6:	3f 91       	pop	r19
    18f8:	2f 91       	pop	r18
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti

0000190c <__divmodsi4>:
    190c:	05 2e       	mov	r0, r21
    190e:	97 fb       	bst	r25, 7
    1910:	1e f4       	brtc	.+6      	; 0x1918 <__divmodsi4+0xc>
    1912:	00 94       	com	r0
    1914:	0e 94 9d 0c 	call	0x193a	; 0x193a <__negsi2>
    1918:	57 fd       	sbrc	r21, 7
    191a:	07 d0       	rcall	.+14     	; 0x192a <__divmodsi4_neg2>
    191c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__udivmodsi4>
    1920:	07 fc       	sbrc	r0, 7
    1922:	03 d0       	rcall	.+6      	; 0x192a <__divmodsi4_neg2>
    1924:	4e f4       	brtc	.+18     	; 0x1938 <__divmodsi4_exit>
    1926:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__negsi2>

0000192a <__divmodsi4_neg2>:
    192a:	50 95       	com	r21
    192c:	40 95       	com	r20
    192e:	30 95       	com	r19
    1930:	21 95       	neg	r18
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	4f 4f       	sbci	r20, 0xFF	; 255
    1936:	5f 4f       	sbci	r21, 0xFF	; 255

00001938 <__divmodsi4_exit>:
    1938:	08 95       	ret

0000193a <__negsi2>:
    193a:	90 95       	com	r25
    193c:	80 95       	com	r24
    193e:	70 95       	com	r23
    1940:	61 95       	neg	r22
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	8f 4f       	sbci	r24, 0xFF	; 255
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	08 95       	ret

0000194a <__tablejump2__>:
    194a:	ee 0f       	add	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	05 90       	lpm	r0, Z+
    1950:	f4 91       	lpm	r31, Z
    1952:	e0 2d       	mov	r30, r0
    1954:	09 94       	ijmp

00001956 <__udivmodsi4>:
    1956:	a1 e2       	ldi	r26, 0x21	; 33
    1958:	1a 2e       	mov	r1, r26
    195a:	aa 1b       	sub	r26, r26
    195c:	bb 1b       	sub	r27, r27
    195e:	fd 01       	movw	r30, r26
    1960:	0d c0       	rjmp	.+26     	; 0x197c <__udivmodsi4_ep>

00001962 <__udivmodsi4_loop>:
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27
    1966:	ee 1f       	adc	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	a2 17       	cp	r26, r18
    196c:	b3 07       	cpc	r27, r19
    196e:	e4 07       	cpc	r30, r20
    1970:	f5 07       	cpc	r31, r21
    1972:	20 f0       	brcs	.+8      	; 0x197c <__udivmodsi4_ep>
    1974:	a2 1b       	sub	r26, r18
    1976:	b3 0b       	sbc	r27, r19
    1978:	e4 0b       	sbc	r30, r20
    197a:	f5 0b       	sbc	r31, r21

0000197c <__udivmodsi4_ep>:
    197c:	66 1f       	adc	r22, r22
    197e:	77 1f       	adc	r23, r23
    1980:	88 1f       	adc	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	1a 94       	dec	r1
    1986:	69 f7       	brne	.-38     	; 0x1962 <__udivmodsi4_loop>
    1988:	60 95       	com	r22
    198a:	70 95       	com	r23
    198c:	80 95       	com	r24
    198e:	90 95       	com	r25
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	bd 01       	movw	r22, r26
    1996:	cf 01       	movw	r24, r30
    1998:	08 95       	ret

0000199a <setjmp>:
    199a:	dc 01       	movw	r26, r24
    199c:	2d 92       	st	X+, r2
    199e:	3d 92       	st	X+, r3
    19a0:	4d 92       	st	X+, r4
    19a2:	5d 92       	st	X+, r5
    19a4:	6d 92       	st	X+, r6
    19a6:	7d 92       	st	X+, r7
    19a8:	8d 92       	st	X+, r8
    19aa:	9d 92       	st	X+, r9
    19ac:	ad 92       	st	X+, r10
    19ae:	bd 92       	st	X+, r11
    19b0:	cd 92       	st	X+, r12
    19b2:	dd 92       	st	X+, r13
    19b4:	ed 92       	st	X+, r14
    19b6:	fd 92       	st	X+, r15
    19b8:	0d 93       	st	X+, r16
    19ba:	1d 93       	st	X+, r17
    19bc:	cd 93       	st	X+, r28
    19be:	dd 93       	st	X+, r29
    19c0:	ff 91       	pop	r31
    19c2:	ef 91       	pop	r30
    19c4:	8d b7       	in	r24, 0x3d	; 61
    19c6:	8d 93       	st	X+, r24
    19c8:	8e b7       	in	r24, 0x3e	; 62
    19ca:	8d 93       	st	X+, r24
    19cc:	8f b7       	in	r24, 0x3f	; 63
    19ce:	8d 93       	st	X+, r24
    19d0:	ed 93       	st	X+, r30
    19d2:	fd 93       	st	X+, r31
    19d4:	88 27       	eor	r24, r24
    19d6:	99 27       	eor	r25, r25
    19d8:	09 94       	ijmp

000019da <longjmp>:
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	91 05       	cpc	r25, r1
    19e2:	81 1d       	adc	r24, r1
    19e4:	2d 90       	ld	r2, X+
    19e6:	3d 90       	ld	r3, X+
    19e8:	4d 90       	ld	r4, X+
    19ea:	5d 90       	ld	r5, X+
    19ec:	6d 90       	ld	r6, X+
    19ee:	7d 90       	ld	r7, X+
    19f0:	8d 90       	ld	r8, X+
    19f2:	9d 90       	ld	r9, X+
    19f4:	ad 90       	ld	r10, X+
    19f6:	bd 90       	ld	r11, X+
    19f8:	cd 90       	ld	r12, X+
    19fa:	dd 90       	ld	r13, X+
    19fc:	ed 90       	ld	r14, X+
    19fe:	fd 90       	ld	r15, X+
    1a00:	0d 91       	ld	r16, X+
    1a02:	1d 91       	ld	r17, X+
    1a04:	cd 91       	ld	r28, X+
    1a06:	dd 91       	ld	r29, X+
    1a08:	ed 91       	ld	r30, X+
    1a0a:	fd 91       	ld	r31, X+
    1a0c:	0d 90       	ld	r0, X+
    1a0e:	f8 94       	cli
    1a10:	fe bf       	out	0x3e, r31	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	ed bf       	out	0x3d, r30	; 61
    1a16:	ed 91       	ld	r30, X+
    1a18:	fd 91       	ld	r31, X+
    1a1a:	09 94       	ijmp

00001a1c <_exit>:
    1a1c:	f8 94       	cli

00001a1e <__stop_program>:
    1a1e:	ff cf       	rjmp	.-2      	; 0x1a1e <__stop_program>
