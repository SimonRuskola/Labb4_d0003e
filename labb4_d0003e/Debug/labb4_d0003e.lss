
labb4_d0003e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  0000245a  000024ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000245a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  0080013c  0080013c  0000252a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000252a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000255c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002adb  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000106c  00000000  00000000  000052bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001562  00000000  00000000  0000632b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  00007890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096f  00000000  00000000  00008470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027f2  00000000  00000000  00008ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000b5d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__vector_1>
       8:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_2>
       c:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_3>
      10:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__vector_4>
      14:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__vector_9>
      28:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__vector_10>
      2c:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_11>
      30:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_12>
      34:	0c 94 47 09 	jmp	0x128e	; 0x128e <__vector_13>
      38:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__vector_14>
      3c:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_15>
      40:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_16>
      44:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_17>
      48:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__vector_18>
      4c:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__vector_19>
      50:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_20>
      54:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_21>
      58:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_22>
      5c:	ac 00       	.word	0x00ac	; ????
      5e:	8e 00       	.word	0x008e	; ????
      60:	91 00       	.word	0x0091	; ????
      62:	94 00       	.word	0x0094	; ????
      64:	97 00       	.word	0x0097	; ????
      66:	9a 00       	.word	0x009a	; ????
      68:	9d 00       	.word	0x009d	; ????
      6a:	a0 00       	.word	0x00a0	; ????
      6c:	a3 00       	.word	0x00a3	; ????
      6e:	a6 00       	.word	0x00a6	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ea e5       	ldi	r30, 0x5A	; 90
      84:	f4 e2       	ldi	r31, 0x24	; 36
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 33       	cpi	r26, 0x3C	; 60
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	ac e3       	ldi	r26, 0x3C	; 60
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a3 39       	cpi	r26, 0x93	; 147
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 75 04 	call	0x8ea	; 0x8ea <main>
      a6:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <unlock>:
void hold(guiObj* self){
    AFTER(MSEC(500),self,updateGui,NULL);
}

void unlock(guiObj* self){
    self->lock = 0;
      ae:	fc 01       	movw	r30, r24
      b0:	13 8a       	std	Z+19, r1	; 0x13
      b2:	12 8a       	std	Z+18, r1	; 0x12
      b4:	08 95       	ret

000000b6 <LCD_Init>:

 }


void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      b6:	e1 e6       	ldi	r30, 0x61	; 97
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	80 83       	st	Z, r24
	CLKPR = 0x00;
      be:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      c0:	87 eb       	ldi	r24, 0xB7	; 183
      c2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      c6:	87 e0       	ldi	r24, 0x07	; 7
      c8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      cc:	8f e0       	ldi	r24, 0x0F	; 15
      ce:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      d2:	80 ec       	ldi	r24, 0xC0	; 192
      d4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d8:	08 95       	ret

000000da <button_init>:
void button_init(void){


    
    // initialize button
    PORTB |= ((1 << 7)| (1 << 6 ) | (1 << 4));  // 7 down, 6 up, 4 center down 
      da:	85 b1       	in	r24, 0x05	; 5
      dc:	80 6d       	ori	r24, 0xD0	; 208
      de:	85 b9       	out	0x05, r24	; 5
	PORTE |= ( (1 << 2) | ( 1 << 3));           // 2 left, 3 right
      e0:	8e b1       	in	r24, 0x0e	; 14
      e2:	8c 60       	ori	r24, 0x0C	; 12
      e4:	8e b9       	out	0x0e, r24	; 14


	// enable interupts for joystick
    EIMSK |= (1 << PCIE1) | (1 << PCIE0); //  PCIE1 enables PCINT15..8 interupts // PCIE0 enables PCINT7..0 interupts
      e6:	8d b3       	in	r24, 0x1d	; 29
      e8:	80 6c       	ori	r24, 0xC0	; 192
      ea:	8d bb       	out	0x1d, r24	; 29
	//EIMSK |= (1 << PCINT15);

	PCMSK1 |= (1 << PCINT15)|(1 << PCINT14)|(1 << PCINT12); //enables those pins
      ec:	ec e6       	ldi	r30, 0x6C	; 108
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	80 6d       	ori	r24, 0xD0	; 208
      f4:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3)|(1 << PCINT2);
      f6:	eb e6       	ldi	r30, 0x6B	; 107
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	8c 60       	ori	r24, 0x0C	; 12
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <Gui__init>:




void Gui__init() {
    LCD_Init();
     102:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Init>
    button_init();
     106:	0e 94 6d 00 	call	0xda	; 0xda <button_init>
     10a:	08 95       	ret

0000010c <getValueArray>:


}

int getValueArray(int i){
    switch (i)
     10c:	8a 30       	cpi	r24, 0x0A	; 10
     10e:	91 05       	cpc	r25, r1
     110:	00 f5       	brcc	.+64     	; 0x152 <getValueArray+0x46>
     112:	fc 01       	movw	r30, r24
     114:	e2 5d       	subi	r30, 0xD2	; 210
     116:	ff 4f       	sbci	r31, 0xFF	; 255
     118:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
     11c:	80 e8       	ldi	r24, 0x80	; 128
     11e:	90 e2       	ldi	r25, 0x20	; 32
     120:	08 95       	ret
    
    case 2:
        return TwoValue;
     122:	81 e1       	ldi	r24, 0x11	; 17
     124:	9e e1       	ldi	r25, 0x1E	; 30
     126:	08 95       	ret

    case 3:
        return ThreeValue;
     128:	81 e1       	ldi	r24, 0x11	; 17
     12a:	9b e1       	ldi	r25, 0x1B	; 27
     12c:	08 95       	ret
    
    case 4:
        return FourValue;
     12e:	80 e5       	ldi	r24, 0x50	; 80
     130:	9b e0       	ldi	r25, 0x0B	; 11
     132:	08 95       	ret

    case 5:
        return FiveValue;
     134:	81 e4       	ldi	r24, 0x41	; 65
     136:	9b e1       	ldi	r25, 0x1B	; 27
     138:	08 95       	ret
    
    case 6:
        return SixValue;
     13a:	81 e4       	ldi	r24, 0x41	; 65
     13c:	9f e1       	ldi	r25, 0x1F	; 31
     13e:	08 95       	ret
    
    case 7:
        return SevenValue;
     140:	81 e1       	ldi	r24, 0x11	; 17
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	08 95       	ret
        
    case 8:
        return EightValue;
     146:	81 e5       	ldi	r24, 0x51	; 81
     148:	9f e1       	ldi	r25, 0x1F	; 31
     14a:	08 95       	ret
    
    case 9:
        return NineValue;
     14c:	81 e5       	ldi	r24, 0x51	; 81
     14e:	9b e0       	ldi	r25, 0x0B	; 11
     150:	08 95       	ret
    
    default: // 10
        return BlankValue;
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	08 95       	ret

int getValueArray(int i){
    switch (i)
    {
    case 0:
        return ZeroValue;
     158:	81 e5       	ldi	r24, 0x51	; 81
     15a:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     15c:	08 95       	ret

0000015e <writeChar>:

void writeChar(char ch, int pos) {
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	00 d0       	rcall	.+0      	; 0x16a <writeChar+0xc>
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
	

	volatile int i = 0;
     16e:	1a 82       	std	Y+2, r1	; 0x02
     170:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     172:	66 30       	cpi	r22, 0x06	; 6
     174:	71 05       	cpc	r23, r1
     176:	08 f0       	brcs	.+2      	; 0x17a <writeChar+0x1c>
     178:	fe c1       	rjmp	.+1020   	; 0x576 <__stack+0x77>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     17a:	90 ed       	ldi	r25, 0xD0	; 208
     17c:	98 0f       	add	r25, r24
     17e:	9a 30       	cpi	r25, 0x0A	; 10
     180:	28 f0       	brcs	.+10     	; 0x18c <writeChar+0x2e>
		i=10;
     182:	8a e0       	ldi	r24, 0x0A	; 10
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9a 83       	std	Y+2, r25	; 0x02
     188:	89 83       	std	Y+1, r24	; 0x01
     18a:	04 c0       	rjmp	.+8      	; 0x194 <writeChar+0x36>
	}else{
        i = ch - 48;
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	c0 97       	sbiw	r24, 0x30	; 48
     190:	9a 83       	std	Y+2, r25	; 0x02
     192:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     194:	61 15       	cp	r22, r1
     196:	71 05       	cpc	r23, r1
     198:	09 f0       	breq	.+2      	; 0x19c <writeChar+0x3e>
     19a:	4e c0       	rjmp	.+156    	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     19c:	0f 2e       	mov	r0, r31
     19e:	fc ee       	ldi	r31, 0xEC	; 236
     1a0:	ef 2e       	mov	r14, r31
     1a2:	f1 2c       	mov	r15, r1
     1a4:	f0 2d       	mov	r31, r0
     1a6:	f7 01       	movw	r30, r14
     1a8:	10 81       	ld	r17, Z
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	9a 81       	ldd	r25, Y+2	; 0x02
     1ae:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     1b2:	10 7f       	andi	r17, 0xF0	; 240
     1b4:	8f 70       	andi	r24, 0x0F	; 15
     1b6:	81 2b       	or	r24, r17
     1b8:	f7 01       	movw	r30, r14
     1ba:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     1bc:	0f 2e       	mov	r0, r31
     1be:	f1 ef       	ldi	r31, 0xF1	; 241
     1c0:	ef 2e       	mov	r14, r31
     1c2:	f1 2c       	mov	r15, r1
     1c4:	f0 2d       	mov	r31, r0
     1c6:	f7 01       	movw	r30, r14
     1c8:	10 81       	ld	r17, Z
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     1d2:	80 7f       	andi	r24, 0xF0	; 240
     1d4:	99 27       	eor	r25, r25
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	95 95       	asr	r25
     1dc:	87 95       	ror	r24
     1de:	95 95       	asr	r25
     1e0:	87 95       	ror	r24
     1e2:	95 95       	asr	r25
     1e4:	87 95       	ror	r24
     1e6:	10 7f       	andi	r17, 0xF0	; 240
     1e8:	81 2b       	or	r24, r17
     1ea:	f7 01       	movw	r30, r14
     1ec:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1ee:	0f 2e       	mov	r0, r31
     1f0:	f6 ef       	ldi	r31, 0xF6	; 246
     1f2:	ef 2e       	mov	r14, r31
     1f4:	f1 2c       	mov	r15, r1
     1f6:	f0 2d       	mov	r31, r0
     1f8:	f7 01       	movw	r30, r14
     1fa:	10 81       	ld	r17, Z
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	9a 81       	ldd	r25, Y+2	; 0x02
     200:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     204:	88 27       	eor	r24, r24
     206:	9f 70       	andi	r25, 0x0F	; 15
     208:	10 7f       	andi	r17, 0xF0	; 240
     20a:	19 2b       	or	r17, r25
     20c:	f7 01       	movw	r30, r14
     20e:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     210:	0f 2e       	mov	r0, r31
     212:	fb ef       	ldi	r31, 0xFB	; 251
     214:	ef 2e       	mov	r14, r31
     216:	f1 2c       	mov	r15, r1
     218:	f0 2d       	mov	r31, r0
     21a:	f7 01       	movw	r30, r14
     21c:	10 81       	ld	r17, Z
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	9a 81       	ldd	r25, Y+2	; 0x02
     222:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     226:	10 7f       	andi	r17, 0xF0	; 240
     228:	95 95       	asr	r25
     22a:	95 95       	asr	r25
     22c:	95 95       	asr	r25
     22e:	95 95       	asr	r25
     230:	91 2b       	or	r25, r17
     232:	f7 01       	movw	r30, r14
     234:	90 83       	st	Z, r25
     236:	9f c1       	rjmp	.+830    	; 0x576 <__stack+0x77>
		
	} else if(pos==1){
     238:	61 30       	cpi	r22, 0x01	; 1
     23a:	71 05       	cpc	r23, r1
     23c:	09 f0       	breq	.+2      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
     23e:	50 c0       	rjmp	.+160    	; 0x2e0 <__EEPROM_REGION_LENGTH__+0xe0>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     240:	0f 2e       	mov	r0, r31
     242:	fc ee       	ldi	r31, 0xEC	; 236
     244:	ef 2e       	mov	r14, r31
     246:	f1 2c       	mov	r15, r1
     248:	f0 2d       	mov	r31, r0
     24a:	f7 01       	movw	r30, r14
     24c:	10 81       	ld	r17, Z
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     256:	1f 70       	andi	r17, 0x0F	; 15
     258:	82 95       	swap	r24
     25a:	92 95       	swap	r25
     25c:	90 7f       	andi	r25, 0xF0	; 240
     25e:	98 27       	eor	r25, r24
     260:	80 7f       	andi	r24, 0xF0	; 240
     262:	98 27       	eor	r25, r24
     264:	81 2b       	or	r24, r17
     266:	f7 01       	movw	r30, r14
     268:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     26a:	0f 2e       	mov	r0, r31
     26c:	f1 ef       	ldi	r31, 0xF1	; 241
     26e:	ef 2e       	mov	r14, r31
     270:	f1 2c       	mov	r15, r1
     272:	f0 2d       	mov	r31, r0
     274:	f7 01       	movw	r30, r14
     276:	10 81       	ld	r17, Z
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
     27c:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     280:	1f 70       	andi	r17, 0x0F	; 15
     282:	80 7f       	andi	r24, 0xF0	; 240
     284:	81 2b       	or	r24, r17
     286:	f7 01       	movw	r30, r14
     288:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     28a:	0f 2e       	mov	r0, r31
     28c:	f6 ef       	ldi	r31, 0xF6	; 246
     28e:	ef 2e       	mov	r14, r31
     290:	f1 2c       	mov	r15, r1
     292:	f0 2d       	mov	r31, r0
     294:	f7 01       	movw	r30, r14
     296:	10 81       	ld	r17, Z
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	9a 81       	ldd	r25, Y+2	; 0x02
     29c:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     2a0:	88 27       	eor	r24, r24
     2a2:	9f 70       	andi	r25, 0x0F	; 15
     2a4:	95 95       	asr	r25
     2a6:	87 95       	ror	r24
     2a8:	95 95       	asr	r25
     2aa:	87 95       	ror	r24
     2ac:	95 95       	asr	r25
     2ae:	87 95       	ror	r24
     2b0:	95 95       	asr	r25
     2b2:	87 95       	ror	r24
     2b4:	1f 70       	andi	r17, 0x0F	; 15
     2b6:	81 2b       	or	r24, r17
     2b8:	f7 01       	movw	r30, r14
     2ba:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     2bc:	0f 2e       	mov	r0, r31
     2be:	fb ef       	ldi	r31, 0xFB	; 251
     2c0:	ef 2e       	mov	r14, r31
     2c2:	f1 2c       	mov	r15, r1
     2c4:	f0 2d       	mov	r31, r0
     2c6:	f7 01       	movw	r30, r14
     2c8:	10 81       	ld	r17, Z
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	9a 81       	ldd	r25, Y+2	; 0x02
     2ce:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     2d2:	88 27       	eor	r24, r24
     2d4:	90 7f       	andi	r25, 0xF0	; 240
     2d6:	1f 70       	andi	r17, 0x0F	; 15
     2d8:	19 2b       	or	r17, r25
     2da:	f7 01       	movw	r30, r14
     2dc:	10 83       	st	Z, r17
     2de:	4b c1       	rjmp	.+662    	; 0x576 <__stack+0x77>
	} else if(pos==2){
     2e0:	62 30       	cpi	r22, 0x02	; 2
     2e2:	71 05       	cpc	r23, r1
     2e4:	09 f0       	breq	.+2      	; 0x2e8 <__EEPROM_REGION_LENGTH__+0xe8>
     2e6:	4e c0       	rjmp	.+156    	; 0x384 <__EEPROM_REGION_LENGTH__+0x184>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2e8:	0f 2e       	mov	r0, r31
     2ea:	fd ee       	ldi	r31, 0xED	; 237
     2ec:	ef 2e       	mov	r14, r31
     2ee:	f1 2c       	mov	r15, r1
     2f0:	f0 2d       	mov	r31, r0
     2f2:	f7 01       	movw	r30, r14
     2f4:	10 81       	ld	r17, Z
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	9a 81       	ldd	r25, Y+2	; 0x02
     2fa:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     2fe:	10 7f       	andi	r17, 0xF0	; 240
     300:	8f 70       	andi	r24, 0x0F	; 15
     302:	81 2b       	or	r24, r17
     304:	f7 01       	movw	r30, r14
     306:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     308:	0f 2e       	mov	r0, r31
     30a:	f2 ef       	ldi	r31, 0xF2	; 242
     30c:	ef 2e       	mov	r14, r31
     30e:	f1 2c       	mov	r15, r1
     310:	f0 2d       	mov	r31, r0
     312:	f7 01       	movw	r30, r14
     314:	10 81       	ld	r17, Z
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	9a 81       	ldd	r25, Y+2	; 0x02
     31a:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     31e:	80 7f       	andi	r24, 0xF0	; 240
     320:	99 27       	eor	r25, r25
     322:	95 95       	asr	r25
     324:	87 95       	ror	r24
     326:	95 95       	asr	r25
     328:	87 95       	ror	r24
     32a:	95 95       	asr	r25
     32c:	87 95       	ror	r24
     32e:	95 95       	asr	r25
     330:	87 95       	ror	r24
     332:	10 7f       	andi	r17, 0xF0	; 240
     334:	81 2b       	or	r24, r17
     336:	f7 01       	movw	r30, r14
     338:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     33a:	0f 2e       	mov	r0, r31
     33c:	f7 ef       	ldi	r31, 0xF7	; 247
     33e:	ef 2e       	mov	r14, r31
     340:	f1 2c       	mov	r15, r1
     342:	f0 2d       	mov	r31, r0
     344:	f7 01       	movw	r30, r14
     346:	10 81       	ld	r17, Z
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     350:	88 27       	eor	r24, r24
     352:	9f 70       	andi	r25, 0x0F	; 15
     354:	10 7f       	andi	r17, 0xF0	; 240
     356:	19 2b       	or	r17, r25
     358:	f7 01       	movw	r30, r14
     35a:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     35c:	0f 2e       	mov	r0, r31
     35e:	fc ef       	ldi	r31, 0xFC	; 252
     360:	ef 2e       	mov	r14, r31
     362:	f1 2c       	mov	r15, r1
     364:	f0 2d       	mov	r31, r0
     366:	f7 01       	movw	r30, r14
     368:	10 81       	ld	r17, Z
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     372:	10 7f       	andi	r17, 0xF0	; 240
     374:	95 95       	asr	r25
     376:	95 95       	asr	r25
     378:	95 95       	asr	r25
     37a:	95 95       	asr	r25
     37c:	91 2b       	or	r25, r17
     37e:	f7 01       	movw	r30, r14
     380:	90 83       	st	Z, r25
     382:	f9 c0       	rjmp	.+498    	; 0x576 <__stack+0x77>
		
	} else if(pos==3){
     384:	63 30       	cpi	r22, 0x03	; 3
     386:	71 05       	cpc	r23, r1
     388:	09 f0       	breq	.+2      	; 0x38c <__EEPROM_REGION_LENGTH__+0x18c>
     38a:	50 c0       	rjmp	.+160    	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     38c:	0f 2e       	mov	r0, r31
     38e:	fd ee       	ldi	r31, 0xED	; 237
     390:	ef 2e       	mov	r14, r31
     392:	f1 2c       	mov	r15, r1
     394:	f0 2d       	mov	r31, r0
     396:	f7 01       	movw	r30, r14
     398:	10 81       	ld	r17, Z
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     3a2:	1f 70       	andi	r17, 0x0F	; 15
     3a4:	82 95       	swap	r24
     3a6:	92 95       	swap	r25
     3a8:	90 7f       	andi	r25, 0xF0	; 240
     3aa:	98 27       	eor	r25, r24
     3ac:	80 7f       	andi	r24, 0xF0	; 240
     3ae:	98 27       	eor	r25, r24
     3b0:	81 2b       	or	r24, r17
     3b2:	f7 01       	movw	r30, r14
     3b4:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     3b6:	0f 2e       	mov	r0, r31
     3b8:	f2 ef       	ldi	r31, 0xF2	; 242
     3ba:	ef 2e       	mov	r14, r31
     3bc:	f1 2c       	mov	r15, r1
     3be:	f0 2d       	mov	r31, r0
     3c0:	f7 01       	movw	r30, r14
     3c2:	10 81       	ld	r17, Z
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	9a 81       	ldd	r25, Y+2	; 0x02
     3c8:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     3cc:	1f 70       	andi	r17, 0x0F	; 15
     3ce:	80 7f       	andi	r24, 0xF0	; 240
     3d0:	81 2b       	or	r24, r17
     3d2:	f7 01       	movw	r30, r14
     3d4:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     3d6:	0f 2e       	mov	r0, r31
     3d8:	f7 ef       	ldi	r31, 0xF7	; 247
     3da:	ef 2e       	mov	r14, r31
     3dc:	f1 2c       	mov	r15, r1
     3de:	f0 2d       	mov	r31, r0
     3e0:	f7 01       	movw	r30, r14
     3e2:	10 81       	ld	r17, Z
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     3ec:	88 27       	eor	r24, r24
     3ee:	9f 70       	andi	r25, 0x0F	; 15
     3f0:	95 95       	asr	r25
     3f2:	87 95       	ror	r24
     3f4:	95 95       	asr	r25
     3f6:	87 95       	ror	r24
     3f8:	95 95       	asr	r25
     3fa:	87 95       	ror	r24
     3fc:	95 95       	asr	r25
     3fe:	87 95       	ror	r24
     400:	1f 70       	andi	r17, 0x0F	; 15
     402:	81 2b       	or	r24, r17
     404:	f7 01       	movw	r30, r14
     406:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     408:	0f 2e       	mov	r0, r31
     40a:	fc ef       	ldi	r31, 0xFC	; 252
     40c:	ef 2e       	mov	r14, r31
     40e:	f1 2c       	mov	r15, r1
     410:	f0 2d       	mov	r31, r0
     412:	f7 01       	movw	r30, r14
     414:	10 81       	ld	r17, Z
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	9a 81       	ldd	r25, Y+2	; 0x02
     41a:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     41e:	88 27       	eor	r24, r24
     420:	90 7f       	andi	r25, 0xF0	; 240
     422:	1f 70       	andi	r17, 0x0F	; 15
     424:	19 2b       	or	r17, r25
     426:	f7 01       	movw	r30, r14
     428:	10 83       	st	Z, r17
     42a:	a5 c0       	rjmp	.+330    	; 0x576 <__stack+0x77>
		
	} else if(pos==4){
     42c:	64 30       	cpi	r22, 0x04	; 4
     42e:	71 05       	cpc	r23, r1
     430:	09 f0       	breq	.+2      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     432:	4e c0       	rjmp	.+156    	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     434:	0f 2e       	mov	r0, r31
     436:	fe ee       	ldi	r31, 0xEE	; 238
     438:	ef 2e       	mov	r14, r31
     43a:	f1 2c       	mov	r15, r1
     43c:	f0 2d       	mov	r31, r0
     43e:	f7 01       	movw	r30, r14
     440:	10 81       	ld	r17, Z
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     44a:	10 7f       	andi	r17, 0xF0	; 240
     44c:	8f 70       	andi	r24, 0x0F	; 15
     44e:	81 2b       	or	r24, r17
     450:	f7 01       	movw	r30, r14
     452:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     454:	0f 2e       	mov	r0, r31
     456:	f3 ef       	ldi	r31, 0xF3	; 243
     458:	ef 2e       	mov	r14, r31
     45a:	f1 2c       	mov	r15, r1
     45c:	f0 2d       	mov	r31, r0
     45e:	f7 01       	movw	r30, r14
     460:	10 81       	ld	r17, Z
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	9a 81       	ldd	r25, Y+2	; 0x02
     466:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     46a:	80 7f       	andi	r24, 0xF0	; 240
     46c:	99 27       	eor	r25, r25
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	95 95       	asr	r25
     474:	87 95       	ror	r24
     476:	95 95       	asr	r25
     478:	87 95       	ror	r24
     47a:	95 95       	asr	r25
     47c:	87 95       	ror	r24
     47e:	10 7f       	andi	r17, 0xF0	; 240
     480:	81 2b       	or	r24, r17
     482:	f7 01       	movw	r30, r14
     484:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     486:	0f 2e       	mov	r0, r31
     488:	f8 ef       	ldi	r31, 0xF8	; 248
     48a:	ef 2e       	mov	r14, r31
     48c:	f1 2c       	mov	r15, r1
     48e:	f0 2d       	mov	r31, r0
     490:	f7 01       	movw	r30, r14
     492:	10 81       	ld	r17, Z
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     49c:	88 27       	eor	r24, r24
     49e:	9f 70       	andi	r25, 0x0F	; 15
     4a0:	10 7f       	andi	r17, 0xF0	; 240
     4a2:	19 2b       	or	r17, r25
     4a4:	f7 01       	movw	r30, r14
     4a6:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     4a8:	0f 2e       	mov	r0, r31
     4aa:	fd ef       	ldi	r31, 0xFD	; 253
     4ac:	ef 2e       	mov	r14, r31
     4ae:	f1 2c       	mov	r15, r1
     4b0:	f0 2d       	mov	r31, r0
     4b2:	f7 01       	movw	r30, r14
     4b4:	10 81       	ld	r17, Z
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     4be:	10 7f       	andi	r17, 0xF0	; 240
     4c0:	95 95       	asr	r25
     4c2:	95 95       	asr	r25
     4c4:	95 95       	asr	r25
     4c6:	95 95       	asr	r25
     4c8:	91 2b       	or	r25, r17
     4ca:	f7 01       	movw	r30, r14
     4cc:	90 83       	st	Z, r25
     4ce:	53 c0       	rjmp	.+166    	; 0x576 <__stack+0x77>
		
	} else if(pos==5){
     4d0:	65 30       	cpi	r22, 0x05	; 5
     4d2:	71 05       	cpc	r23, r1
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <__DATA_REGION_LENGTH__+0xd8>
     4d6:	4f c0       	rjmp	.+158    	; 0x576 <__stack+0x77>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     4d8:	0f 2e       	mov	r0, r31
     4da:	fe ee       	ldi	r31, 0xEE	; 238
     4dc:	ef 2e       	mov	r14, r31
     4de:	f1 2c       	mov	r15, r1
     4e0:	f0 2d       	mov	r31, r0
     4e2:	f7 01       	movw	r30, r14
     4e4:	10 81       	ld	r17, Z
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     4ee:	1f 70       	andi	r17, 0x0F	; 15
     4f0:	82 95       	swap	r24
     4f2:	92 95       	swap	r25
     4f4:	90 7f       	andi	r25, 0xF0	; 240
     4f6:	98 27       	eor	r25, r24
     4f8:	80 7f       	andi	r24, 0xF0	; 240
     4fa:	98 27       	eor	r25, r24
     4fc:	81 2b       	or	r24, r17
     4fe:	f7 01       	movw	r30, r14
     500:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     502:	0f 2e       	mov	r0, r31
     504:	f3 ef       	ldi	r31, 0xF3	; 243
     506:	ef 2e       	mov	r14, r31
     508:	f1 2c       	mov	r15, r1
     50a:	f0 2d       	mov	r31, r0
     50c:	f7 01       	movw	r30, r14
     50e:	10 81       	ld	r17, Z
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	9a 81       	ldd	r25, Y+2	; 0x02
     514:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     518:	1f 70       	andi	r17, 0x0F	; 15
     51a:	80 7f       	andi	r24, 0xF0	; 240
     51c:	81 2b       	or	r24, r17
     51e:	f7 01       	movw	r30, r14
     520:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     522:	0f 2e       	mov	r0, r31
     524:	f8 ef       	ldi	r31, 0xF8	; 248
     526:	ef 2e       	mov	r14, r31
     528:	f1 2c       	mov	r15, r1
     52a:	f0 2d       	mov	r31, r0
     52c:	f7 01       	movw	r30, r14
     52e:	10 81       	ld	r17, Z
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     538:	88 27       	eor	r24, r24
     53a:	9f 70       	andi	r25, 0x0F	; 15
     53c:	95 95       	asr	r25
     53e:	87 95       	ror	r24
     540:	95 95       	asr	r25
     542:	87 95       	ror	r24
     544:	95 95       	asr	r25
     546:	87 95       	ror	r24
     548:	95 95       	asr	r25
     54a:	87 95       	ror	r24
     54c:	1f 70       	andi	r17, 0x0F	; 15
     54e:	81 2b       	or	r24, r17
     550:	f7 01       	movw	r30, r14
     552:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     554:	0f 2e       	mov	r0, r31
     556:	fd ef       	ldi	r31, 0xFD	; 253
     558:	ef 2e       	mov	r14, r31
     55a:	f1 2c       	mov	r15, r1
     55c:	f0 2d       	mov	r31, r0
     55e:	f7 01       	movw	r30, r14
     560:	10 81       	ld	r17, Z
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	9a 81       	ldd	r25, Y+2	; 0x02
     566:	0e 94 86 00 	call	0x10c	; 0x10c <getValueArray>
     56a:	88 27       	eor	r24, r24
     56c:	90 7f       	andi	r25, 0xF0	; 240
     56e:	1f 70       	andi	r17, 0x0F	; 15
     570:	19 2b       	or	r17, r25
     572:	f7 01       	movw	r30, r14
     574:	10 83       	st	Z, r17
		
	}
	

}
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <printAt>:

void printAt(long num, int pos) {
     586:	8f 92       	push	r8
     588:	9f 92       	push	r9
     58a:	af 92       	push	r10
     58c:	bf 92       	push	r11
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	4b 01       	movw	r8, r22
     59c:	5c 01       	movw	r10, r24
     59e:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     5a0:	24 e6       	ldi	r18, 0x64	; 100
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodsi4>
     5ac:	0f 2e       	mov	r0, r31
     5ae:	fa e0       	ldi	r31, 0x0A	; 10
     5b0:	cf 2e       	mov	r12, r31
     5b2:	d1 2c       	mov	r13, r1
     5b4:	e1 2c       	mov	r14, r1
     5b6:	f1 2c       	mov	r15, r1
     5b8:	f0 2d       	mov	r31, r0
     5ba:	a7 01       	movw	r20, r14
     5bc:	96 01       	movw	r18, r12
     5be:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodsi4>
     5c2:	be 01       	movw	r22, r28
     5c4:	80 e3       	ldi	r24, 0x30	; 48
     5c6:	82 0f       	add	r24, r18
     5c8:	0e 94 af 00 	call	0x15e	; 0x15e <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     5cc:	21 96       	adiw	r28, 0x01	; 1
     5ce:	c5 01       	movw	r24, r10
     5d0:	b4 01       	movw	r22, r8
     5d2:	a7 01       	movw	r20, r14
     5d4:	96 01       	movw	r18, r12
     5d6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodsi4>
     5da:	86 2f       	mov	r24, r22
     5dc:	be 01       	movw	r22, r28
     5de:	80 5d       	subi	r24, 0xD0	; 208
     5e0:	0e 94 af 00 	call	0x15e	; 0x15e <writeChar>
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	cf 90       	pop	r12
     5f0:	bf 90       	pop	r11
     5f2:	af 90       	pop	r10
     5f4:	9f 90       	pop	r9
     5f6:	8f 90       	pop	r8
     5f8:	08 95       	ret

000005fa <readJoystick>:


int readJoystick(void){
    if(PINB>>7==0){ // 7 down
     5fa:	1f 9b       	sbis	0x03, 7	; 3
     5fc:	0b c0       	rjmp	.+22     	; 0x614 <readJoystick+0x1a>
        return 7;
    }else if((PINB & (1<<6))==0){ // 6 up
     5fe:	1e 9b       	sbis	0x03, 6	; 3
     600:	0c c0       	rjmp	.+24     	; 0x61a <readJoystick+0x20>
        return 6;
    }else if((PINB & (1<<4))==0){ // 4 center
     602:	1c 9b       	sbis	0x03, 4	; 3
     604:	0d c0       	rjmp	.+26     	; 0x620 <readJoystick+0x26>
        return 4;
    }else if((PINE & (1<<2))==0){ // 2 left
     606:	62 9b       	sbis	0x0c, 2	; 12
     608:	0e c0       	rjmp	.+28     	; 0x626 <readJoystick+0x2c>
        return 2;
    }else if((PINE & (1<<3))==0){ // 3 right
     60a:	63 9b       	sbis	0x0c, 3	; 12
     60c:	0f c0       	rjmp	.+30     	; 0x62c <readJoystick+0x32>
        return 3;
    }else{
        return 0;
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	08 95       	ret
}


int readJoystick(void){
    if(PINB>>7==0){ // 7 down
        return 7;
     614:	87 e0       	ldi	r24, 0x07	; 7
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	08 95       	ret
    }else if((PINB & (1<<6))==0){ // 6 up
        return 6;
     61a:	86 e0       	ldi	r24, 0x06	; 6
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	08 95       	ret
    }else if((PINB & (1<<4))==0){ // 4 center
        return 4;
     620:	84 e0       	ldi	r24, 0x04	; 4
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	08 95       	ret
    }else if((PINE & (1<<2))==0){ // 2 left
        return 2;
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	08 95       	ret
    }else if((PINE & (1<<3))==0){ // 3 right
        return 3;
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	90 e0       	ldi	r25, 0x00	; 0
    }else{
        return 0;
    }
}
     630:	08 95       	ret

00000632 <updateGui>:
void unlock(guiObj* self){
    self->lock = 0;
}


void updateGui(guiObj* self){
     632:	cf 92       	push	r12
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	ec 01       	movw	r28, r24

    if(!(self->lock)){
     644:	8a 89       	ldd	r24, Y+18	; 0x12
     646:	9b 89       	ldd	r25, Y+19	; 0x13
     648:	89 2b       	or	r24, r25
     64a:	09 f0       	breq	.+2      	; 0x64e <updateGui+0x1c>
     64c:	da c0       	rjmp	.+436    	; 0x802 <updateGui+0x1d0>
    self->lock = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	9b 8b       	std	Y+19, r25	; 0x13
     654:	8a 8b       	std	Y+18, r24	; 0x12
    int value = readJoystick();
     656:	0e 94 fd 02 	call	0x5fa	; 0x5fa <readJoystick>
    if(value==7){    //down
     65a:	87 30       	cpi	r24, 0x07	; 7
     65c:	91 05       	cpc	r25, r1
     65e:	09 f0       	breq	.+2      	; 0x662 <updateGui+0x30>
     660:	52 c0       	rjmp	.+164    	; 0x706 <updateGui+0xd4>
        if(self->pos==0){
     662:	88 85       	ldd	r24, Y+8	; 0x08
     664:	99 85       	ldd	r25, Y+9	; 0x09
     666:	00 97       	sbiw	r24, 0x00	; 0
     668:	11 f5       	brne	.+68     	; 0x6ae <updateGui+0x7c>
            self->freq1--;
     66a:	cc 84       	ldd	r12, Y+12	; 0x0c
     66c:	dd 84       	ldd	r13, Y+13	; 0x0d
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	c8 1a       	sub	r12, r24
     672:	d1 08       	sbc	r13, r1
     674:	dd 86       	std	Y+13, r13	; 0x0d
     676:	cc 86       	std	Y+12, r12	; 0x0c
            ASYNC(self->pulse1 , setFreq ,self->freq1);
     678:	0c 81       	ldd	r16, Y+4	; 0x04
     67a:	1d 81       	ldd	r17, Y+5	; 0x05
     67c:	0f 2e       	mov	r0, r31
     67e:	fd e1       	ldi	r31, 0x1D	; 29
     680:	ef 2e       	mov	r14, r31
     682:	f5 e0       	ldi	r31, 0x05	; 5
     684:	ff 2e       	mov	r15, r31
     686:	f0 2d       	mov	r31, r0
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	a9 01       	movw	r20, r18
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	cb 01       	movw	r24, r22
     694:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
            printAt(self->freq1,self->pos);
     698:	48 85       	ldd	r20, Y+8	; 0x08
     69a:	59 85       	ldd	r21, Y+9	; 0x09
     69c:	6c 85       	ldd	r22, Y+12	; 0x0c
     69e:	7d 85       	ldd	r23, Y+13	; 0x0d
     6a0:	07 2e       	mov	r0, r23
     6a2:	00 0c       	add	r0, r0
     6a4:	88 0b       	sbc	r24, r24
     6a6:	99 0b       	sbc	r25, r25
     6a8:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>
     6ac:	23 c0       	rjmp	.+70     	; 0x6f4 <updateGui+0xc2>
        }else if(self->pos==4){
     6ae:	04 97       	sbiw	r24, 0x04	; 4
     6b0:	09 f5       	brne	.+66     	; 0x6f4 <updateGui+0xc2>
            self->freq2--;
     6b2:	ce 84       	ldd	r12, Y+14	; 0x0e
     6b4:	df 84       	ldd	r13, Y+15	; 0x0f
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	c8 1a       	sub	r12, r24
     6ba:	d1 08       	sbc	r13, r1
     6bc:	df 86       	std	Y+15, r13	; 0x0f
     6be:	ce 86       	std	Y+14, r12	; 0x0e
            ASYNC(self->pulse2 , setFreq ,self->freq2);
     6c0:	0e 81       	ldd	r16, Y+6	; 0x06
     6c2:	1f 81       	ldd	r17, Y+7	; 0x07
     6c4:	0f 2e       	mov	r0, r31
     6c6:	fd e1       	ldi	r31, 0x1D	; 29
     6c8:	ef 2e       	mov	r14, r31
     6ca:	f5 e0       	ldi	r31, 0x05	; 5
     6cc:	ff 2e       	mov	r15, r31
     6ce:	f0 2d       	mov	r31, r0
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	a9 01       	movw	r20, r18
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	cb 01       	movw	r24, r22
     6dc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
            printAt(self->freq2,self->pos);
     6e0:	48 85       	ldd	r20, Y+8	; 0x08
     6e2:	59 85       	ldd	r21, Y+9	; 0x09
     6e4:	6e 85       	ldd	r22, Y+14	; 0x0e
     6e6:	7f 85       	ldd	r23, Y+15	; 0x0f
     6e8:	07 2e       	mov	r0, r23
     6ea:	00 0c       	add	r0, r0
     6ec:	88 0b       	sbc	r24, r24
     6ee:	99 0b       	sbc	r25, r25
     6f0:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>
        }
        printAt(07,2);
     6f4:	42 e0       	ldi	r20, 0x02	; 2
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	67 e0       	ldi	r22, 0x07	; 7
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>
     704:	7e c0       	rjmp	.+252    	; 0x802 <updateGui+0x1d0>


    }else if(value==6){ //upp
     706:	86 30       	cpi	r24, 0x06	; 6
     708:	91 05       	cpc	r25, r1
     70a:	09 f0       	breq	.+2      	; 0x70e <updateGui+0xdc>
     70c:	52 c0       	rjmp	.+164    	; 0x7b2 <updateGui+0x180>
        if(self->pos==0){
     70e:	88 85       	ldd	r24, Y+8	; 0x08
     710:	99 85       	ldd	r25, Y+9	; 0x09
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	11 f5       	brne	.+68     	; 0x75a <updateGui+0x128>
            self->freq1++;
     716:	cc 84       	ldd	r12, Y+12	; 0x0c
     718:	dd 84       	ldd	r13, Y+13	; 0x0d
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	c8 1a       	sub	r12, r24
     71e:	d8 0a       	sbc	r13, r24
     720:	dd 86       	std	Y+13, r13	; 0x0d
     722:	cc 86       	std	Y+12, r12	; 0x0c
            ASYNC(self->pulse1 , setFreq ,self->freq1);
     724:	0c 81       	ldd	r16, Y+4	; 0x04
     726:	1d 81       	ldd	r17, Y+5	; 0x05
     728:	0f 2e       	mov	r0, r31
     72a:	fd e1       	ldi	r31, 0x1D	; 29
     72c:	ef 2e       	mov	r14, r31
     72e:	f5 e0       	ldi	r31, 0x05	; 5
     730:	ff 2e       	mov	r15, r31
     732:	f0 2d       	mov	r31, r0
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	a9 01       	movw	r20, r18
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	cb 01       	movw	r24, r22
     740:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
            printAt(self->freq1,self->pos);
     744:	48 85       	ldd	r20, Y+8	; 0x08
     746:	59 85       	ldd	r21, Y+9	; 0x09
     748:	6c 85       	ldd	r22, Y+12	; 0x0c
     74a:	7d 85       	ldd	r23, Y+13	; 0x0d
     74c:	07 2e       	mov	r0, r23
     74e:	00 0c       	add	r0, r0
     750:	88 0b       	sbc	r24, r24
     752:	99 0b       	sbc	r25, r25
     754:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>
     758:	23 c0       	rjmp	.+70     	; 0x7a0 <updateGui+0x16e>
        }else if(self->pos==4){
     75a:	04 97       	sbiw	r24, 0x04	; 4
     75c:	09 f5       	brne	.+66     	; 0x7a0 <updateGui+0x16e>
            self->freq2++;
     75e:	ce 84       	ldd	r12, Y+14	; 0x0e
     760:	df 84       	ldd	r13, Y+15	; 0x0f
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	c8 1a       	sub	r12, r24
     766:	d8 0a       	sbc	r13, r24
     768:	df 86       	std	Y+15, r13	; 0x0f
     76a:	ce 86       	std	Y+14, r12	; 0x0e
            ASYNC(self->pulse2 , setFreq ,self->freq2);
     76c:	0e 81       	ldd	r16, Y+6	; 0x06
     76e:	1f 81       	ldd	r17, Y+7	; 0x07
     770:	0f 2e       	mov	r0, r31
     772:	fd e1       	ldi	r31, 0x1D	; 29
     774:	ef 2e       	mov	r14, r31
     776:	f5 e0       	ldi	r31, 0x05	; 5
     778:	ff 2e       	mov	r15, r31
     77a:	f0 2d       	mov	r31, r0
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	a9 01       	movw	r20, r18
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	cb 01       	movw	r24, r22
     788:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
            printAt(self->freq2,self->pos);
     78c:	48 85       	ldd	r20, Y+8	; 0x08
     78e:	59 85       	ldd	r21, Y+9	; 0x09
     790:	6e 85       	ldd	r22, Y+14	; 0x0e
     792:	7f 85       	ldd	r23, Y+15	; 0x0f
     794:	07 2e       	mov	r0, r23
     796:	00 0c       	add	r0, r0
     798:	88 0b       	sbc	r24, r24
     79a:	99 0b       	sbc	r25, r25
     79c:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>
        }
        printAt(06,2);
     7a0:	42 e0       	ldi	r20, 0x02	; 2
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	66 e0       	ldi	r22, 0x06	; 6
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>
     7b0:	28 c0       	rjmp	.+80     	; 0x802 <updateGui+0x1d0>


    }else if(value==2){ //left
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	91 05       	cpc	r25, r1
     7b6:	59 f4       	brne	.+22     	; 0x7ce <updateGui+0x19c>
        self->pos = 0;
     7b8:	19 86       	std	Y+9, r1	; 0x09
     7ba:	18 86       	std	Y+8, r1	; 0x08
        printAt(02,2);
     7bc:	42 e0       	ldi	r20, 0x02	; 2
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>
     7cc:	1a c0       	rjmp	.+52     	; 0x802 <updateGui+0x1d0>
    }else if(value==3){ //right
     7ce:	83 30       	cpi	r24, 0x03	; 3
     7d0:	91 05       	cpc	r25, r1
     7d2:	69 f4       	brne	.+26     	; 0x7ee <updateGui+0x1bc>
        self->pos = 4;
     7d4:	84 e0       	ldi	r24, 0x04	; 4
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	99 87       	std	Y+9, r25	; 0x09
     7da:	88 87       	std	Y+8, r24	; 0x08
        printAt(03,2);
     7dc:	42 e0       	ldi	r20, 0x02	; 2
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	63 e0       	ldi	r22, 0x03	; 3
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>
     7ec:	0a c0       	rjmp	.+20     	; 0x802 <updateGui+0x1d0>
    }else if(value==4){ //center
     7ee:	04 97       	sbiw	r24, 0x04	; 4
     7f0:	41 f0       	breq	.+16     	; 0x802 <updateGui+0x1d0>
        
    }else{
        printAt(04,2);
     7f2:	42 e0       	ldi	r20, 0x02	; 2
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	64 e0       	ldi	r22, 0x04	; 4
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>

    }
    }
    //self->prevValue = value;
    AFTER(MSEC(400),self,unlock,NULL);
     802:	c1 2c       	mov	r12, r1
     804:	d1 2c       	mov	r13, r1
     806:	0f 2e       	mov	r0, r31
     808:	f7 e5       	ldi	r31, 0x57	; 87
     80a:	ef 2e       	mov	r14, r31
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	ff 2e       	mov	r15, r31
     810:	f0 2d       	mov	r31, r0
     812:	8e 01       	movw	r16, r28
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	a9 01       	movw	r20, r18
     81a:	64 ed       	ldi	r22, 0xD4	; 212
     81c:	70 e3       	ldi	r23, 0x30	; 48
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
    

}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	08 95       	ret

00000838 <interupts>:
    pulseGenerator pulse2 = initPulseGenerator(&writer, 6, 0);
    guiObj  gui = initGui(&pulse, &pulse2, 0);
    mainObj mainObject = {initObject(), &writer, &pulse, &pulse2, &gui};


void interupts(mainObj* self){
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
	ASYNC(self->gui, updateGui, NULL);
     844:	fc 01       	movw	r30, r24
     846:	02 85       	ldd	r16, Z+10	; 0x0a
     848:	13 85       	ldd	r17, Z+11	; 0x0b
     84a:	c1 2c       	mov	r12, r1
     84c:	d1 2c       	mov	r13, r1
     84e:	0f 2e       	mov	r0, r31
     850:	f9 e1       	ldi	r31, 0x19	; 25
     852:	ef 2e       	mov	r14, r31
     854:	f3 e0       	ldi	r31, 0x03	; 3
     856:	ff 2e       	mov	r15, r31
     858:	f0 2d       	mov	r31, r0
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	a9 01       	movw	r20, r18
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	cb 01       	movw	r24, r22
     866:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
}
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	08 95       	ret

00000878 <run>:


void run(mainObj* self){
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
    INSTALL(self, interupts, IRQ_PCINT0);
     88a:	41 e0       	ldi	r20, 0x01	; 1
     88c:	6c e1       	ldi	r22, 0x1C	; 28
     88e:	74 e0       	ldi	r23, 0x04	; 4
     890:	0e 94 2f 11 	call	0x225e	; 0x225e <install>
    INSTALL(self, interupts, IRQ_PCINT1);
     894:	42 e0       	ldi	r20, 0x02	; 2
     896:	6c e1       	ldi	r22, 0x1C	; 28
     898:	74 e0       	ldi	r23, 0x04	; 4
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 2f 11 	call	0x225e	; 0x225e <install>


    ASYNC(self->pulse1, cycle, NULL);
     8a0:	0e 81       	ldd	r16, Y+6	; 0x06
     8a2:	1f 81       	ldd	r17, Y+7	; 0x07
     8a4:	c1 2c       	mov	r12, r1
     8a6:	d1 2c       	mov	r13, r1
     8a8:	0f 2e       	mov	r0, r31
     8aa:	f7 eb       	ldi	r31, 0xB7	; 183
     8ac:	ef 2e       	mov	r14, r31
     8ae:	f4 e0       	ldi	r31, 0x04	; 4
     8b0:	ff 2e       	mov	r15, r31
     8b2:	f0 2d       	mov	r31, r0
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	a9 01       	movw	r20, r18
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	cb 01       	movw	r24, r22
     8c0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
    ASYNC(self->pulse2, cycle, NULL);
     8c4:	08 85       	ldd	r16, Y+8	; 0x08
     8c6:	19 85       	ldd	r17, Y+9	; 0x09
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	a9 01       	movw	r20, r18
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	cb 01       	movw	r24, r22
     8d4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>


}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	08 95       	ret

000008ea <main>:

int main(void)
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
    Gui__init();
     8ee:	0e 94 81 00 	call	0x102	; 0x102 <Gui__init>

    for(int i; i<1000; i++){
     8f2:	c0 e0       	ldi	r28, 0x00	; 0
     8f4:	d0 e0       	ldi	r29, 0x00	; 0
        printAt(i,2);
     8f6:	be 01       	movw	r22, r28
     8f8:	0d 2e       	mov	r0, r29
     8fa:	00 0c       	add	r0, r0
     8fc:	88 0b       	sbc	r24, r24
     8fe:	99 0b       	sbc	r25, r25
     900:	42 e0       	ldi	r20, 0x02	; 2
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	0e 94 c3 02 	call	0x586	; 0x586 <printAt>

int main(void)
{
    Gui__init();

    for(int i; i<1000; i++){
     908:	21 96       	adiw	r28, 0x01	; 1
     90a:	c8 3e       	cpi	r28, 0xE8	; 232
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	d8 07       	cpc	r29, r24
     910:	91 f7       	brne	.-28     	; 0x8f6 <main+0xc>
        printAt(i,2);
    }


    //SYNC(&pulse,cycle, 4);
    return TINYTIMBER(&mainObject, run, NULL);
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	6c e3       	ldi	r22, 0x3C	; 60
     918:	74 e0       	ldi	r23, 0x04	; 4
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 49 11 	call	0x2292	; 0x2292 <tinytimber>
	
    while (1) 
    {

    }
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <write>:
     928:	8e b1       	in	r24, 0x0e	; 14
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	06 2e       	mov	r0, r22
     92e:	02 c0       	rjmp	.+4      	; 0x934 <write+0xc>
     930:	95 95       	asr	r25
     932:	87 95       	ror	r24
     934:	0a 94       	dec	r0
     936:	e2 f7       	brpl	.-8      	; 0x930 <write+0x8>
     938:	80 ff       	sbrs	r24, 0
     93a:	0c c0       	rjmp	.+24     	; 0x954 <write+0x2c>
     93c:	2e b1       	in	r18, 0x0e	; 14
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	02 c0       	rjmp	.+4      	; 0x948 <write+0x20>
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	6a 95       	dec	r22
     94a:	e2 f7       	brpl	.-8      	; 0x944 <write+0x1c>
     94c:	80 95       	com	r24
     94e:	82 23       	and	r24, r18
     950:	8e b9       	out	0x0e, r24	; 14
     952:	0a c0       	rjmp	.+20     	; 0x968 <write+0x40>
     954:	2e b1       	in	r18, 0x0e	; 14
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	02 c0       	rjmp	.+4      	; 0x960 <write+0x38>
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	6a 95       	dec	r22
     962:	e2 f7       	brpl	.-8      	; 0x95c <write+0x34>
     964:	82 2b       	or	r24, r18
     966:	8e b9       	out	0x0e, r24	; 14
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	08 95       	ret

0000096e <cycle>:
void decFreq(pulseGenerator* self){
    self->freq--;
}
int getFreq(pulseGenerator* self){
    return self->freq;
}
     96e:	cf 92       	push	r12
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	ec 01       	movw	r28, r24
     980:	88 85       	ldd	r24, Y+8	; 0x08
     982:	99 85       	ldd	r25, Y+9	; 0x09
     984:	89 2b       	or	r24, r25
     986:	f1 f1       	breq	.+124    	; 0xa04 <cycle+0x96>
     988:	ce 80       	ldd	r12, Y+6	; 0x06
     98a:	df 80       	ldd	r13, Y+7	; 0x07
     98c:	0c 81       	ldd	r16, Y+4	; 0x04
     98e:	1d 81       	ldd	r17, Y+5	; 0x05
     990:	0f 2e       	mov	r0, r31
     992:	f4 e9       	ldi	r31, 0x94	; 148
     994:	ef 2e       	mov	r14, r31
     996:	f4 e0       	ldi	r31, 0x04	; 4
     998:	ff 2e       	mov	r15, r31
     99a:	f0 2d       	mov	r31, r0
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	a9 01       	movw	r20, r18
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	cb 01       	movw	r24, r22
     9a8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
     9ac:	68 85       	ldd	r22, Y+8	; 0x08
     9ae:	79 85       	ldd	r23, Y+9	; 0x09
     9b0:	84 ef       	ldi	r24, 0xF4	; 244
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 65 11 	call	0x22ca	; 0x22ca <__divmodhi4>
     9b8:	2d e7       	ldi	r18, 0x7D	; 125
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	db 01       	movw	r26, r22
     9be:	0e 94 9e 11 	call	0x233c	; 0x233c <__usmulhisi3>
     9c2:	8b 01       	movw	r16, r22
     9c4:	9c 01       	movw	r18, r24
     9c6:	99 23       	and	r25, r25
     9c8:	24 f4       	brge	.+8      	; 0x9d2 <cycle+0x64>
     9ca:	0d 5f       	subi	r16, 0xFD	; 253
     9cc:	1f 4f       	sbci	r17, 0xFF	; 255
     9ce:	2f 4f       	sbci	r18, 0xFF	; 255
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	c9 01       	movw	r24, r18
     9d4:	b8 01       	movw	r22, r16
     9d6:	95 95       	asr	r25
     9d8:	87 95       	ror	r24
     9da:	77 95       	ror	r23
     9dc:	67 95       	ror	r22
     9de:	95 95       	asr	r25
     9e0:	87 95       	ror	r24
     9e2:	77 95       	ror	r23
     9e4:	67 95       	ror	r22
     9e6:	c1 2c       	mov	r12, r1
     9e8:	d1 2c       	mov	r13, r1
     9ea:	0f 2e       	mov	r0, r31
     9ec:	f7 eb       	ldi	r31, 0xB7	; 183
     9ee:	ef 2e       	mov	r14, r31
     9f0:	f4 e0       	ldi	r31, 0x04	; 4
     9f2:	ff 2e       	mov	r15, r31
     9f4:	f0 2d       	mov	r31, r0
     9f6:	8e 01       	movw	r16, r28
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	a9 01       	movw	r20, r18
     9fe:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
     a02:	12 c0       	rjmp	.+36     	; 0xa28 <cycle+0xba>
     a04:	c1 2c       	mov	r12, r1
     a06:	d1 2c       	mov	r13, r1
     a08:	0f 2e       	mov	r0, r31
     a0a:	f7 eb       	ldi	r31, 0xB7	; 183
     a0c:	ef 2e       	mov	r14, r31
     a0e:	f4 e0       	ldi	r31, 0x04	; 4
     a10:	ff 2e       	mov	r15, r31
     a12:	f0 2d       	mov	r31, r0
     a14:	8e 01       	movw	r16, r28
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	a9 01       	movw	r20, r18
     a1c:	69 e0       	ldi	r22, 0x09	; 9
     a1e:	7d e3       	ldi	r23, 0x3D	; 61
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	08 95       	ret

00000a3a <setFreq>:
void setFreq(pulseGenerator* self, int freq){
    self->freq = freq;
     a3a:	fc 01       	movw	r30, r24
     a3c:	71 87       	std	Z+9, r23	; 0x09
     a3e:	60 87       	std	Z+8, r22	; 0x08
     a40:	08 95       	ret

00000a42 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	00 d0       	rcall	.+0      	; 0xa48 <initialize+0x6>
     a48:	00 d0       	rcall	.+0      	; 0xa4a <initialize+0x8>
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	83 e3       	ldi	r24, 0x33	; 51
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	23 e1       	ldi	r18, 0x13	; 19
     a54:	33 e0       	ldi	r19, 0x03	; 3
     a56:	fc 01       	movw	r30, r24
     a58:	70 97       	sbiw	r30, 0x10	; 16
     a5a:	91 83       	std	Z+1, r25	; 0x01
     a5c:	80 83       	st	Z, r24
     a5e:	40 96       	adiw	r24, 0x10	; 16
     a60:	82 17       	cp	r24, r18
     a62:	93 07       	cpc	r25, r19
     a64:	c1 f7       	brne	.-16     	; 0xa56 <initialize+0x14>
     a66:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <messages+0xe1>
     a6a:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <messages+0xe0>
     a6e:	ee e6       	ldi	r30, 0x6E	; 110
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	8b e8       	ldi	r24, 0x8B	; 139
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	80 83       	st	Z, r24
     a7a:	88 ea       	ldi	r24, 0xA8	; 168
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	96 8f       	std	Z+30, r25	; 0x1e
     a80:	85 8f       	std	Z+29, r24	; 0x1d
     a82:	a5 ec       	ldi	r26, 0xC5	; 197
     a84:	b1 e0       	ldi	r27, 0x01	; 1
     a86:	b3 af       	std	Z+59, r27	; 0x3b
     a88:	a2 af       	std	Z+58, r26	; 0x3a
     a8a:	1d 92       	st	X+, r1
     a8c:	1c 92       	st	X, r1
     a8e:	fa 83       	std	Y+2, r31	; 0x02
     a90:	e9 83       	std	Y+1, r30	; 0x01
     a92:	ef e6       	ldi	r30, 0x6F	; 111
     a94:	f3 e0       	ldi	r31, 0x03	; 3
     a96:	fc 83       	std	Y+4, r31	; 0x04
     a98:	eb 83       	std	Y+3, r30	; 0x03
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	06 96       	adiw	r24, 0x06	; 6
     aa0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <setjmp>
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	9c 81       	ldd	r25, Y+4	; 0x04
     aa8:	e9 81       	ldd	r30, Y+1	; 0x01
     aaa:	fa 81       	ldd	r31, Y+2	; 0x02
     aac:	97 8b       	std	Z+23, r25	; 0x17
     aae:	86 8b       	std	Z+22, r24	; 0x16
     ab0:	91 8f       	std	Z+25, r25	; 0x19
     ab2:	80 8f       	std	Z+24, r24	; 0x18
     ab4:	81 ec       	ldi	r24, 0xC1	; 193
     ab6:	90 e1       	ldi	r25, 0x10	; 16
     ab8:	94 8f       	std	Z+28, r25	; 0x1c
     aba:	83 8f       	std	Z+27, r24	; 0x1b
     abc:	15 82       	std	Z+5, r1	; 0x05
     abe:	14 82       	std	Z+4, r1	; 0x04
     ac0:	7d 96       	adiw	r30, 0x1d	; 29
     ac2:	fa 83       	std	Y+2, r31	; 0x02
     ac4:	e9 83       	std	Y+1, r30	; 0x01
     ac6:	eb 81       	ldd	r30, Y+3	; 0x03
     ac8:	fc 81       	ldd	r31, Y+4	; 0x04
     aca:	e0 5a       	subi	r30, 0xA0	; 160
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	fc 83       	std	Y+4, r31	; 0x04
     ad0:	eb 83       	std	Y+3, r30	; 0x03
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	82 5e       	subi	r24, 0xE2	; 226
     ad8:	91 40       	sbci	r25, 0x01	; 1
     ada:	f9 f6       	brne	.-66     	; 0xa9a <initialize+0x58>
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	f2 e0       	ldi	r31, 0x02	; 2
     ae0:	11 82       	std	Z+1, r1	; 0x01
     ae2:	10 82       	st	Z, r1
     ae4:	15 82       	std	Z+5, r1	; 0x05
     ae6:	14 82       	std	Z+4, r1	; 0x04
     ae8:	13 82       	std	Z+3, r1	; 0x03
     aea:	12 82       	std	Z+2, r1	; 0x02
     aec:	e1 e6       	ldi	r30, 0x61	; 97
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 e8       	ldi	r24, 0x80	; 128
     af2:	80 83       	st	Z, r24
     af4:	10 82       	st	Z, r1
     af6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     afa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     afe:	84 e0       	ldi	r24, 0x04	; 4
     b00:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <dispatch>:
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <dispatch+0x6>
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	9a 83       	std	Y+2, r25	; 0x02
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current>
     b2a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <current+0x1>
     b2e:	06 96       	adiw	r24, 0x06	; 6
     b30:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <setjmp>
     b34:	89 2b       	or	r24, r25
     b36:	59 f4       	brne	.+22     	; 0xb4e <dispatch+0x36>
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <current+0x1>
     b40:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current>
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	06 96       	adiw	r24, 0x06	; 6
     b4a:	0e 94 0a 12 	call	0x2414	; 0x2414 <longjmp>
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <schedule>:
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <msgQ>
     b64:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <msgQ+0x1>
     b68:	30 97       	sbiw	r30, 0x00	; 0
     b6a:	61 f1       	breq	.+88     	; 0xbc4 <schedule+0x6c>
     b6c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <threadPool>
     b70:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <threadPool+0x1>
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	31 f1       	breq	.+76     	; 0xbc4 <schedule+0x6c>
     b78:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <activeStack>
     b7c:	d0 91 37 01 	lds	r29, 0x0137	; 0x800137 <activeStack+0x1>
     b80:	aa 81       	ldd	r26, Y+2	; 0x02
     b82:	bb 81       	ldd	r27, Y+3	; 0x03
     b84:	10 97       	sbiw	r26, 0x00	; 0
     b86:	79 f0       	breq	.+30     	; 0xba6 <schedule+0x4e>
     b88:	46 81       	ldd	r20, Z+6	; 0x06
     b8a:	57 81       	ldd	r21, Z+7	; 0x07
     b8c:	60 85       	ldd	r22, Z+8	; 0x08
     b8e:	71 85       	ldd	r23, Z+9	; 0x09
     b90:	16 96       	adiw	r26, 0x06	; 6
     b92:	0d 91       	ld	r16, X+
     b94:	1d 91       	ld	r17, X+
     b96:	2d 91       	ld	r18, X+
     b98:	3c 91       	ld	r19, X
     b9a:	19 97       	sbiw	r26, 0x09	; 9
     b9c:	40 1b       	sub	r20, r16
     b9e:	51 0b       	sbc	r21, r17
     ba0:	62 0b       	sbc	r22, r18
     ba2:	73 0b       	sbc	r23, r19
     ba4:	7a f4       	brpl	.+30     	; 0xbc4 <schedule+0x6c>
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 81       	ld	r18, Z
     baa:	31 81       	ldd	r19, Z+1	; 0x01
     bac:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <threadPool+0x1>
     bb0:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <threadPool>
     bb4:	d1 83       	std	Z+1, r29	; 0x01
     bb6:	c0 83       	st	Z, r28
     bb8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <activeStack+0x1>
     bbc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <activeStack>
     bc0:	0e 94 8c 05 	call	0xb18	; 0xb18 <dispatch>
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	08 95       	ret

00000bce <__vector_1>:
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	ef 93       	push	r30
     bee:	ff 93       	push	r31
     bf0:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
     bf4:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
     bf8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bfc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c00:	c9 01       	movw	r24, r18
     c02:	03 2e       	mov	r0, r19
     c04:	00 0c       	add	r0, r0
     c06:	aa 0b       	sbc	r26, r26
     c08:	bb 0b       	sbc	r27, r27
     c0a:	dc 01       	movw	r26, r24
     c0c:	99 27       	eor	r25, r25
     c0e:	88 27       	eor	r24, r24
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	84 2b       	or	r24, r20
     c16:	95 2b       	or	r25, r21
     c18:	a6 2b       	or	r26, r22
     c1a:	b7 2b       	or	r27, r23
     c1c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     c20:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     c24:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     c28:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     c2c:	b0 9b       	sbis	0x16, 0	; 22
     c2e:	1b c0       	rjmp	.+54     	; 0xc66 <__vector_1+0x98>
     c30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c38:	c9 01       	movw	r24, r18
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	09 2e       	mov	r0, r25
     c3e:	00 0c       	add	r0, r0
     c40:	aa 0b       	sbc	r26, r26
     c42:	bb 0b       	sbc	r27, r27
     c44:	dc 01       	movw	r26, r24
     c46:	99 27       	eor	r25, r25
     c48:	88 27       	eor	r24, r24
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	84 2b       	or	r24, r20
     c50:	95 2b       	or	r25, r21
     c52:	a6 2b       	or	r26, r22
     c54:	b7 2b       	or	r27, r23
     c56:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     c5a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     c5e:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     c62:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     c66:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable>
     c6a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x1>
     c6e:	30 97       	sbiw	r30, 0x00	; 0
     c70:	39 f0       	breq	.+14     	; 0xc80 <__vector_1+0xb2>
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable>
     c7a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x1>
     c7e:	09 95       	icall
     c80:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	bf 91       	pop	r27
     c8a:	af 91       	pop	r26
     c8c:	9f 91       	pop	r25
     c8e:	8f 91       	pop	r24
     c90:	7f 91       	pop	r23
     c92:	6f 91       	pop	r22
     c94:	5f 91       	pop	r21
     c96:	4f 91       	pop	r20
     c98:	3f 91       	pop	r19
     c9a:	2f 91       	pop	r18
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <__vector_2>:
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
     ccc:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
     cd0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cd4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cd8:	c9 01       	movw	r24, r18
     cda:	03 2e       	mov	r0, r19
     cdc:	00 0c       	add	r0, r0
     cde:	aa 0b       	sbc	r26, r26
     ce0:	bb 0b       	sbc	r27, r27
     ce2:	dc 01       	movw	r26, r24
     ce4:	99 27       	eor	r25, r25
     ce6:	88 27       	eor	r24, r24
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	84 2b       	or	r24, r20
     cee:	95 2b       	or	r25, r21
     cf0:	a6 2b       	or	r26, r22
     cf2:	b7 2b       	or	r27, r23
     cf4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     cf8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     cfc:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     d00:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     d04:	b0 9b       	sbis	0x16, 0	; 22
     d06:	1b c0       	rjmp	.+54     	; 0xd3e <__vector_2+0x98>
     d08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d10:	c9 01       	movw	r24, r18
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	09 2e       	mov	r0, r25
     d16:	00 0c       	add	r0, r0
     d18:	aa 0b       	sbc	r26, r26
     d1a:	bb 0b       	sbc	r27, r27
     d1c:	dc 01       	movw	r26, r24
     d1e:	99 27       	eor	r25, r25
     d20:	88 27       	eor	r24, r24
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	84 2b       	or	r24, r20
     d28:	95 2b       	or	r25, r21
     d2a:	a6 2b       	or	r26, r22
     d2c:	b7 2b       	or	r27, r23
     d2e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     d32:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     d36:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     d3a:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     d3e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x2>
     d42:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x3>
     d46:	30 97       	sbiw	r30, 0x00	; 0
     d48:	39 f0       	breq	.+14     	; 0xd58 <__vector_2+0xb2>
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x2>
     d52:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x3>
     d56:	09 95       	icall
     d58:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	bf 91       	pop	r27
     d62:	af 91       	pop	r26
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	7f 91       	pop	r23
     d6a:	6f 91       	pop	r22
     d6c:	5f 91       	pop	r21
     d6e:	4f 91       	pop	r20
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <__vector_3>:
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
     da4:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
     da8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     db0:	c9 01       	movw	r24, r18
     db2:	03 2e       	mov	r0, r19
     db4:	00 0c       	add	r0, r0
     db6:	aa 0b       	sbc	r26, r26
     db8:	bb 0b       	sbc	r27, r27
     dba:	dc 01       	movw	r26, r24
     dbc:	99 27       	eor	r25, r25
     dbe:	88 27       	eor	r24, r24
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	84 2b       	or	r24, r20
     dc6:	95 2b       	or	r25, r21
     dc8:	a6 2b       	or	r26, r22
     dca:	b7 2b       	or	r27, r23
     dcc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     dd0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     dd4:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     dd8:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     ddc:	b0 9b       	sbis	0x16, 0	; 22
     dde:	1b c0       	rjmp	.+54     	; 0xe16 <__vector_3+0x98>
     de0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     de4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     de8:	c9 01       	movw	r24, r18
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	09 2e       	mov	r0, r25
     dee:	00 0c       	add	r0, r0
     df0:	aa 0b       	sbc	r26, r26
     df2:	bb 0b       	sbc	r27, r27
     df4:	dc 01       	movw	r26, r24
     df6:	99 27       	eor	r25, r25
     df8:	88 27       	eor	r24, r24
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	84 2b       	or	r24, r20
     e00:	95 2b       	or	r25, r21
     e02:	a6 2b       	or	r26, r22
     e04:	b7 2b       	or	r27, r23
     e06:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     e0a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     e0e:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     e12:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     e16:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x4>
     e1a:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x5>
     e1e:	30 97       	sbiw	r30, 0x00	; 0
     e20:	39 f0       	breq	.+14     	; 0xe30 <__vector_3+0xb2>
     e22:	62 e0       	ldi	r22, 0x02	; 2
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x4>
     e2a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x5>
     e2e:	09 95       	icall
     e30:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	bf 91       	pop	r27
     e3a:	af 91       	pop	r26
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	7f 91       	pop	r23
     e42:	6f 91       	pop	r22
     e44:	5f 91       	pop	r21
     e46:	4f 91       	pop	r20
     e48:	3f 91       	pop	r19
     e4a:	2f 91       	pop	r18
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_4>:
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
     e78:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
     e7c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
     e80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e88:	c9 01       	movw	r24, r18
     e8a:	03 2e       	mov	r0, r19
     e8c:	00 0c       	add	r0, r0
     e8e:	aa 0b       	sbc	r26, r26
     e90:	bb 0b       	sbc	r27, r27
     e92:	dc 01       	movw	r26, r24
     e94:	99 27       	eor	r25, r25
     e96:	88 27       	eor	r24, r24
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	84 2b       	or	r24, r20
     e9e:	95 2b       	or	r25, r21
     ea0:	a6 2b       	or	r26, r22
     ea2:	b7 2b       	or	r27, r23
     ea4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     ea8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     eac:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     eb0:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     eb4:	b0 9b       	sbis	0x16, 0	; 22
     eb6:	1b c0       	rjmp	.+54     	; 0xeee <__vector_4+0x98>
     eb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ebc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ec0:	c9 01       	movw	r24, r18
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	09 2e       	mov	r0, r25
     ec6:	00 0c       	add	r0, r0
     ec8:	aa 0b       	sbc	r26, r26
     eca:	bb 0b       	sbc	r27, r27
     ecc:	dc 01       	movw	r26, r24
     ece:	99 27       	eor	r25, r25
     ed0:	88 27       	eor	r24, r24
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	84 2b       	or	r24, r20
     ed8:	95 2b       	or	r25, r21
     eda:	a6 2b       	or	r26, r22
     edc:	b7 2b       	or	r27, r23
     ede:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     ee2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     ee6:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     eea:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     eee:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x6>
     ef2:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x7>
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	39 f0       	breq	.+14     	; 0xf08 <__vector_4+0xb2>
     efa:	63 e0       	ldi	r22, 0x03	; 3
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x6>
     f02:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x7>
     f06:	09 95       	icall
     f08:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_5>:
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
     f54:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
     f58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f60:	c9 01       	movw	r24, r18
     f62:	03 2e       	mov	r0, r19
     f64:	00 0c       	add	r0, r0
     f66:	aa 0b       	sbc	r26, r26
     f68:	bb 0b       	sbc	r27, r27
     f6a:	dc 01       	movw	r26, r24
     f6c:	99 27       	eor	r25, r25
     f6e:	88 27       	eor	r24, r24
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	84 2b       	or	r24, r20
     f76:	95 2b       	or	r25, r21
     f78:	a6 2b       	or	r26, r22
     f7a:	b7 2b       	or	r27, r23
     f7c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     f80:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     f84:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     f88:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     f8c:	b0 9b       	sbis	0x16, 0	; 22
     f8e:	1b c0       	rjmp	.+54     	; 0xfc6 <__vector_5+0x98>
     f90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f98:	c9 01       	movw	r24, r18
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	09 2e       	mov	r0, r25
     f9e:	00 0c       	add	r0, r0
     fa0:	aa 0b       	sbc	r26, r26
     fa2:	bb 0b       	sbc	r27, r27
     fa4:	dc 01       	movw	r26, r24
     fa6:	99 27       	eor	r25, r25
     fa8:	88 27       	eor	r24, r24
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	84 2b       	or	r24, r20
     fb0:	95 2b       	or	r25, r21
     fb2:	a6 2b       	or	r26, r22
     fb4:	b7 2b       	or	r27, r23
     fb6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
     fba:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
     fbe:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
     fc2:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
     fc6:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x8>
     fca:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x9>
     fce:	30 97       	sbiw	r30, 0x00	; 0
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <__vector_5+0xb2>
     fd2:	64 e0       	ldi	r22, 0x04	; 4
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x8>
     fda:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x9>
     fde:	09 95       	icall
     fe0:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	bf 91       	pop	r27
     fea:	af 91       	pop	r26
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	7f 91       	pop	r23
     ff2:	6f 91       	pop	r22
     ff4:	5f 91       	pop	r21
     ff6:	4f 91       	pop	r20
     ff8:	3f 91       	pop	r19
     ffa:	2f 91       	pop	r18
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <__vector_10>:
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	2f 93       	push	r18
    1012:	3f 93       	push	r19
    1014:	4f 93       	push	r20
    1016:	5f 93       	push	r21
    1018:	6f 93       	push	r22
    101a:	7f 93       	push	r23
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	af 93       	push	r26
    1022:	bf 93       	push	r27
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
    1028:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    102c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1030:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1034:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1038:	c9 01       	movw	r24, r18
    103a:	03 2e       	mov	r0, r19
    103c:	00 0c       	add	r0, r0
    103e:	aa 0b       	sbc	r26, r26
    1040:	bb 0b       	sbc	r27, r27
    1042:	dc 01       	movw	r26, r24
    1044:	99 27       	eor	r25, r25
    1046:	88 27       	eor	r24, r24
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	84 2b       	or	r24, r20
    104e:	95 2b       	or	r25, r21
    1050:	a6 2b       	or	r26, r22
    1052:	b7 2b       	or	r27, r23
    1054:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1058:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    105c:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1060:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1064:	b0 9b       	sbis	0x16, 0	; 22
    1066:	1b c0       	rjmp	.+54     	; 0x109e <__vector_10+0x98>
    1068:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    106c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1070:	c9 01       	movw	r24, r18
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	09 2e       	mov	r0, r25
    1076:	00 0c       	add	r0, r0
    1078:	aa 0b       	sbc	r26, r26
    107a:	bb 0b       	sbc	r27, r27
    107c:	dc 01       	movw	r26, r24
    107e:	99 27       	eor	r25, r25
    1080:	88 27       	eor	r24, r24
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	84 2b       	or	r24, r20
    1088:	95 2b       	or	r25, r21
    108a:	a6 2b       	or	r26, r22
    108c:	b7 2b       	or	r27, r23
    108e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1092:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    1096:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    109a:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    109e:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0xa>
    10a2:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0xb>
    10a6:	30 97       	sbiw	r30, 0x00	; 0
    10a8:	39 f0       	breq	.+14     	; 0x10b8 <__vector_10+0xb2>
    10aa:	65 e0       	ldi	r22, 0x05	; 5
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0xa>
    10b2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0xb>
    10b6:	09 95       	icall
    10b8:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_11>:
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
    1100:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    1104:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1108:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    110c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1110:	c9 01       	movw	r24, r18
    1112:	03 2e       	mov	r0, r19
    1114:	00 0c       	add	r0, r0
    1116:	aa 0b       	sbc	r26, r26
    1118:	bb 0b       	sbc	r27, r27
    111a:	dc 01       	movw	r26, r24
    111c:	99 27       	eor	r25, r25
    111e:	88 27       	eor	r24, r24
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	84 2b       	or	r24, r20
    1126:	95 2b       	or	r25, r21
    1128:	a6 2b       	or	r26, r22
    112a:	b7 2b       	or	r27, r23
    112c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1130:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    1134:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1138:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    113c:	b0 9b       	sbis	0x16, 0	; 22
    113e:	1b c0       	rjmp	.+54     	; 0x1176 <__vector_11+0x98>
    1140:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1144:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1148:	c9 01       	movw	r24, r18
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	09 2e       	mov	r0, r25
    114e:	00 0c       	add	r0, r0
    1150:	aa 0b       	sbc	r26, r26
    1152:	bb 0b       	sbc	r27, r27
    1154:	dc 01       	movw	r26, r24
    1156:	99 27       	eor	r25, r25
    1158:	88 27       	eor	r24, r24
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	84 2b       	or	r24, r20
    1160:	95 2b       	or	r25, r21
    1162:	a6 2b       	or	r26, r22
    1164:	b7 2b       	or	r27, r23
    1166:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    116a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    116e:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1172:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1176:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0xc>
    117a:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0xd>
    117e:	30 97       	sbiw	r30, 0x00	; 0
    1180:	39 f0       	breq	.+14     	; 0x1190 <__vector_11+0xb2>
    1182:	66 e0       	ldi	r22, 0x06	; 6
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0xc>
    118a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0xd>
    118e:	09 95       	icall
    1190:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_12>:
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
    11d8:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    11dc:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    11e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11e8:	c9 01       	movw	r24, r18
    11ea:	03 2e       	mov	r0, r19
    11ec:	00 0c       	add	r0, r0
    11ee:	aa 0b       	sbc	r26, r26
    11f0:	bb 0b       	sbc	r27, r27
    11f2:	dc 01       	movw	r26, r24
    11f4:	99 27       	eor	r25, r25
    11f6:	88 27       	eor	r24, r24
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	84 2b       	or	r24, r20
    11fe:	95 2b       	or	r25, r21
    1200:	a6 2b       	or	r26, r22
    1202:	b7 2b       	or	r27, r23
    1204:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1208:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    120c:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1210:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1214:	b0 9b       	sbis	0x16, 0	; 22
    1216:	1b c0       	rjmp	.+54     	; 0x124e <__vector_12+0x98>
    1218:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    121c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1220:	c9 01       	movw	r24, r18
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	09 2e       	mov	r0, r25
    1226:	00 0c       	add	r0, r0
    1228:	aa 0b       	sbc	r26, r26
    122a:	bb 0b       	sbc	r27, r27
    122c:	dc 01       	movw	r26, r24
    122e:	99 27       	eor	r25, r25
    1230:	88 27       	eor	r24, r24
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	84 2b       	or	r24, r20
    1238:	95 2b       	or	r25, r21
    123a:	a6 2b       	or	r26, r22
    123c:	b7 2b       	or	r27, r23
    123e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1242:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    1246:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    124a:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    124e:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0xe>
    1252:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0xf>
    1256:	30 97       	sbiw	r30, 0x00	; 0
    1258:	39 f0       	breq	.+14     	; 0x1268 <__vector_12+0xb2>
    125a:	67 e0       	ldi	r22, 0x07	; 7
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0xe>
    1262:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0xf>
    1266:	09 95       	icall
    1268:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <__vector_13>:
    128e:	1f 92       	push	r1
    1290:	0f 92       	push	r0
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
    12b0:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    12b4:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    12b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12c0:	c9 01       	movw	r24, r18
    12c2:	03 2e       	mov	r0, r19
    12c4:	00 0c       	add	r0, r0
    12c6:	aa 0b       	sbc	r26, r26
    12c8:	bb 0b       	sbc	r27, r27
    12ca:	dc 01       	movw	r26, r24
    12cc:	99 27       	eor	r25, r25
    12ce:	88 27       	eor	r24, r24
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	84 2b       	or	r24, r20
    12d6:	95 2b       	or	r25, r21
    12d8:	a6 2b       	or	r26, r22
    12da:	b7 2b       	or	r27, r23
    12dc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    12e0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    12e4:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    12e8:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    12ec:	b0 9b       	sbis	0x16, 0	; 22
    12ee:	1b c0       	rjmp	.+54     	; 0x1326 <__vector_13+0x98>
    12f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12f8:	c9 01       	movw	r24, r18
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	09 2e       	mov	r0, r25
    12fe:	00 0c       	add	r0, r0
    1300:	aa 0b       	sbc	r26, r26
    1302:	bb 0b       	sbc	r27, r27
    1304:	dc 01       	movw	r26, r24
    1306:	99 27       	eor	r25, r25
    1308:	88 27       	eor	r24, r24
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	84 2b       	or	r24, r20
    1310:	95 2b       	or	r25, r21
    1312:	a6 2b       	or	r26, r22
    1314:	b7 2b       	or	r27, r23
    1316:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    131a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    131e:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1322:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1326:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x10>
    132a:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x11>
    132e:	30 97       	sbiw	r30, 0x00	; 0
    1330:	39 f0       	breq	.+14     	; 0x1340 <__vector_13+0xb2>
    1332:	68 e0       	ldi	r22, 0x08	; 8
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x10>
    133a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x11>
    133e:	09 95       	icall
    1340:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <__vector_14>:
    1366:	1f 92       	push	r1
    1368:	0f 92       	push	r0
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	0f 92       	push	r0
    136e:	11 24       	eor	r1, r1
    1370:	2f 93       	push	r18
    1372:	3f 93       	push	r19
    1374:	4f 93       	push	r20
    1376:	5f 93       	push	r21
    1378:	6f 93       	push	r22
    137a:	7f 93       	push	r23
    137c:	8f 93       	push	r24
    137e:	9f 93       	push	r25
    1380:	af 93       	push	r26
    1382:	bf 93       	push	r27
    1384:	ef 93       	push	r30
    1386:	ff 93       	push	r31
    1388:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    138c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1390:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1394:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1398:	c9 01       	movw	r24, r18
    139a:	03 2e       	mov	r0, r19
    139c:	00 0c       	add	r0, r0
    139e:	aa 0b       	sbc	r26, r26
    13a0:	bb 0b       	sbc	r27, r27
    13a2:	dc 01       	movw	r26, r24
    13a4:	99 27       	eor	r25, r25
    13a6:	88 27       	eor	r24, r24
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	84 2b       	or	r24, r20
    13ae:	95 2b       	or	r25, r21
    13b0:	a6 2b       	or	r26, r22
    13b2:	b7 2b       	or	r27, r23
    13b4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    13b8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    13bc:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    13c0:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    13c4:	b0 9b       	sbis	0x16, 0	; 22
    13c6:	1b c0       	rjmp	.+54     	; 0x13fe <__vector_14+0x98>
    13c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13d0:	c9 01       	movw	r24, r18
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	09 2e       	mov	r0, r25
    13d6:	00 0c       	add	r0, r0
    13d8:	aa 0b       	sbc	r26, r26
    13da:	bb 0b       	sbc	r27, r27
    13dc:	dc 01       	movw	r26, r24
    13de:	99 27       	eor	r25, r25
    13e0:	88 27       	eor	r24, r24
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	84 2b       	or	r24, r20
    13e8:	95 2b       	or	r25, r21
    13ea:	a6 2b       	or	r26, r22
    13ec:	b7 2b       	or	r27, r23
    13ee:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    13f2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    13f6:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    13fa:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    13fe:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x12>
    1402:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x13>
    1406:	30 97       	sbiw	r30, 0x00	; 0
    1408:	39 f0       	breq	.+14     	; 0x1418 <__vector_14+0xb2>
    140a:	69 e0       	ldi	r22, 0x09	; 9
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x12>
    1412:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x13>
    1416:	09 95       	icall
    1418:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    141c:	ff 91       	pop	r31
    141e:	ef 91       	pop	r30
    1420:	bf 91       	pop	r27
    1422:	af 91       	pop	r26
    1424:	9f 91       	pop	r25
    1426:	8f 91       	pop	r24
    1428:	7f 91       	pop	r23
    142a:	6f 91       	pop	r22
    142c:	5f 91       	pop	r21
    142e:	4f 91       	pop	r20
    1430:	3f 91       	pop	r19
    1432:	2f 91       	pop	r18
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <__vector_15>:
    143e:	1f 92       	push	r1
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	0f 92       	push	r0
    1446:	11 24       	eor	r1, r1
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
    1460:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    1464:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1468:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    146c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1470:	c9 01       	movw	r24, r18
    1472:	03 2e       	mov	r0, r19
    1474:	00 0c       	add	r0, r0
    1476:	aa 0b       	sbc	r26, r26
    1478:	bb 0b       	sbc	r27, r27
    147a:	dc 01       	movw	r26, r24
    147c:	99 27       	eor	r25, r25
    147e:	88 27       	eor	r24, r24
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	84 2b       	or	r24, r20
    1486:	95 2b       	or	r25, r21
    1488:	a6 2b       	or	r26, r22
    148a:	b7 2b       	or	r27, r23
    148c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1490:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    1494:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1498:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    149c:	b0 9b       	sbis	0x16, 0	; 22
    149e:	1b c0       	rjmp	.+54     	; 0x14d6 <__vector_15+0x98>
    14a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14a8:	c9 01       	movw	r24, r18
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	09 2e       	mov	r0, r25
    14ae:	00 0c       	add	r0, r0
    14b0:	aa 0b       	sbc	r26, r26
    14b2:	bb 0b       	sbc	r27, r27
    14b4:	dc 01       	movw	r26, r24
    14b6:	99 27       	eor	r25, r25
    14b8:	88 27       	eor	r24, r24
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	84 2b       	or	r24, r20
    14c0:	95 2b       	or	r25, r21
    14c2:	a6 2b       	or	r26, r22
    14c4:	b7 2b       	or	r27, r23
    14c6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    14ca:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    14ce:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    14d2:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    14d6:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x14>
    14da:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x15>
    14de:	30 97       	sbiw	r30, 0x00	; 0
    14e0:	39 f0       	breq	.+14     	; 0x14f0 <__vector_15+0xb2>
    14e2:	6a e0       	ldi	r22, 0x0A	; 10
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x14>
    14ea:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x15>
    14ee:	09 95       	icall
    14f0:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <__vector_16>:
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
    1538:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    153c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1540:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1544:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1548:	c9 01       	movw	r24, r18
    154a:	03 2e       	mov	r0, r19
    154c:	00 0c       	add	r0, r0
    154e:	aa 0b       	sbc	r26, r26
    1550:	bb 0b       	sbc	r27, r27
    1552:	dc 01       	movw	r26, r24
    1554:	99 27       	eor	r25, r25
    1556:	88 27       	eor	r24, r24
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	84 2b       	or	r24, r20
    155e:	95 2b       	or	r25, r21
    1560:	a6 2b       	or	r26, r22
    1562:	b7 2b       	or	r27, r23
    1564:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1568:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    156c:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1570:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1574:	b0 9b       	sbis	0x16, 0	; 22
    1576:	1b c0       	rjmp	.+54     	; 0x15ae <__vector_16+0x98>
    1578:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    157c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1580:	c9 01       	movw	r24, r18
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	09 2e       	mov	r0, r25
    1586:	00 0c       	add	r0, r0
    1588:	aa 0b       	sbc	r26, r26
    158a:	bb 0b       	sbc	r27, r27
    158c:	dc 01       	movw	r26, r24
    158e:	99 27       	eor	r25, r25
    1590:	88 27       	eor	r24, r24
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	84 2b       	or	r24, r20
    1598:	95 2b       	or	r25, r21
    159a:	a6 2b       	or	r26, r22
    159c:	b7 2b       	or	r27, r23
    159e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    15a2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    15a6:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    15aa:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    15ae:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x16>
    15b2:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x17>
    15b6:	30 97       	sbiw	r30, 0x00	; 0
    15b8:	39 f0       	breq	.+14     	; 0x15c8 <__vector_16+0xb2>
    15ba:	6b e0       	ldi	r22, 0x0B	; 11
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x16>
    15c2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x17>
    15c6:	09 95       	icall
    15c8:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <__vector_17>:
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	2f 93       	push	r18
    15fa:	3f 93       	push	r19
    15fc:	4f 93       	push	r20
    15fe:	5f 93       	push	r21
    1600:	6f 93       	push	r22
    1602:	7f 93       	push	r23
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
    1610:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    1614:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1618:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    161c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1620:	c9 01       	movw	r24, r18
    1622:	03 2e       	mov	r0, r19
    1624:	00 0c       	add	r0, r0
    1626:	aa 0b       	sbc	r26, r26
    1628:	bb 0b       	sbc	r27, r27
    162a:	dc 01       	movw	r26, r24
    162c:	99 27       	eor	r25, r25
    162e:	88 27       	eor	r24, r24
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	84 2b       	or	r24, r20
    1636:	95 2b       	or	r25, r21
    1638:	a6 2b       	or	r26, r22
    163a:	b7 2b       	or	r27, r23
    163c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1640:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    1644:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1648:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    164c:	b0 9b       	sbis	0x16, 0	; 22
    164e:	1b c0       	rjmp	.+54     	; 0x1686 <__vector_17+0x98>
    1650:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1654:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1658:	c9 01       	movw	r24, r18
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	09 2e       	mov	r0, r25
    165e:	00 0c       	add	r0, r0
    1660:	aa 0b       	sbc	r26, r26
    1662:	bb 0b       	sbc	r27, r27
    1664:	dc 01       	movw	r26, r24
    1666:	99 27       	eor	r25, r25
    1668:	88 27       	eor	r24, r24
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	84 2b       	or	r24, r20
    1670:	95 2b       	or	r25, r21
    1672:	a6 2b       	or	r26, r22
    1674:	b7 2b       	or	r27, r23
    1676:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    167a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    167e:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1682:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1686:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x18>
    168a:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x19>
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	39 f0       	breq	.+14     	; 0x16a0 <__vector_17+0xb2>
    1692:	6c e0       	ldi	r22, 0x0C	; 12
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x18>
    169a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x19>
    169e:	09 95       	icall
    16a0:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    16a4:	ff 91       	pop	r31
    16a6:	ef 91       	pop	r30
    16a8:	bf 91       	pop	r27
    16aa:	af 91       	pop	r26
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	7f 91       	pop	r23
    16b2:	6f 91       	pop	r22
    16b4:	5f 91       	pop	r21
    16b6:	4f 91       	pop	r20
    16b8:	3f 91       	pop	r19
    16ba:	2f 91       	pop	r18
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0
    16c2:	1f 90       	pop	r1
    16c4:	18 95       	reti

000016c6 <__vector_18>:
    16c6:	1f 92       	push	r1
    16c8:	0f 92       	push	r0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	0f 92       	push	r0
    16ce:	11 24       	eor	r1, r1
    16d0:	2f 93       	push	r18
    16d2:	3f 93       	push	r19
    16d4:	4f 93       	push	r20
    16d6:	5f 93       	push	r21
    16d8:	6f 93       	push	r22
    16da:	7f 93       	push	r23
    16dc:	8f 93       	push	r24
    16de:	9f 93       	push	r25
    16e0:	af 93       	push	r26
    16e2:	bf 93       	push	r27
    16e4:	ef 93       	push	r30
    16e6:	ff 93       	push	r31
    16e8:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    16ec:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    16f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16f8:	c9 01       	movw	r24, r18
    16fa:	03 2e       	mov	r0, r19
    16fc:	00 0c       	add	r0, r0
    16fe:	aa 0b       	sbc	r26, r26
    1700:	bb 0b       	sbc	r27, r27
    1702:	dc 01       	movw	r26, r24
    1704:	99 27       	eor	r25, r25
    1706:	88 27       	eor	r24, r24
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	84 2b       	or	r24, r20
    170e:	95 2b       	or	r25, r21
    1710:	a6 2b       	or	r26, r22
    1712:	b7 2b       	or	r27, r23
    1714:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1718:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    171c:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1720:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1724:	b0 9b       	sbis	0x16, 0	; 22
    1726:	1b c0       	rjmp	.+54     	; 0x175e <__vector_18+0x98>
    1728:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    172c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1730:	c9 01       	movw	r24, r18
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	09 2e       	mov	r0, r25
    1736:	00 0c       	add	r0, r0
    1738:	aa 0b       	sbc	r26, r26
    173a:	bb 0b       	sbc	r27, r27
    173c:	dc 01       	movw	r26, r24
    173e:	99 27       	eor	r25, r25
    1740:	88 27       	eor	r24, r24
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	84 2b       	or	r24, r20
    1748:	95 2b       	or	r25, r21
    174a:	a6 2b       	or	r26, r22
    174c:	b7 2b       	or	r27, r23
    174e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1752:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    1756:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    175a:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    175e:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x1a>
    1762:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x1b>
    1766:	30 97       	sbiw	r30, 0x00	; 0
    1768:	39 f0       	breq	.+14     	; 0x1778 <__vector_18+0xb2>
    176a:	6d e0       	ldi	r22, 0x0D	; 13
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x1a>
    1772:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x1b>
    1776:	09 95       	icall
    1778:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    177c:	ff 91       	pop	r31
    177e:	ef 91       	pop	r30
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <__vector_19>:
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	2f 93       	push	r18
    17aa:	3f 93       	push	r19
    17ac:	4f 93       	push	r20
    17ae:	5f 93       	push	r21
    17b0:	6f 93       	push	r22
    17b2:	7f 93       	push	r23
    17b4:	8f 93       	push	r24
    17b6:	9f 93       	push	r25
    17b8:	af 93       	push	r26
    17ba:	bf 93       	push	r27
    17bc:	ef 93       	push	r30
    17be:	ff 93       	push	r31
    17c0:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    17c4:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    17c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17d0:	c9 01       	movw	r24, r18
    17d2:	03 2e       	mov	r0, r19
    17d4:	00 0c       	add	r0, r0
    17d6:	aa 0b       	sbc	r26, r26
    17d8:	bb 0b       	sbc	r27, r27
    17da:	dc 01       	movw	r26, r24
    17dc:	99 27       	eor	r25, r25
    17de:	88 27       	eor	r24, r24
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	84 2b       	or	r24, r20
    17e6:	95 2b       	or	r25, r21
    17e8:	a6 2b       	or	r26, r22
    17ea:	b7 2b       	or	r27, r23
    17ec:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    17f0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    17f4:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    17f8:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    17fc:	b0 9b       	sbis	0x16, 0	; 22
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <__vector_19+0x98>
    1800:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1804:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1808:	c9 01       	movw	r24, r18
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	09 2e       	mov	r0, r25
    180e:	00 0c       	add	r0, r0
    1810:	aa 0b       	sbc	r26, r26
    1812:	bb 0b       	sbc	r27, r27
    1814:	dc 01       	movw	r26, r24
    1816:	99 27       	eor	r25, r25
    1818:	88 27       	eor	r24, r24
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	84 2b       	or	r24, r20
    1820:	95 2b       	or	r25, r21
    1822:	a6 2b       	or	r26, r22
    1824:	b7 2b       	or	r27, r23
    1826:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    182a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    182e:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1832:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1836:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x1c>
    183a:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x1d>
    183e:	30 97       	sbiw	r30, 0x00	; 0
    1840:	39 f0       	breq	.+14     	; 0x1850 <__vector_19+0xb2>
    1842:	6e e0       	ldi	r22, 0x0E	; 14
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x1c>
    184a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x1d>
    184e:	09 95       	icall
    1850:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	bf 91       	pop	r27
    185a:	af 91       	pop	r26
    185c:	9f 91       	pop	r25
    185e:	8f 91       	pop	r24
    1860:	7f 91       	pop	r23
    1862:	6f 91       	pop	r22
    1864:	5f 91       	pop	r21
    1866:	4f 91       	pop	r20
    1868:	3f 91       	pop	r19
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_20>:
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	2f 93       	push	r18
    1882:	3f 93       	push	r19
    1884:	4f 93       	push	r20
    1886:	5f 93       	push	r21
    1888:	6f 93       	push	r22
    188a:	7f 93       	push	r23
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
    1898:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    189c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    18a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18a8:	c9 01       	movw	r24, r18
    18aa:	03 2e       	mov	r0, r19
    18ac:	00 0c       	add	r0, r0
    18ae:	aa 0b       	sbc	r26, r26
    18b0:	bb 0b       	sbc	r27, r27
    18b2:	dc 01       	movw	r26, r24
    18b4:	99 27       	eor	r25, r25
    18b6:	88 27       	eor	r24, r24
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	84 2b       	or	r24, r20
    18be:	95 2b       	or	r25, r21
    18c0:	a6 2b       	or	r26, r22
    18c2:	b7 2b       	or	r27, r23
    18c4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    18c8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    18cc:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    18d0:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    18d4:	b0 9b       	sbis	0x16, 0	; 22
    18d6:	1b c0       	rjmp	.+54     	; 0x190e <__vector_20+0x98>
    18d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18e0:	c9 01       	movw	r24, r18
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	09 2e       	mov	r0, r25
    18e6:	00 0c       	add	r0, r0
    18e8:	aa 0b       	sbc	r26, r26
    18ea:	bb 0b       	sbc	r27, r27
    18ec:	dc 01       	movw	r26, r24
    18ee:	99 27       	eor	r25, r25
    18f0:	88 27       	eor	r24, r24
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	84 2b       	or	r24, r20
    18f8:	95 2b       	or	r25, r21
    18fa:	a6 2b       	or	r26, r22
    18fc:	b7 2b       	or	r27, r23
    18fe:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1902:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    1906:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    190a:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    190e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x1e>
    1912:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x1f>
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	39 f0       	breq	.+14     	; 0x1928 <__vector_20+0xb2>
    191a:	6f e0       	ldi	r22, 0x0F	; 15
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x1e>
    1922:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x1f>
    1926:	09 95       	icall
    1928:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    192c:	ff 91       	pop	r31
    192e:	ef 91       	pop	r30
    1930:	bf 91       	pop	r27
    1932:	af 91       	pop	r26
    1934:	9f 91       	pop	r25
    1936:	8f 91       	pop	r24
    1938:	7f 91       	pop	r23
    193a:	6f 91       	pop	r22
    193c:	5f 91       	pop	r21
    193e:	4f 91       	pop	r20
    1940:	3f 91       	pop	r19
    1942:	2f 91       	pop	r18
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_21>:
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
    1970:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    1974:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1978:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    197c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1980:	c9 01       	movw	r24, r18
    1982:	03 2e       	mov	r0, r19
    1984:	00 0c       	add	r0, r0
    1986:	aa 0b       	sbc	r26, r26
    1988:	bb 0b       	sbc	r27, r27
    198a:	dc 01       	movw	r26, r24
    198c:	99 27       	eor	r25, r25
    198e:	88 27       	eor	r24, r24
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	84 2b       	or	r24, r20
    1996:	95 2b       	or	r25, r21
    1998:	a6 2b       	or	r26, r22
    199a:	b7 2b       	or	r27, r23
    199c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    19a0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    19a4:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    19a8:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    19ac:	b0 9b       	sbis	0x16, 0	; 22
    19ae:	1b c0       	rjmp	.+54     	; 0x19e6 <__vector_21+0x98>
    19b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19b8:	c9 01       	movw	r24, r18
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	09 2e       	mov	r0, r25
    19be:	00 0c       	add	r0, r0
    19c0:	aa 0b       	sbc	r26, r26
    19c2:	bb 0b       	sbc	r27, r27
    19c4:	dc 01       	movw	r26, r24
    19c6:	99 27       	eor	r25, r25
    19c8:	88 27       	eor	r24, r24
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	84 2b       	or	r24, r20
    19d0:	95 2b       	or	r25, r21
    19d2:	a6 2b       	or	r26, r22
    19d4:	b7 2b       	or	r27, r23
    19d6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    19da:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    19de:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    19e2:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    19e6:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x20>
    19ea:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x21>
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	39 f0       	breq	.+14     	; 0x1a00 <__vector_21+0xb2>
    19f2:	60 e1       	ldi	r22, 0x10	; 16
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x20>
    19fa:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x21>
    19fe:	09 95       	icall
    1a00:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	7f 91       	pop	r23
    1a12:	6f 91       	pop	r22
    1a14:	5f 91       	pop	r21
    1a16:	4f 91       	pop	r20
    1a18:	3f 91       	pop	r19
    1a1a:	2f 91       	pop	r18
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	0f 90       	pop	r0
    1a22:	1f 90       	pop	r1
    1a24:	18 95       	reti

00001a26 <__vector_22>:
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	4f 93       	push	r20
    1a36:	5f 93       	push	r21
    1a38:	6f 93       	push	r22
    1a3a:	7f 93       	push	r23
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	af 93       	push	r26
    1a42:	bf 93       	push	r27
    1a44:	ef 93       	push	r30
    1a46:	ff 93       	push	r31
    1a48:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    1a4c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1a50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a58:	c9 01       	movw	r24, r18
    1a5a:	03 2e       	mov	r0, r19
    1a5c:	00 0c       	add	r0, r0
    1a5e:	aa 0b       	sbc	r26, r26
    1a60:	bb 0b       	sbc	r27, r27
    1a62:	dc 01       	movw	r26, r24
    1a64:	99 27       	eor	r25, r25
    1a66:	88 27       	eor	r24, r24
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	84 2b       	or	r24, r20
    1a6e:	95 2b       	or	r25, r21
    1a70:	a6 2b       	or	r26, r22
    1a72:	b7 2b       	or	r27, r23
    1a74:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1a78:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    1a7c:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1a80:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1a84:	b0 9b       	sbis	0x16, 0	; 22
    1a86:	1b c0       	rjmp	.+54     	; 0x1abe <__vector_22+0x98>
    1a88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a90:	c9 01       	movw	r24, r18
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	09 2e       	mov	r0, r25
    1a96:	00 0c       	add	r0, r0
    1a98:	aa 0b       	sbc	r26, r26
    1a9a:	bb 0b       	sbc	r27, r27
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	99 27       	eor	r25, r25
    1aa0:	88 27       	eor	r24, r24
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	84 2b       	or	r24, r20
    1aa8:	95 2b       	or	r25, r21
    1aaa:	a6 2b       	or	r26, r22
    1aac:	b7 2b       	or	r27, r23
    1aae:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timestamp>
    1ab2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timestamp+0x1>
    1ab6:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timestamp+0x2>
    1aba:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timestamp+0x3>
    1abe:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x22>
    1ac2:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x23>
    1ac6:	30 97       	sbiw	r30, 0x00	; 0
    1ac8:	39 f0       	breq	.+14     	; 0x1ad8 <__vector_22+0xb2>
    1aca:	61 e1       	ldi	r22, 0x11	; 17
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x22>
    1ad2:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x23>
    1ad6:	09 95       	icall
    1ad8:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    1adc:	ff 91       	pop	r31
    1ade:	ef 91       	pop	r30
    1ae0:	bf 91       	pop	r27
    1ae2:	af 91       	pop	r26
    1ae4:	9f 91       	pop	r25
    1ae6:	8f 91       	pop	r24
    1ae8:	7f 91       	pop	r23
    1aea:	6f 91       	pop	r22
    1aec:	5f 91       	pop	r21
    1aee:	4f 91       	pop	r20
    1af0:	3f 91       	pop	r19
    1af2:	2f 91       	pop	r18
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	0f 90       	pop	r0
    1afa:	1f 90       	pop	r1
    1afc:	18 95       	reti

00001afe <enqueueByDeadline>:
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	7b 01       	movw	r14, r22
    1b0c:	eb 01       	movw	r28, r22
    1b0e:	a8 81       	ld	r26, Y
    1b10:	b9 81       	ldd	r27, Y+1	; 0x01
    1b12:	10 97       	sbiw	r26, 0x00	; 0
    1b14:	61 f1       	breq	.+88     	; 0x1b6e <enqueueByDeadline+0x70>
    1b16:	fc 01       	movw	r30, r24
    1b18:	06 81       	ldd	r16, Z+6	; 0x06
    1b1a:	17 81       	ldd	r17, Z+7	; 0x07
    1b1c:	20 85       	ldd	r18, Z+8	; 0x08
    1b1e:	31 85       	ldd	r19, Z+9	; 0x09
    1b20:	16 96       	adiw	r26, 0x06	; 6
    1b22:	4d 91       	ld	r20, X+
    1b24:	5d 91       	ld	r21, X+
    1b26:	6d 91       	ld	r22, X+
    1b28:	7c 91       	ld	r23, X
    1b2a:	19 97       	sbiw	r26, 0x09	; 9
    1b2c:	04 17       	cp	r16, r20
    1b2e:	15 07       	cpc	r17, r21
    1b30:	26 07       	cpc	r18, r22
    1b32:	37 07       	cpc	r19, r23
    1b34:	14 f4       	brge	.+4      	; 0x1b3a <enqueueByDeadline+0x3c>
    1b36:	1b c0       	rjmp	.+54     	; 0x1b6e <enqueueByDeadline+0x70>
    1b38:	df 01       	movw	r26, r30
    1b3a:	ed 91       	ld	r30, X+
    1b3c:	fc 91       	ld	r31, X
    1b3e:	11 97       	sbiw	r26, 0x01	; 1
    1b40:	30 97       	sbiw	r30, 0x00	; 0
    1b42:	49 f0       	breq	.+18     	; 0x1b56 <enqueueByDeadline+0x58>
    1b44:	46 81       	ldd	r20, Z+6	; 0x06
    1b46:	57 81       	ldd	r21, Z+7	; 0x07
    1b48:	60 85       	ldd	r22, Z+8	; 0x08
    1b4a:	71 85       	ldd	r23, Z+9	; 0x09
    1b4c:	04 17       	cp	r16, r20
    1b4e:	15 07       	cpc	r17, r21
    1b50:	26 07       	cpc	r18, r22
    1b52:	37 07       	cpc	r19, r23
    1b54:	8c f7       	brge	.-30     	; 0x1b38 <enqueueByDeadline+0x3a>
    1b56:	ec 01       	movw	r28, r24
    1b58:	f9 83       	std	Y+1, r31	; 0x01
    1b5a:	e8 83       	st	Y, r30
    1b5c:	10 97       	sbiw	r26, 0x00	; 0
    1b5e:	21 f4       	brne	.+8      	; 0x1b68 <enqueueByDeadline+0x6a>
    1b60:	f7 01       	movw	r30, r14
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
    1b66:	07 c0       	rjmp	.+14     	; 0x1b76 <enqueueByDeadline+0x78>
    1b68:	8d 93       	st	X+, r24
    1b6a:	9c 93       	st	X, r25
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <enqueueByDeadline+0x78>
    1b6e:	ec 01       	movw	r28, r24
    1b70:	b9 83       	std	Y+1, r27	; 0x01
    1b72:	a8 83       	st	Y, r26
    1b74:	f5 cf       	rjmp	.-22     	; 0x1b60 <enqueueByDeadline+0x62>
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	08 95       	ret

00001b84 <enqueueByBaseline>:
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	7b 01       	movw	r14, r22
    1b92:	eb 01       	movw	r28, r22
    1b94:	a8 81       	ld	r26, Y
    1b96:	b9 81       	ldd	r27, Y+1	; 0x01
    1b98:	10 97       	sbiw	r26, 0x00	; 0
    1b9a:	61 f1       	breq	.+88     	; 0x1bf4 <enqueueByBaseline+0x70>
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	02 81       	ldd	r16, Z+2	; 0x02
    1ba0:	13 81       	ldd	r17, Z+3	; 0x03
    1ba2:	24 81       	ldd	r18, Z+4	; 0x04
    1ba4:	35 81       	ldd	r19, Z+5	; 0x05
    1ba6:	12 96       	adiw	r26, 0x02	; 2
    1ba8:	4d 91       	ld	r20, X+
    1baa:	5d 91       	ld	r21, X+
    1bac:	6d 91       	ld	r22, X+
    1bae:	7c 91       	ld	r23, X
    1bb0:	15 97       	sbiw	r26, 0x05	; 5
    1bb2:	04 17       	cp	r16, r20
    1bb4:	15 07       	cpc	r17, r21
    1bb6:	26 07       	cpc	r18, r22
    1bb8:	37 07       	cpc	r19, r23
    1bba:	14 f4       	brge	.+4      	; 0x1bc0 <enqueueByBaseline+0x3c>
    1bbc:	1b c0       	rjmp	.+54     	; 0x1bf4 <enqueueByBaseline+0x70>
    1bbe:	df 01       	movw	r26, r30
    1bc0:	ed 91       	ld	r30, X+
    1bc2:	fc 91       	ld	r31, X
    1bc4:	11 97       	sbiw	r26, 0x01	; 1
    1bc6:	30 97       	sbiw	r30, 0x00	; 0
    1bc8:	49 f0       	breq	.+18     	; 0x1bdc <enqueueByBaseline+0x58>
    1bca:	42 81       	ldd	r20, Z+2	; 0x02
    1bcc:	53 81       	ldd	r21, Z+3	; 0x03
    1bce:	64 81       	ldd	r22, Z+4	; 0x04
    1bd0:	75 81       	ldd	r23, Z+5	; 0x05
    1bd2:	04 17       	cp	r16, r20
    1bd4:	15 07       	cpc	r17, r21
    1bd6:	26 07       	cpc	r18, r22
    1bd8:	37 07       	cpc	r19, r23
    1bda:	8c f7       	brge	.-30     	; 0x1bbe <enqueueByBaseline+0x3a>
    1bdc:	ec 01       	movw	r28, r24
    1bde:	f9 83       	std	Y+1, r31	; 0x01
    1be0:	e8 83       	st	Y, r30
    1be2:	10 97       	sbiw	r26, 0x00	; 0
    1be4:	21 f4       	brne	.+8      	; 0x1bee <enqueueByBaseline+0x6a>
    1be6:	f7 01       	movw	r30, r14
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <enqueueByBaseline+0x78>
    1bee:	8d 93       	st	X+, r24
    1bf0:	9c 93       	st	X, r25
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <enqueueByBaseline+0x78>
    1bf4:	ec 01       	movw	r28, r24
    1bf6:	b9 83       	std	Y+1, r27	; 0x01
    1bf8:	a8 83       	st	Y, r26
    1bfa:	f5 cf       	rjmp	.-22     	; 0x1be6 <enqueueByBaseline+0x62>
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	08 95       	ret

00001c0a <dequeue>:
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	ed 91       	ld	r30, X+
    1c0e:	fc 91       	ld	r31, X
    1c10:	11 97       	sbiw	r26, 0x01	; 1
    1c12:	30 97       	sbiw	r30, 0x00	; 0
    1c14:	59 f4       	brne	.+22     	; 0x1c2c <dequeue+0x22>
    1c16:	8f ef       	ldi	r24, 0xFF	; 255
    1c18:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1c1c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1c20:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	83 bf       	out	0x33, r24	; 51
    1c28:	88 95       	sleep
    1c2a:	fd cf       	rjmp	.-6      	; 0x1c26 <dequeue+0x1c>
    1c2c:	20 81       	ld	r18, Z
    1c2e:	31 81       	ldd	r19, Z+1	; 0x01
    1c30:	2d 93       	st	X+, r18
    1c32:	3c 93       	st	X, r19
    1c34:	cf 01       	movw	r24, r30
    1c36:	08 95       	ret

00001c38 <__vector_9>:
    1c38:	1f 92       	push	r1
    1c3a:	0f 92       	push	r0
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	0f 92       	push	r0
    1c40:	11 24       	eor	r1, r1
    1c42:	2f 93       	push	r18
    1c44:	3f 93       	push	r19
    1c46:	4f 93       	push	r20
    1c48:	5f 93       	push	r21
    1c4a:	6f 93       	push	r22
    1c4c:	7f 93       	push	r23
    1c4e:	8f 93       	push	r24
    1c50:	9f 93       	push	r25
    1c52:	ef 93       	push	r30
    1c54:	ff 93       	push	r31
    1c56:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <overflows>
    1c5a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <overflows+0x1>
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <overflows+0x1>
    1c64:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <overflows>
    1c68:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <timerQ>
    1c6c:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <timerQ+0x1>
    1c70:	30 97       	sbiw	r30, 0x00	; 0
    1c72:	01 f1       	breq	.+64     	; 0x1cb4 <__vector_9+0x7c>
    1c74:	42 81       	ldd	r20, Z+2	; 0x02
    1c76:	53 81       	ldd	r21, Z+3	; 0x03
    1c78:	64 81       	ldd	r22, Z+4	; 0x04
    1c7a:	75 81       	ldd	r23, Z+5	; 0x05
    1c7c:	86 17       	cp	r24, r22
    1c7e:	97 07       	cpc	r25, r23
    1c80:	c9 f4       	brne	.+50     	; 0x1cb4 <__vector_9+0x7c>
    1c82:	ca 01       	movw	r24, r20
    1c84:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c88:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c8c:	42 1b       	sub	r20, r18
    1c8e:	53 0b       	sbc	r21, r19
    1c90:	41 30       	cpi	r20, 0x01	; 1
    1c92:	51 05       	cpc	r21, r1
    1c94:	29 f4       	brne	.+10     	; 0x1ca0 <__vector_9+0x68>
    1c96:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c9a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ca4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ca8:	ef e6       	ldi	r30, 0x6F	; 111
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	82 60       	ori	r24, 0x02	; 2
    1cb0:	80 83       	st	Z, r24
    1cb2:	05 c0       	rjmp	.+10     	; 0x1cbe <__vector_9+0x86>
    1cb4:	ef e6       	ldi	r30, 0x6F	; 111
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8d 7f       	andi	r24, 0xFD	; 253
    1cbc:	80 83       	st	Z, r24
    1cbe:	ff 91       	pop	r31
    1cc0:	ef 91       	pop	r30
    1cc2:	9f 91       	pop	r25
    1cc4:	8f 91       	pop	r24
    1cc6:	7f 91       	pop	r23
    1cc8:	6f 91       	pop	r22
    1cca:	5f 91       	pop	r21
    1ccc:	4f 91       	pop	r20
    1cce:	3f 91       	pop	r19
    1cd0:	2f 91       	pop	r18
    1cd2:	0f 90       	pop	r0
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	0f 90       	pop	r0
    1cd8:	1f 90       	pop	r1
    1cda:	18 95       	reti

00001cdc <__vector_7>:
    1cdc:	1f 92       	push	r1
    1cde:	0f 92       	push	r0
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	0f 92       	push	r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	2f 93       	push	r18
    1cf0:	3f 93       	push	r19
    1cf2:	4f 93       	push	r20
    1cf4:	5f 93       	push	r21
    1cf6:	6f 93       	push	r22
    1cf8:	7f 93       	push	r23
    1cfa:	8f 93       	push	r24
    1cfc:	9f 93       	push	r25
    1cfe:	af 93       	push	r26
    1d00:	bf 93       	push	r27
    1d02:	ef 93       	push	r30
    1d04:	ff 93       	push	r31
    1d06:	c0 90 40 01 	lds	r12, 0x0140	; 0x800140 <overflows>
    1d0a:	d0 90 41 01 	lds	r13, 0x0141	; 0x800141 <overflows+0x1>
    1d0e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d12:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d16:	b0 99       	sbic	0x16, 0	; 22
    1d18:	0f c0       	rjmp	.+30     	; 0x1d38 <__vector_7+0x5c>
    1d1a:	0d 2c       	mov	r0, r13
    1d1c:	00 0c       	add	r0, r0
    1d1e:	ee 08       	sbc	r14, r14
    1d20:	ff 08       	sbc	r15, r15
    1d22:	d6 01       	movw	r26, r12
    1d24:	99 27       	eor	r25, r25
    1d26:	88 27       	eor	r24, r24
    1d28:	69 01       	movw	r12, r18
    1d2a:	e1 2c       	mov	r14, r1
    1d2c:	f1 2c       	mov	r15, r1
    1d2e:	c8 2a       	or	r12, r24
    1d30:	d9 2a       	or	r13, r25
    1d32:	ea 2a       	or	r14, r26
    1d34:	fb 2a       	or	r15, r27
    1d36:	15 c0       	rjmp	.+42     	; 0x1d62 <__vector_7+0x86>
    1d38:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d3c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d40:	8f ef       	ldi	r24, 0xFF	; 255
    1d42:	c8 1a       	sub	r12, r24
    1d44:	d8 0a       	sbc	r13, r24
    1d46:	0d 2c       	mov	r0, r13
    1d48:	00 0c       	add	r0, r0
    1d4a:	ee 08       	sbc	r14, r14
    1d4c:	ff 08       	sbc	r15, r15
    1d4e:	d6 01       	movw	r26, r12
    1d50:	99 27       	eor	r25, r25
    1d52:	88 27       	eor	r24, r24
    1d54:	69 01       	movw	r12, r18
    1d56:	e1 2c       	mov	r14, r1
    1d58:	f1 2c       	mov	r15, r1
    1d5a:	c8 2a       	or	r12, r24
    1d5c:	d9 2a       	or	r13, r25
    1d5e:	ea 2a       	or	r14, r26
    1d60:	fb 2a       	or	r15, r27
    1d62:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <timerQ>
    1d66:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <timerQ+0x1>
    1d6a:	30 97       	sbiw	r30, 0x00	; 0
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <__vector_7+0x94>
    1d6e:	42 c0       	rjmp	.+132    	; 0x1df4 <__vector_7+0x118>
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	a4 81       	ldd	r26, Z+4	; 0x04
    1d76:	b5 81       	ldd	r27, Z+5	; 0x05
    1d78:	8c 19       	sub	r24, r12
    1d7a:	9d 09       	sbc	r25, r13
    1d7c:	ae 09       	sbc	r26, r14
    1d7e:	bf 09       	sbc	r27, r15
    1d80:	18 16       	cp	r1, r24
    1d82:	19 06       	cpc	r1, r25
    1d84:	1a 06       	cpc	r1, r26
    1d86:	1b 06       	cpc	r1, r27
    1d88:	ec f1       	brlt	.+122    	; 0x1e04 <__vector_7+0x128>
    1d8a:	86 e4       	ldi	r24, 0x46	; 70
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <dequeue>
    1d92:	68 e4       	ldi	r22, 0x48	; 72
    1d94:	71 e0       	ldi	r23, 0x01	; 1
    1d96:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <enqueueByDeadline>
    1d9a:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <timerQ>
    1d9e:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <timerQ+0x1>
    1da2:	30 97       	sbiw	r30, 0x00	; 0
    1da4:	39 f1       	breq	.+78     	; 0x1df4 <__vector_7+0x118>
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	a4 81       	ldd	r26, Z+4	; 0x04
    1dac:	b5 81       	ldd	r27, Z+5	; 0x05
    1dae:	8c 19       	sub	r24, r12
    1db0:	9d 09       	sbc	r25, r13
    1db2:	ae 09       	sbc	r26, r14
    1db4:	bf 09       	sbc	r27, r15
    1db6:	18 16       	cp	r1, r24
    1db8:	19 06       	cpc	r1, r25
    1dba:	1a 06       	cpc	r1, r26
    1dbc:	1b 06       	cpc	r1, r27
    1dbe:	2c f7       	brge	.-54     	; 0x1d8a <__vector_7+0xae>
    1dc0:	21 c0       	rjmp	.+66     	; 0x1e04 <__vector_7+0x128>
    1dc2:	9c 01       	movw	r18, r24
    1dc4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dc8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dcc:	84 1b       	sub	r24, r20
    1dce:	95 0b       	sbc	r25, r21
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	31 f4       	brne	.+12     	; 0x1de0 <__vector_7+0x104>
    1dd4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dd8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ddc:	2f 5f       	subi	r18, 0xFF	; 255
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1de4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1de8:	ef e6       	ldi	r30, 0x6F	; 111
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	82 60       	ori	r24, 0x02	; 2
    1df0:	80 83       	st	Z, r24
    1df2:	05 c0       	rjmp	.+10     	; 0x1dfe <__vector_7+0x122>
    1df4:	ef e6       	ldi	r30, 0x6F	; 111
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8d 7f       	andi	r24, 0xFD	; 253
    1dfc:	80 83       	st	Z, r24
    1dfe:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    1e02:	0c c0       	rjmp	.+24     	; 0x1e1c <__vector_7+0x140>
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	a4 81       	ldd	r26, Z+4	; 0x04
    1e0a:	b5 81       	ldd	r27, Z+5	; 0x05
    1e0c:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    1e10:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1e14:	2a 17       	cp	r18, r26
    1e16:	3b 07       	cpc	r19, r27
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <__vector_7+0x118>
    1e1a:	d3 cf       	rjmp	.-90     	; 0x1dc2 <__vector_7+0xe6>
    1e1c:	ff 91       	pop	r31
    1e1e:	ef 91       	pop	r30
    1e20:	bf 91       	pop	r27
    1e22:	af 91       	pop	r26
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	7f 91       	pop	r23
    1e2a:	6f 91       	pop	r22
    1e2c:	5f 91       	pop	r21
    1e2e:	4f 91       	pop	r20
    1e30:	3f 91       	pop	r19
    1e32:	2f 91       	pop	r18
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0f 90       	pop	r0
    1e42:	1f 90       	pop	r1
    1e44:	18 95       	reti

00001e46 <async>:
    1e46:	3f 92       	push	r3
    1e48:	4f 92       	push	r4
    1e4a:	5f 92       	push	r5
    1e4c:	6f 92       	push	r6
    1e4e:	7f 92       	push	r7
    1e50:	8f 92       	push	r8
    1e52:	9f 92       	push	r9
    1e54:	af 92       	push	r10
    1e56:	bf 92       	push	r11
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	2b 01       	movw	r4, r22
    1e6a:	3c 01       	movw	r6, r24
    1e6c:	49 01       	movw	r8, r18
    1e6e:	5a 01       	movw	r10, r20
    1e70:	8f b7       	in	r24, 0x3f	; 63
    1e72:	80 78       	andi	r24, 0x80	; 128
    1e74:	38 2e       	mov	r3, r24
    1e76:	f8 94       	cli
    1e78:	8a e3       	ldi	r24, 0x3A	; 58
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <dequeue>
    1e80:	ec 01       	movw	r28, r24
    1e82:	1b 87       	std	Y+11, r17	; 0x0b
    1e84:	0a 87       	std	Y+10, r16	; 0x0a
    1e86:	fd 86       	std	Y+13, r15	; 0x0d
    1e88:	ec 86       	std	Y+12, r14	; 0x0c
    1e8a:	df 86       	std	Y+15, r13	; 0x0f
    1e8c:	ce 86       	std	Y+14, r12	; 0x0e
    1e8e:	33 20       	and	r3, r3
    1e90:	61 f0       	breq	.+24     	; 0x1eaa <async+0x64>
    1e92:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    1e96:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    1e9a:	02 80       	ldd	r0, Z+2	; 0x02
    1e9c:	f3 81       	ldd	r31, Z+3	; 0x03
    1e9e:	e0 2d       	mov	r30, r0
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	a4 81       	ldd	r26, Z+4	; 0x04
    1ea6:	b5 81       	ldd	r27, Z+5	; 0x05
    1ea8:	08 c0       	rjmp	.+16     	; 0x1eba <async+0x74>
    1eaa:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <timestamp>
    1eae:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <timestamp+0x1>
    1eb2:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <timestamp+0x2>
    1eb6:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <timestamp+0x3>
    1eba:	48 0e       	add	r4, r24
    1ebc:	59 1e       	adc	r5, r25
    1ebe:	6a 1e       	adc	r6, r26
    1ec0:	7b 1e       	adc	r7, r27
    1ec2:	4a 82       	std	Y+2, r4	; 0x02
    1ec4:	5b 82       	std	Y+3, r5	; 0x03
    1ec6:	6c 82       	std	Y+4, r6	; 0x04
    1ec8:	7d 82       	std	Y+5, r7	; 0x05
    1eca:	18 14       	cp	r1, r8
    1ecc:	19 04       	cpc	r1, r9
    1ece:	1a 04       	cpc	r1, r10
    1ed0:	1b 04       	cpc	r1, r11
    1ed2:	44 f0       	brlt	.+16     	; 0x1ee4 <async+0x9e>
    1ed4:	0f 2e       	mov	r0, r31
    1ed6:	88 24       	eor	r8, r8
    1ed8:	8a 94       	dec	r8
    1eda:	98 2c       	mov	r9, r8
    1edc:	a8 2c       	mov	r10, r8
    1ede:	ff e7       	ldi	r31, 0x7F	; 127
    1ee0:	bf 2e       	mov	r11, r31
    1ee2:	f0 2d       	mov	r31, r0
    1ee4:	84 0c       	add	r8, r4
    1ee6:	95 1c       	adc	r9, r5
    1ee8:	a6 1c       	adc	r10, r6
    1eea:	b7 1c       	adc	r11, r7
    1eec:	8e 82       	std	Y+6, r8	; 0x06
    1eee:	9f 82       	std	Y+7, r9	; 0x07
    1ef0:	a8 86       	std	Y+8, r10	; 0x08
    1ef2:	b9 86       	std	Y+9, r11	; 0x09
    1ef4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <overflows>
    1ef8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <overflows+0x1>
    1efc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f00:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f04:	b0 99       	sbic	0x16, 0	; 22
    1f06:	0e c0       	rjmp	.+28     	; 0x1f24 <async+0xde>
    1f08:	09 2e       	mov	r0, r25
    1f0a:	00 0c       	add	r0, r0
    1f0c:	aa 0b       	sbc	r26, r26
    1f0e:	bb 0b       	sbc	r27, r27
    1f10:	dc 01       	movw	r26, r24
    1f12:	99 27       	eor	r25, r25
    1f14:	88 27       	eor	r24, r24
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	84 2b       	or	r24, r20
    1f1c:	95 2b       	or	r25, r21
    1f1e:	a6 2b       	or	r26, r22
    1f20:	b7 2b       	or	r27, r23
    1f22:	13 c0       	rjmp	.+38     	; 0x1f4a <async+0x104>
    1f24:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f28:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	09 2e       	mov	r0, r25
    1f30:	00 0c       	add	r0, r0
    1f32:	aa 0b       	sbc	r26, r26
    1f34:	bb 0b       	sbc	r27, r27
    1f36:	dc 01       	movw	r26, r24
    1f38:	99 27       	eor	r25, r25
    1f3a:	88 27       	eor	r24, r24
    1f3c:	a9 01       	movw	r20, r18
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	70 e0       	ldi	r23, 0x00	; 0
    1f42:	84 2b       	or	r24, r20
    1f44:	95 2b       	or	r25, r21
    1f46:	a6 2b       	or	r26, r22
    1f48:	b7 2b       	or	r27, r23
    1f4a:	48 1a       	sub	r4, r24
    1f4c:	59 0a       	sbc	r5, r25
    1f4e:	6a 0a       	sbc	r6, r26
    1f50:	7b 0a       	sbc	r7, r27
    1f52:	14 14       	cp	r1, r4
    1f54:	15 04       	cpc	r1, r5
    1f56:	16 04       	cpc	r1, r6
    1f58:	17 04       	cpc	r1, r7
    1f5a:	ac f5       	brge	.+106    	; 0x1fc6 <async+0x180>
    1f5c:	66 e4       	ldi	r22, 0x46	; 70
    1f5e:	71 e0       	ldi	r23, 0x01	; 1
    1f60:	ce 01       	movw	r24, r28
    1f62:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <enqueueByBaseline>
    1f66:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <timerQ>
    1f6a:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <timerQ+0x1>
    1f6e:	30 97       	sbiw	r30, 0x00	; 0
    1f70:	21 f1       	breq	.+72     	; 0x1fba <async+0x174>
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	a4 81       	ldd	r26, Z+4	; 0x04
    1f78:	b5 81       	ldd	r27, Z+5	; 0x05
    1f7a:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <overflows>
    1f7e:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <overflows+0x1>
    1f82:	2a 17       	cp	r18, r26
    1f84:	3b 07       	cpc	r19, r27
    1f86:	c9 f4       	brne	.+50     	; 0x1fba <async+0x174>
    1f88:	9c 01       	movw	r18, r24
    1f8a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f8e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f92:	84 1b       	sub	r24, r20
    1f94:	95 0b       	sbc	r25, r21
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	31 f4       	brne	.+12     	; 0x1fa6 <async+0x160>
    1f9a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f9e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fa2:	2f 5f       	subi	r18, 0xFF	; 255
    1fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1faa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1fae:	ef e6       	ldi	r30, 0x6F	; 111
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	82 60       	ori	r24, 0x02	; 2
    1fb6:	80 83       	st	Z, r24
    1fb8:	41 c0       	rjmp	.+130    	; 0x203c <async+0x1f6>
    1fba:	ef e6       	ldi	r30, 0x6F	; 111
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8d 7f       	andi	r24, 0xFD	; 253
    1fc2:	80 83       	st	Z, r24
    1fc4:	3b c0       	rjmp	.+118    	; 0x203c <async+0x1f6>
    1fc6:	68 e4       	ldi	r22, 0x48	; 72
    1fc8:	71 e0       	ldi	r23, 0x01	; 1
    1fca:	ce 01       	movw	r24, r28
    1fcc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <enqueueByDeadline>
    1fd0:	33 20       	and	r3, r3
    1fd2:	b9 f1       	breq	.+110    	; 0x2042 <async+0x1fc>
    1fd4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <threadPool>
    1fd8:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <threadPool+0x1>
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	81 f1       	breq	.+96     	; 0x2040 <async+0x1fa>
    1fe0:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <activeStack>
    1fe4:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <activeStack+0x1>
    1fe8:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <msgQ>
    1fec:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <msgQ+0x1>
    1ff0:	02 81       	ldd	r16, Z+2	; 0x02
    1ff2:	13 81       	ldd	r17, Z+3	; 0x03
    1ff4:	d9 01       	movw	r26, r18
    1ff6:	16 96       	adiw	r26, 0x06	; 6
    1ff8:	4d 91       	ld	r20, X+
    1ffa:	5d 91       	ld	r21, X+
    1ffc:	6d 91       	ld	r22, X+
    1ffe:	7c 91       	ld	r23, X
    2000:	19 97       	sbiw	r26, 0x09	; 9
    2002:	d8 01       	movw	r26, r16
    2004:	16 96       	adiw	r26, 0x06	; 6
    2006:	0d 91       	ld	r16, X+
    2008:	1d 91       	ld	r17, X+
    200a:	2d 91       	ld	r18, X+
    200c:	3c 91       	ld	r19, X
    200e:	19 97       	sbiw	r26, 0x09	; 9
    2010:	40 1b       	sub	r20, r16
    2012:	51 0b       	sbc	r21, r17
    2014:	62 0b       	sbc	r22, r18
    2016:	73 0b       	sbc	r23, r19
    2018:	9a f4       	brpl	.+38     	; 0x2040 <async+0x1fa>
    201a:	dc 01       	movw	r26, r24
    201c:	2d 91       	ld	r18, X+
    201e:	3c 91       	ld	r19, X
    2020:	11 97       	sbiw	r26, 0x01	; 1
    2022:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <threadPool+0x1>
    2026:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <threadPool>
    202a:	ed 93       	st	X+, r30
    202c:	fc 93       	st	X, r31
    202e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <activeStack+0x1>
    2032:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <activeStack>
    2036:	0e 94 8c 05 	call	0xb18	; 0xb18 <dispatch>
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <async+0x1fa>
    203c:	33 20       	and	r3, r3
    203e:	09 f0       	breq	.+2      	; 0x2042 <async+0x1fc>
    2040:	78 94       	sei
    2042:	ce 01       	movw	r24, r28
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	df 90       	pop	r13
    2052:	cf 90       	pop	r12
    2054:	bf 90       	pop	r11
    2056:	af 90       	pop	r10
    2058:	9f 90       	pop	r9
    205a:	8f 90       	pop	r8
    205c:	7f 90       	pop	r7
    205e:	6f 90       	pop	r6
    2060:	5f 90       	pop	r5
    2062:	4f 90       	pop	r4
    2064:	3f 90       	pop	r3
    2066:	08 95       	ret

00002068 <sync>:
    2068:	cf 92       	push	r12
    206a:	df 92       	push	r13
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	ec 01       	movw	r28, r24
    207a:	7b 01       	movw	r14, r22
    207c:	6a 01       	movw	r12, r20
    207e:	1f b7       	in	r17, 0x3f	; 63
    2080:	10 78       	andi	r17, 0x80	; 128
    2082:	f8 94       	cli
    2084:	a8 81       	ld	r26, Y
    2086:	b9 81       	ldd	r27, Y+1	; 0x01
    2088:	10 97       	sbiw	r26, 0x00	; 0
    208a:	61 f1       	breq	.+88     	; 0x20e4 <sync+0x7c>
    208c:	14 96       	adiw	r26, 0x04	; 4
    208e:	ed 91       	ld	r30, X+
    2090:	fc 91       	ld	r31, X
    2092:	15 97       	sbiw	r26, 0x05	; 5
    2094:	30 97       	sbiw	r30, 0x00	; 0
    2096:	41 f0       	breq	.+16     	; 0x20a8 <sync+0x40>
    2098:	a0 81       	ld	r26, Z
    209a:	b1 81       	ldd	r27, Z+1	; 0x01
    209c:	14 96       	adiw	r26, 0x04	; 4
    209e:	ed 91       	ld	r30, X+
    20a0:	fc 91       	ld	r31, X
    20a2:	15 97       	sbiw	r26, 0x05	; 5
    20a4:	30 97       	sbiw	r30, 0x00	; 0
    20a6:	c1 f7       	brne	.-16     	; 0x2098 <sync+0x30>
    20a8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <current>
    20ac:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <current+0x1>
    20b0:	2a 17       	cp	r18, r26
    20b2:	3b 07       	cpc	r19, r27
    20b4:	21 f0       	breq	.+8      	; 0x20be <sync+0x56>
    20b6:	11 23       	and	r17, r17
    20b8:	09 f4       	brne	.+2      	; 0x20bc <sync+0x54>
    20ba:	3d c0       	rjmp	.+122    	; 0x2136 <sync+0xce>
    20bc:	07 c0       	rjmp	.+14     	; 0x20cc <sync+0x64>
    20be:	11 23       	and	r17, r17
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <sync+0x5c>
    20c2:	3c c0       	rjmp	.+120    	; 0x213c <sync+0xd4>
    20c4:	78 94       	sei
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	9f ef       	ldi	r25, 0xFF	; 255
    20ca:	52 c0       	rjmp	.+164    	; 0x2170 <sync+0x108>
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	9b 81       	ldd	r25, Y+3	; 0x03
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	d1 f1       	breq	.+116    	; 0x2148 <sync+0xe0>
    20d4:	fc 01       	movw	r30, r24
    20d6:	15 82       	std	Z+5, r1	; 0x05
    20d8:	14 82       	std	Z+4, r1	; 0x04
    20da:	36 c0       	rjmp	.+108    	; 0x2148 <sync+0xe0>
    20dc:	78 94       	sei
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	46 c0       	rjmp	.+140    	; 0x2170 <sync+0x108>
    20e4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current>
    20e8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <current+0x1>
    20ec:	99 83       	std	Y+1, r25	; 0x01
    20ee:	88 83       	st	Y, r24
    20f0:	11 23       	and	r17, r17
    20f2:	29 f0       	breq	.+10     	; 0x20fe <sync+0x96>
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	09 f0       	breq	.+2      	; 0x20fe <sync+0x96>
    20fc:	78 94       	sei
    20fe:	b6 01       	movw	r22, r12
    2100:	ce 01       	movw	r24, r28
    2102:	f7 01       	movw	r30, r14
    2104:	09 95       	icall
    2106:	f8 2e       	mov	r15, r24
    2108:	09 2f       	mov	r16, r25
    210a:	8f b7       	in	r24, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	19 82       	std	Y+1, r1	; 0x01
    2110:	18 82       	st	Y, r1
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	82 30       	cpi	r24, 0x02	; 2
    2118:	91 05       	cpc	r25, r1
    211a:	38 f0       	brcs	.+14     	; 0x212a <sync+0xc2>
    211c:	1b 82       	std	Y+3, r1	; 0x03
    211e:	1a 82       	std	Y+2, r1	; 0x02
    2120:	fc 01       	movw	r30, r24
    2122:	15 82       	std	Z+5, r1	; 0x05
    2124:	14 82       	std	Z+4, r1	; 0x04
    2126:	0e 94 8c 05 	call	0xb18	; 0xb18 <dispatch>
    212a:	11 23       	and	r17, r17
    212c:	51 f0       	breq	.+20     	; 0x2142 <sync+0xda>
    212e:	78 94       	sei
    2130:	8f 2d       	mov	r24, r15
    2132:	90 2f       	mov	r25, r16
    2134:	1d c0       	rjmp	.+58     	; 0x2170 <sync+0x108>
    2136:	8f ef       	ldi	r24, 0xFF	; 255
    2138:	9f ef       	ldi	r25, 0xFF	; 255
    213a:	1a c0       	rjmp	.+52     	; 0x2170 <sync+0x108>
    213c:	8f ef       	ldi	r24, 0xFF	; 255
    213e:	9f ef       	ldi	r25, 0xFF	; 255
    2140:	17 c0       	rjmp	.+46     	; 0x2170 <sync+0x108>
    2142:	8f 2d       	mov	r24, r15
    2144:	90 2f       	mov	r25, r16
    2146:	14 c0       	rjmp	.+40     	; 0x2170 <sync+0x108>
    2148:	3b 83       	std	Y+3, r19	; 0x03
    214a:	2a 83       	std	Y+2, r18	; 0x02
    214c:	f9 01       	movw	r30, r18
    214e:	d5 83       	std	Z+5, r29	; 0x05
    2150:	c4 83       	std	Z+4, r28	; 0x04
    2152:	cd 01       	movw	r24, r26
    2154:	0e 94 8c 05 	call	0xb18	; 0xb18 <dispatch>
    2158:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    215c:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    2160:	82 81       	ldd	r24, Z+2	; 0x02
    2162:	93 81       	ldd	r25, Z+3	; 0x03
    2164:	89 2b       	or	r24, r25
    2166:	09 f4       	brne	.+2      	; 0x216a <sync+0x102>
    2168:	b9 cf       	rjmp	.-142    	; 0x20dc <sync+0x74>
    216a:	f9 83       	std	Y+1, r31	; 0x01
    216c:	e8 83       	st	Y, r30
    216e:	c2 cf       	rjmp	.-124    	; 0x20f4 <sync+0x8c>
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	cf 90       	pop	r12
    2180:	08 95       	ret

00002182 <run>:
    2182:	00 91 34 01 	lds	r16, 0x0134	; 0x800134 <current>
    2186:	10 91 35 01 	lds	r17, 0x0135	; 0x800135 <current+0x1>
    218a:	88 e4       	ldi	r24, 0x48	; 72
    218c:	91 e0       	ldi	r25, 0x01	; 1
    218e:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <dequeue>
    2192:	ec 01       	movw	r28, r24
    2194:	d8 01       	movw	r26, r16
    2196:	13 96       	adiw	r26, 0x03	; 3
    2198:	9c 93       	st	X, r25
    219a:	8e 93       	st	-X, r24
    219c:	12 97       	sbiw	r26, 0x02	; 2
    219e:	78 94       	sei
    21a0:	4e 85       	ldd	r20, Y+14	; 0x0e
    21a2:	5f 85       	ldd	r21, Y+15	; 0x0f
    21a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    21a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    21a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ac:	0e 94 34 10 	call	0x2068	; 0x2068 <sync>
    21b0:	8f b7       	in	r24, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msgPool>
    21b8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msgPool+0x1>
    21bc:	99 83       	std	Y+1, r25	; 0x01
    21be:	88 83       	st	Y, r24
    21c0:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <msgPool+0x1>
    21c4:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <msgPool>
    21c8:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <activeStack>
    21cc:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <activeStack+0x1>
    21d0:	00 81       	ld	r16, Z
    21d2:	11 81       	ldd	r17, Z+1	; 0x01
    21d4:	e8 01       	movw	r28, r16
    21d6:	2a 81       	ldd	r18, Y+2	; 0x02
    21d8:	3b 81       	ldd	r19, Y+3	; 0x03
    21da:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <msgQ>
    21de:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <msgQ+0x1>
    21e2:	10 97       	sbiw	r26, 0x00	; 0
    21e4:	c1 f0       	breq	.+48     	; 0x2216 <run+0x94>
    21e6:	21 15       	cp	r18, r1
    21e8:	31 05       	cpc	r19, r1
    21ea:	59 f2       	breq	.-106    	; 0x2182 <run>
    21ec:	16 96       	adiw	r26, 0x06	; 6
    21ee:	8d 91       	ld	r24, X+
    21f0:	9d 91       	ld	r25, X+
    21f2:	0d 90       	ld	r0, X+
    21f4:	bc 91       	ld	r27, X
    21f6:	a0 2d       	mov	r26, r0
    21f8:	e9 01       	movw	r28, r18
    21fa:	4e 81       	ldd	r20, Y+6	; 0x06
    21fc:	5f 81       	ldd	r21, Y+7	; 0x07
    21fe:	68 85       	ldd	r22, Y+8	; 0x08
    2200:	79 85       	ldd	r23, Y+9	; 0x09
    2202:	84 1b       	sub	r24, r20
    2204:	95 0b       	sbc	r25, r21
    2206:	a6 0b       	sbc	r26, r22
    2208:	b7 0b       	sbc	r27, r23
    220a:	18 16       	cp	r1, r24
    220c:	19 06       	cpc	r1, r25
    220e:	1a 06       	cpc	r1, r26
    2210:	1b 06       	cpc	r1, r27
    2212:	0c f0       	brlt	.+2      	; 0x2216 <run+0x94>
    2214:	b6 cf       	rjmp	.-148    	; 0x2182 <run>
    2216:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <activeStack+0x1>
    221a:	00 93 36 01 	sts	0x0136, r16	; 0x800136 <activeStack>
    221e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <threadPool>
    2222:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <threadPool+0x1>
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	f0 93 39 01 	sts	0x0139, r31	; 0x800139 <threadPool+0x1>
    222e:	e0 93 38 01 	sts	0x0138, r30	; 0x800138 <threadPool>
    2232:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <activeStack>
    2236:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <activeStack+0x1>
    223a:	14 96       	adiw	r26, 0x04	; 4
    223c:	ed 91       	ld	r30, X+
    223e:	fc 91       	ld	r31, X
    2240:	15 97       	sbiw	r26, 0x05	; 5
    2242:	30 97       	sbiw	r30, 0x00	; 0
    2244:	41 f0       	breq	.+16     	; 0x2256 <run+0xd4>
    2246:	a0 81       	ld	r26, Z
    2248:	b1 81       	ldd	r27, Z+1	; 0x01
    224a:	14 96       	adiw	r26, 0x04	; 4
    224c:	ed 91       	ld	r30, X+
    224e:	fc 91       	ld	r31, X
    2250:	15 97       	sbiw	r26, 0x05	; 5
    2252:	30 97       	sbiw	r30, 0x00	; 0
    2254:	c1 f7       	brne	.-16     	; 0x2246 <run+0xc4>
    2256:	cd 01       	movw	r24, r26
    2258:	0e 94 8c 05 	call	0xb18	; 0xb18 <dispatch>
    225c:	92 cf       	rjmp	.-220    	; 0x2182 <run>

0000225e <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    225e:	42 31       	cpi	r20, 0x12	; 18
    2260:	b8 f4       	brcc	.+46     	; 0x2290 <install+0x32>
        char status;
        DISABLE(status);
    2262:	2f b7       	in	r18, 0x3f	; 63
    2264:	f8 94       	cli
        otable[i] = obj;
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	44 0f       	add	r20, r20
    226a:	55 1f       	adc	r21, r21
    226c:	fa 01       	movw	r30, r20
    226e:	e6 5b       	subi	r30, 0xB6	; 182
    2270:	fe 4f       	sbci	r31, 0xFE	; 254
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
        mtable[i] = m;
    2276:	fa 01       	movw	r30, r20
    2278:	ee 51       	subi	r30, 0x1E	; 30
    227a:	fe 4f       	sbci	r31, 0xFE	; 254
    227c:	71 83       	std	Z+1, r23	; 0x01
    227e:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	fc 01       	movw	r30, r24
    2286:	53 83       	std	Z+3, r21	; 0x03
    2288:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    228a:	22 23       	and	r18, r18
    228c:	0c f4       	brge	.+2      	; 0x2290 <install+0x32>
    228e:	78 94       	sei
    2290:	08 95       	ret

00002292 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2292:	8c 01       	movw	r16, r24
    2294:	7b 01       	movw	r14, r22
    2296:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2298:	8f b7       	in	r24, 0x3f	; 63
    229a:	f8 94       	cli
    initialize();
    229c:	0e 94 21 05 	call	0xa42	; 0xa42 <initialize>
    ENABLE(1);
    22a0:	78 94       	sei
    if (m != NULL)
    22a2:	e1 14       	cp	r14, r1
    22a4:	f1 04       	cpc	r15, r1
    22a6:	41 f0       	breq	.+16     	; 0x22b8 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	a9 01       	movw	r20, r18
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	cb 01       	movw	r24, r22
    22b4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
    DISABLE(status);
    22b8:	8f b7       	in	r24, 0x3f	; 63
    22ba:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    22bc:	0e 94 ac 05 	call	0xb58	; 0xb58 <schedule>
    ENABLE(1);
    22c0:	78 94       	sei
    while (1) {
        SLEEP();
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	83 bf       	out	0x33, r24	; 51
    22c6:	88 95       	sleep
    22c8:	fd cf       	rjmp	.-6      	; 0x22c4 <tinytimber+0x32>

000022ca <__divmodhi4>:
    22ca:	97 fb       	bst	r25, 7
    22cc:	07 2e       	mov	r0, r23
    22ce:	16 f4       	brtc	.+4      	; 0x22d4 <__divmodhi4+0xa>
    22d0:	00 94       	com	r0
    22d2:	07 d0       	rcall	.+14     	; 0x22e2 <__divmodhi4_neg1>
    22d4:	77 fd       	sbrc	r23, 7
    22d6:	09 d0       	rcall	.+18     	; 0x22ea <__divmodhi4_neg2>
    22d8:	0e 94 a5 11 	call	0x234a	; 0x234a <__udivmodhi4>
    22dc:	07 fc       	sbrc	r0, 7
    22de:	05 d0       	rcall	.+10     	; 0x22ea <__divmodhi4_neg2>
    22e0:	3e f4       	brtc	.+14     	; 0x22f0 <__divmodhi4_exit>

000022e2 <__divmodhi4_neg1>:
    22e2:	90 95       	com	r25
    22e4:	81 95       	neg	r24
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	08 95       	ret

000022ea <__divmodhi4_neg2>:
    22ea:	70 95       	com	r23
    22ec:	61 95       	neg	r22
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255

000022f0 <__divmodhi4_exit>:
    22f0:	08 95       	ret

000022f2 <__divmodsi4>:
    22f2:	05 2e       	mov	r0, r21
    22f4:	97 fb       	bst	r25, 7
    22f6:	1e f4       	brtc	.+6      	; 0x22fe <__divmodsi4+0xc>
    22f8:	00 94       	com	r0
    22fa:	0e 94 90 11 	call	0x2320	; 0x2320 <__negsi2>
    22fe:	57 fd       	sbrc	r21, 7
    2300:	07 d0       	rcall	.+14     	; 0x2310 <__divmodsi4_neg2>
    2302:	0e 94 b9 11 	call	0x2372	; 0x2372 <__udivmodsi4>
    2306:	07 fc       	sbrc	r0, 7
    2308:	03 d0       	rcall	.+6      	; 0x2310 <__divmodsi4_neg2>
    230a:	4e f4       	brtc	.+18     	; 0x231e <__divmodsi4_exit>
    230c:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__negsi2>

00002310 <__divmodsi4_neg2>:
    2310:	50 95       	com	r21
    2312:	40 95       	com	r20
    2314:	30 95       	com	r19
    2316:	21 95       	neg	r18
    2318:	3f 4f       	sbci	r19, 0xFF	; 255
    231a:	4f 4f       	sbci	r20, 0xFF	; 255
    231c:	5f 4f       	sbci	r21, 0xFF	; 255

0000231e <__divmodsi4_exit>:
    231e:	08 95       	ret

00002320 <__negsi2>:
    2320:	90 95       	com	r25
    2322:	80 95       	com	r24
    2324:	70 95       	com	r23
    2326:	61 95       	neg	r22
    2328:	7f 4f       	sbci	r23, 0xFF	; 255
    232a:	8f 4f       	sbci	r24, 0xFF	; 255
    232c:	9f 4f       	sbci	r25, 0xFF	; 255
    232e:	08 95       	ret

00002330 <__tablejump2__>:
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	05 90       	lpm	r0, Z+
    2336:	f4 91       	lpm	r31, Z
    2338:	e0 2d       	mov	r30, r0
    233a:	09 94       	ijmp

0000233c <__usmulhisi3>:
    233c:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__umulhisi3>

00002340 <__usmulhisi3_tail>:
    2340:	b7 ff       	sbrs	r27, 7
    2342:	08 95       	ret
    2344:	82 1b       	sub	r24, r18
    2346:	93 0b       	sbc	r25, r19
    2348:	08 95       	ret

0000234a <__udivmodhi4>:
    234a:	aa 1b       	sub	r26, r26
    234c:	bb 1b       	sub	r27, r27
    234e:	51 e1       	ldi	r21, 0x11	; 17
    2350:	07 c0       	rjmp	.+14     	; 0x2360 <__udivmodhi4_ep>

00002352 <__udivmodhi4_loop>:
    2352:	aa 1f       	adc	r26, r26
    2354:	bb 1f       	adc	r27, r27
    2356:	a6 17       	cp	r26, r22
    2358:	b7 07       	cpc	r27, r23
    235a:	10 f0       	brcs	.+4      	; 0x2360 <__udivmodhi4_ep>
    235c:	a6 1b       	sub	r26, r22
    235e:	b7 0b       	sbc	r27, r23

00002360 <__udivmodhi4_ep>:
    2360:	88 1f       	adc	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	5a 95       	dec	r21
    2366:	a9 f7       	brne	.-22     	; 0x2352 <__udivmodhi4_loop>
    2368:	80 95       	com	r24
    236a:	90 95       	com	r25
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	08 95       	ret

00002372 <__udivmodsi4>:
    2372:	a1 e2       	ldi	r26, 0x21	; 33
    2374:	1a 2e       	mov	r1, r26
    2376:	aa 1b       	sub	r26, r26
    2378:	bb 1b       	sub	r27, r27
    237a:	fd 01       	movw	r30, r26
    237c:	0d c0       	rjmp	.+26     	; 0x2398 <__udivmodsi4_ep>

0000237e <__udivmodsi4_loop>:
    237e:	aa 1f       	adc	r26, r26
    2380:	bb 1f       	adc	r27, r27
    2382:	ee 1f       	adc	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	a2 17       	cp	r26, r18
    2388:	b3 07       	cpc	r27, r19
    238a:	e4 07       	cpc	r30, r20
    238c:	f5 07       	cpc	r31, r21
    238e:	20 f0       	brcs	.+8      	; 0x2398 <__udivmodsi4_ep>
    2390:	a2 1b       	sub	r26, r18
    2392:	b3 0b       	sbc	r27, r19
    2394:	e4 0b       	sbc	r30, r20
    2396:	f5 0b       	sbc	r31, r21

00002398 <__udivmodsi4_ep>:
    2398:	66 1f       	adc	r22, r22
    239a:	77 1f       	adc	r23, r23
    239c:	88 1f       	adc	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	1a 94       	dec	r1
    23a2:	69 f7       	brne	.-38     	; 0x237e <__udivmodsi4_loop>
    23a4:	60 95       	com	r22
    23a6:	70 95       	com	r23
    23a8:	80 95       	com	r24
    23aa:	90 95       	com	r25
    23ac:	9b 01       	movw	r18, r22
    23ae:	ac 01       	movw	r20, r24
    23b0:	bd 01       	movw	r22, r26
    23b2:	cf 01       	movw	r24, r30
    23b4:	08 95       	ret

000023b6 <__umulhisi3>:
    23b6:	a2 9f       	mul	r26, r18
    23b8:	b0 01       	movw	r22, r0
    23ba:	b3 9f       	mul	r27, r19
    23bc:	c0 01       	movw	r24, r0
    23be:	a3 9f       	mul	r26, r19
    23c0:	70 0d       	add	r23, r0
    23c2:	81 1d       	adc	r24, r1
    23c4:	11 24       	eor	r1, r1
    23c6:	91 1d       	adc	r25, r1
    23c8:	b2 9f       	mul	r27, r18
    23ca:	70 0d       	add	r23, r0
    23cc:	81 1d       	adc	r24, r1
    23ce:	11 24       	eor	r1, r1
    23d0:	91 1d       	adc	r25, r1
    23d2:	08 95       	ret

000023d4 <setjmp>:
    23d4:	dc 01       	movw	r26, r24
    23d6:	2d 92       	st	X+, r2
    23d8:	3d 92       	st	X+, r3
    23da:	4d 92       	st	X+, r4
    23dc:	5d 92       	st	X+, r5
    23de:	6d 92       	st	X+, r6
    23e0:	7d 92       	st	X+, r7
    23e2:	8d 92       	st	X+, r8
    23e4:	9d 92       	st	X+, r9
    23e6:	ad 92       	st	X+, r10
    23e8:	bd 92       	st	X+, r11
    23ea:	cd 92       	st	X+, r12
    23ec:	dd 92       	st	X+, r13
    23ee:	ed 92       	st	X+, r14
    23f0:	fd 92       	st	X+, r15
    23f2:	0d 93       	st	X+, r16
    23f4:	1d 93       	st	X+, r17
    23f6:	cd 93       	st	X+, r28
    23f8:	dd 93       	st	X+, r29
    23fa:	ff 91       	pop	r31
    23fc:	ef 91       	pop	r30
    23fe:	8d b7       	in	r24, 0x3d	; 61
    2400:	8d 93       	st	X+, r24
    2402:	8e b7       	in	r24, 0x3e	; 62
    2404:	8d 93       	st	X+, r24
    2406:	8f b7       	in	r24, 0x3f	; 63
    2408:	8d 93       	st	X+, r24
    240a:	ed 93       	st	X+, r30
    240c:	fd 93       	st	X+, r31
    240e:	88 27       	eor	r24, r24
    2410:	99 27       	eor	r25, r25
    2412:	09 94       	ijmp

00002414 <longjmp>:
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	81 1d       	adc	r24, r1
    241e:	2d 90       	ld	r2, X+
    2420:	3d 90       	ld	r3, X+
    2422:	4d 90       	ld	r4, X+
    2424:	5d 90       	ld	r5, X+
    2426:	6d 90       	ld	r6, X+
    2428:	7d 90       	ld	r7, X+
    242a:	8d 90       	ld	r8, X+
    242c:	9d 90       	ld	r9, X+
    242e:	ad 90       	ld	r10, X+
    2430:	bd 90       	ld	r11, X+
    2432:	cd 90       	ld	r12, X+
    2434:	dd 90       	ld	r13, X+
    2436:	ed 90       	ld	r14, X+
    2438:	fd 90       	ld	r15, X+
    243a:	0d 91       	ld	r16, X+
    243c:	1d 91       	ld	r17, X+
    243e:	cd 91       	ld	r28, X+
    2440:	dd 91       	ld	r29, X+
    2442:	ed 91       	ld	r30, X+
    2444:	fd 91       	ld	r31, X+
    2446:	0d 90       	ld	r0, X+
    2448:	f8 94       	cli
    244a:	fe bf       	out	0x3e, r31	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	ed bf       	out	0x3d, r30	; 61
    2450:	ed 91       	ld	r30, X+
    2452:	fd 91       	ld	r31, X+
    2454:	09 94       	ijmp

00002456 <_exit>:
    2456:	f8 94       	cli

00002458 <__stop_program>:
    2458:	ff cf       	rjmp	.-2      	; 0x2458 <__stop_program>
