
labb4_d0003e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000024c0  00002554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800108  00800108  0000255c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000258c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a19  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000105d  00000000  00000000  0000522d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001568  00000000  00000000  0000628a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bf8  00000000  00000000  000077f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000934  00000000  00000000  000083ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002884  00000000  00000000  00008d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000b5a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__vector_1>
       8:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__vector_2>
       c:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__vector_3>
      10:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__vector_4>
      14:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_9>
      28:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_10>
      2c:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__vector_11>
      30:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__vector_12>
      34:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__vector_13>
      38:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_14>
      3c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_15>
      40:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__vector_16>
      44:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__vector_17>
      48:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_18>
      4c:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__vector_19>
      50:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_20>
      54:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__vector_21>
      58:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_22>
      5c:	a8 00       	.word	0x00a8	; ????
      5e:	8a 00       	.word	0x008a	; ????
      60:	8d 00       	.word	0x008d	; ????
      62:	90 00       	.word	0x0090	; ????
      64:	93 00       	.word	0x0093	; ????
      66:	96 00       	.word	0x0096	; ????
      68:	99 00       	.word	0x0099	; ????
      6a:	9c 00       	.word	0x009c	; ????
      6c:	9f 00       	.word	0x009f	; ????
      6e:	a2 00       	.word	0x00a2	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 ec       	ldi	r30, 0xC0	; 192
      84:	f4 e2       	ldi	r31, 0x24	; 36
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 30       	cpi	r26, 0x08	; 8
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a8 e0       	ldi	r26, 0x08	; 8
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 35       	cpi	r26, 0x5B	; 91
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 67 04 	call	0x8ce	; 0x8ce <main>
      a6:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:

 }


void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b6:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      b8:	87 eb       	ldi	r24, 0xB7	; 183
      ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c4:	8f e0       	ldi	r24, 0x0F	; 15
      c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d0:	08 95       	ret

000000d2 <button_init>:
void button_init(void){


    
    // initialize button
    PORTB |= ((1 << 7)| (1 << 6 ) | (1 << 4));  // 7 down, 6 up, 4 center down 
      d2:	85 b1       	in	r24, 0x05	; 5
      d4:	80 6d       	ori	r24, 0xD0	; 208
      d6:	85 b9       	out	0x05, r24	; 5
	PORTE |= ( (1 << 2) | ( 1 << 3));           // 2 left, 3 right
      d8:	8e b1       	in	r24, 0x0e	; 14
      da:	8c 60       	ori	r24, 0x0C	; 12
      dc:	8e b9       	out	0x0e, r24	; 14


	// enable interupts for joystick
    EIMSK |= (1 << PCIE1) | (1 << PCIE0); //  PCIE1 enables PCINT15..8 interupts // PCIE0 enables PCINT7..0 interupts
      de:	8d b3       	in	r24, 0x1d	; 29
      e0:	80 6c       	ori	r24, 0xC0	; 192
      e2:	8d bb       	out	0x1d, r24	; 29
	//EIMSK |= (1 << PCINT15);

	PCMSK1 |= (1 << PCINT15)|(1 << PCINT14)|(1 << PCINT12); //enables those pins
      e4:	ec e6       	ldi	r30, 0x6C	; 108
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 6d       	ori	r24, 0xD0	; 208
      ec:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3)|(1 << PCINT2);
      ee:	eb e6       	ldi	r30, 0x6B	; 107
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	8c 60       	ori	r24, 0x0C	; 12
      f6:	80 83       	st	Z, r24
      f8:	08 95       	ret

000000fa <Gui__init>:




void Gui__init() {
    LCD_Init();
      fa:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
    button_init();
      fe:	0e 94 69 00 	call	0xd2	; 0xd2 <button_init>
     102:	08 95       	ret

00000104 <getValueArray>:


}

int getValueArray(int i){
    switch (i)
     104:	8a 30       	cpi	r24, 0x0A	; 10
     106:	91 05       	cpc	r25, r1
     108:	00 f5       	brcc	.+64     	; 0x14a <getValueArray+0x46>
     10a:	fc 01       	movw	r30, r24
     10c:	e2 5d       	subi	r30, 0xD2	; 210
     10e:	ff 4f       	sbci	r31, 0xFF	; 255
     110:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
     114:	80 e8       	ldi	r24, 0x80	; 128
     116:	90 e2       	ldi	r25, 0x20	; 32
     118:	08 95       	ret
    
    case 2:
        return TwoValue;
     11a:	81 e1       	ldi	r24, 0x11	; 17
     11c:	9e e1       	ldi	r25, 0x1E	; 30
     11e:	08 95       	ret

    case 3:
        return ThreeValue;
     120:	81 e1       	ldi	r24, 0x11	; 17
     122:	9b e1       	ldi	r25, 0x1B	; 27
     124:	08 95       	ret
    
    case 4:
        return FourValue;
     126:	80 e5       	ldi	r24, 0x50	; 80
     128:	9b e0       	ldi	r25, 0x0B	; 11
     12a:	08 95       	ret

    case 5:
        return FiveValue;
     12c:	81 e4       	ldi	r24, 0x41	; 65
     12e:	9b e1       	ldi	r25, 0x1B	; 27
     130:	08 95       	ret
    
    case 6:
        return SixValue;
     132:	81 e4       	ldi	r24, 0x41	; 65
     134:	9f e1       	ldi	r25, 0x1F	; 31
     136:	08 95       	ret
    
    case 7:
        return SevenValue;
     138:	81 e1       	ldi	r24, 0x11	; 17
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	08 95       	ret
        
    case 8:
        return EightValue;
     13e:	81 e5       	ldi	r24, 0x51	; 81
     140:	9f e1       	ldi	r25, 0x1F	; 31
     142:	08 95       	ret
    
    case 9:
        return NineValue;
     144:	81 e5       	ldi	r24, 0x51	; 81
     146:	9b e0       	ldi	r25, 0x0B	; 11
     148:	08 95       	ret
    
    default: // 10
        return BlankValue;
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	08 95       	ret

int getValueArray(int i){
    switch (i)
    {
    case 0:
        return ZeroValue;
     150:	81 e5       	ldi	r24, 0x51	; 81
     152:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     154:	08 95       	ret

00000156 <writeChar>:

void writeChar(char ch, int pos) {
     156:	ef 92       	push	r14
     158:	ff 92       	push	r15
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	00 d0       	rcall	.+0      	; 0x162 <writeChar+0xc>
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
	

	volatile int i = 0;
     166:	1a 82       	std	Y+2, r1	; 0x02
     168:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     16a:	66 30       	cpi	r22, 0x06	; 6
     16c:	71 05       	cpc	r23, r1
     16e:	08 f0       	brcs	.+2      	; 0x172 <writeChar+0x1c>
     170:	fe c1       	rjmp	.+1020   	; 0x56e <__stack+0x6f>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     172:	90 ed       	ldi	r25, 0xD0	; 208
     174:	98 0f       	add	r25, r24
     176:	9a 30       	cpi	r25, 0x0A	; 10
     178:	28 f0       	brcs	.+10     	; 0x184 <writeChar+0x2e>
		i=10;
     17a:	8a e0       	ldi	r24, 0x0A	; 10
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	04 c0       	rjmp	.+8      	; 0x18c <writeChar+0x36>
	}else{
        i = ch - 48;
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	c0 97       	sbiw	r24, 0x30	; 48
     188:	9a 83       	std	Y+2, r25	; 0x02
     18a:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     18c:	61 15       	cp	r22, r1
     18e:	71 05       	cpc	r23, r1
     190:	09 f0       	breq	.+2      	; 0x194 <writeChar+0x3e>
     192:	4e c0       	rjmp	.+156    	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     194:	0f 2e       	mov	r0, r31
     196:	fc ee       	ldi	r31, 0xEC	; 236
     198:	ef 2e       	mov	r14, r31
     19a:	f1 2c       	mov	r15, r1
     19c:	f0 2d       	mov	r31, r0
     19e:	f7 01       	movw	r30, r14
     1a0:	10 81       	ld	r17, Z
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	9a 81       	ldd	r25, Y+2	; 0x02
     1a6:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     1aa:	10 7f       	andi	r17, 0xF0	; 240
     1ac:	8f 70       	andi	r24, 0x0F	; 15
     1ae:	81 2b       	or	r24, r17
     1b0:	f7 01       	movw	r30, r14
     1b2:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f1 ef       	ldi	r31, 0xF1	; 241
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f1 2c       	mov	r15, r1
     1bc:	f0 2d       	mov	r31, r0
     1be:	f7 01       	movw	r30, r14
     1c0:	10 81       	ld	r17, Z
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     1ca:	80 7f       	andi	r24, 0xF0	; 240
     1cc:	99 27       	eor	r25, r25
     1ce:	95 95       	asr	r25
     1d0:	87 95       	ror	r24
     1d2:	95 95       	asr	r25
     1d4:	87 95       	ror	r24
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	95 95       	asr	r25
     1dc:	87 95       	ror	r24
     1de:	10 7f       	andi	r17, 0xF0	; 240
     1e0:	81 2b       	or	r24, r17
     1e2:	f7 01       	movw	r30, r14
     1e4:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1e6:	0f 2e       	mov	r0, r31
     1e8:	f6 ef       	ldi	r31, 0xF6	; 246
     1ea:	ef 2e       	mov	r14, r31
     1ec:	f1 2c       	mov	r15, r1
     1ee:	f0 2d       	mov	r31, r0
     1f0:	f7 01       	movw	r30, r14
     1f2:	10 81       	ld	r17, Z
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	9a 81       	ldd	r25, Y+2	; 0x02
     1f8:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     1fc:	88 27       	eor	r24, r24
     1fe:	9f 70       	andi	r25, 0x0F	; 15
     200:	10 7f       	andi	r17, 0xF0	; 240
     202:	19 2b       	or	r17, r25
     204:	f7 01       	movw	r30, r14
     206:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     208:	0f 2e       	mov	r0, r31
     20a:	fb ef       	ldi	r31, 0xFB	; 251
     20c:	ef 2e       	mov	r14, r31
     20e:	f1 2c       	mov	r15, r1
     210:	f0 2d       	mov	r31, r0
     212:	f7 01       	movw	r30, r14
     214:	10 81       	ld	r17, Z
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	9a 81       	ldd	r25, Y+2	; 0x02
     21a:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     21e:	10 7f       	andi	r17, 0xF0	; 240
     220:	95 95       	asr	r25
     222:	95 95       	asr	r25
     224:	95 95       	asr	r25
     226:	95 95       	asr	r25
     228:	91 2b       	or	r25, r17
     22a:	f7 01       	movw	r30, r14
     22c:	90 83       	st	Z, r25
     22e:	9f c1       	rjmp	.+830    	; 0x56e <__stack+0x6f>
		
	} else if(pos==1){
     230:	61 30       	cpi	r22, 0x01	; 1
     232:	71 05       	cpc	r23, r1
     234:	09 f0       	breq	.+2      	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
     236:	50 c0       	rjmp	.+160    	; 0x2d8 <__EEPROM_REGION_LENGTH__+0xd8>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     238:	0f 2e       	mov	r0, r31
     23a:	fc ee       	ldi	r31, 0xEC	; 236
     23c:	ef 2e       	mov	r14, r31
     23e:	f1 2c       	mov	r15, r1
     240:	f0 2d       	mov	r31, r0
     242:	f7 01       	movw	r30, r14
     244:	10 81       	ld	r17, Z
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     24e:	1f 70       	andi	r17, 0x0F	; 15
     250:	82 95       	swap	r24
     252:	92 95       	swap	r25
     254:	90 7f       	andi	r25, 0xF0	; 240
     256:	98 27       	eor	r25, r24
     258:	80 7f       	andi	r24, 0xF0	; 240
     25a:	98 27       	eor	r25, r24
     25c:	81 2b       	or	r24, r17
     25e:	f7 01       	movw	r30, r14
     260:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     262:	0f 2e       	mov	r0, r31
     264:	f1 ef       	ldi	r31, 0xF1	; 241
     266:	ef 2e       	mov	r14, r31
     268:	f1 2c       	mov	r15, r1
     26a:	f0 2d       	mov	r31, r0
     26c:	f7 01       	movw	r30, r14
     26e:	10 81       	ld	r17, Z
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	9a 81       	ldd	r25, Y+2	; 0x02
     274:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     278:	1f 70       	andi	r17, 0x0F	; 15
     27a:	80 7f       	andi	r24, 0xF0	; 240
     27c:	81 2b       	or	r24, r17
     27e:	f7 01       	movw	r30, r14
     280:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     282:	0f 2e       	mov	r0, r31
     284:	f6 ef       	ldi	r31, 0xF6	; 246
     286:	ef 2e       	mov	r14, r31
     288:	f1 2c       	mov	r15, r1
     28a:	f0 2d       	mov	r31, r0
     28c:	f7 01       	movw	r30, r14
     28e:	10 81       	ld	r17, Z
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     298:	88 27       	eor	r24, r24
     29a:	9f 70       	andi	r25, 0x0F	; 15
     29c:	95 95       	asr	r25
     29e:	87 95       	ror	r24
     2a0:	95 95       	asr	r25
     2a2:	87 95       	ror	r24
     2a4:	95 95       	asr	r25
     2a6:	87 95       	ror	r24
     2a8:	95 95       	asr	r25
     2aa:	87 95       	ror	r24
     2ac:	1f 70       	andi	r17, 0x0F	; 15
     2ae:	81 2b       	or	r24, r17
     2b0:	f7 01       	movw	r30, r14
     2b2:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     2b4:	0f 2e       	mov	r0, r31
     2b6:	fb ef       	ldi	r31, 0xFB	; 251
     2b8:	ef 2e       	mov	r14, r31
     2ba:	f1 2c       	mov	r15, r1
     2bc:	f0 2d       	mov	r31, r0
     2be:	f7 01       	movw	r30, r14
     2c0:	10 81       	ld	r17, Z
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	9a 81       	ldd	r25, Y+2	; 0x02
     2c6:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     2ca:	88 27       	eor	r24, r24
     2cc:	90 7f       	andi	r25, 0xF0	; 240
     2ce:	1f 70       	andi	r17, 0x0F	; 15
     2d0:	19 2b       	or	r17, r25
     2d2:	f7 01       	movw	r30, r14
     2d4:	10 83       	st	Z, r17
     2d6:	4b c1       	rjmp	.+662    	; 0x56e <__stack+0x6f>
	} else if(pos==2){
     2d8:	62 30       	cpi	r22, 0x02	; 2
     2da:	71 05       	cpc	r23, r1
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <__EEPROM_REGION_LENGTH__+0xe0>
     2de:	4e c0       	rjmp	.+156    	; 0x37c <__EEPROM_REGION_LENGTH__+0x17c>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2e0:	0f 2e       	mov	r0, r31
     2e2:	fd ee       	ldi	r31, 0xED	; 237
     2e4:	ef 2e       	mov	r14, r31
     2e6:	f1 2c       	mov	r15, r1
     2e8:	f0 2d       	mov	r31, r0
     2ea:	f7 01       	movw	r30, r14
     2ec:	10 81       	ld	r17, Z
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	9a 81       	ldd	r25, Y+2	; 0x02
     2f2:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     2f6:	10 7f       	andi	r17, 0xF0	; 240
     2f8:	8f 70       	andi	r24, 0x0F	; 15
     2fa:	81 2b       	or	r24, r17
     2fc:	f7 01       	movw	r30, r14
     2fe:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     300:	0f 2e       	mov	r0, r31
     302:	f2 ef       	ldi	r31, 0xF2	; 242
     304:	ef 2e       	mov	r14, r31
     306:	f1 2c       	mov	r15, r1
     308:	f0 2d       	mov	r31, r0
     30a:	f7 01       	movw	r30, r14
     30c:	10 81       	ld	r17, Z
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     316:	80 7f       	andi	r24, 0xF0	; 240
     318:	99 27       	eor	r25, r25
     31a:	95 95       	asr	r25
     31c:	87 95       	ror	r24
     31e:	95 95       	asr	r25
     320:	87 95       	ror	r24
     322:	95 95       	asr	r25
     324:	87 95       	ror	r24
     326:	95 95       	asr	r25
     328:	87 95       	ror	r24
     32a:	10 7f       	andi	r17, 0xF0	; 240
     32c:	81 2b       	or	r24, r17
     32e:	f7 01       	movw	r30, r14
     330:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     332:	0f 2e       	mov	r0, r31
     334:	f7 ef       	ldi	r31, 0xF7	; 247
     336:	ef 2e       	mov	r14, r31
     338:	f1 2c       	mov	r15, r1
     33a:	f0 2d       	mov	r31, r0
     33c:	f7 01       	movw	r30, r14
     33e:	10 81       	ld	r17, Z
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	9a 81       	ldd	r25, Y+2	; 0x02
     344:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     348:	88 27       	eor	r24, r24
     34a:	9f 70       	andi	r25, 0x0F	; 15
     34c:	10 7f       	andi	r17, 0xF0	; 240
     34e:	19 2b       	or	r17, r25
     350:	f7 01       	movw	r30, r14
     352:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     354:	0f 2e       	mov	r0, r31
     356:	fc ef       	ldi	r31, 0xFC	; 252
     358:	ef 2e       	mov	r14, r31
     35a:	f1 2c       	mov	r15, r1
     35c:	f0 2d       	mov	r31, r0
     35e:	f7 01       	movw	r30, r14
     360:	10 81       	ld	r17, Z
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     36a:	10 7f       	andi	r17, 0xF0	; 240
     36c:	95 95       	asr	r25
     36e:	95 95       	asr	r25
     370:	95 95       	asr	r25
     372:	95 95       	asr	r25
     374:	91 2b       	or	r25, r17
     376:	f7 01       	movw	r30, r14
     378:	90 83       	st	Z, r25
     37a:	f9 c0       	rjmp	.+498    	; 0x56e <__stack+0x6f>
		
	} else if(pos==3){
     37c:	63 30       	cpi	r22, 0x03	; 3
     37e:	71 05       	cpc	r23, r1
     380:	09 f0       	breq	.+2      	; 0x384 <__EEPROM_REGION_LENGTH__+0x184>
     382:	50 c0       	rjmp	.+160    	; 0x424 <__DATA_REGION_LENGTH__+0x24>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     384:	0f 2e       	mov	r0, r31
     386:	fd ee       	ldi	r31, 0xED	; 237
     388:	ef 2e       	mov	r14, r31
     38a:	f1 2c       	mov	r15, r1
     38c:	f0 2d       	mov	r31, r0
     38e:	f7 01       	movw	r30, r14
     390:	10 81       	ld	r17, Z
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     39a:	1f 70       	andi	r17, 0x0F	; 15
     39c:	82 95       	swap	r24
     39e:	92 95       	swap	r25
     3a0:	90 7f       	andi	r25, 0xF0	; 240
     3a2:	98 27       	eor	r25, r24
     3a4:	80 7f       	andi	r24, 0xF0	; 240
     3a6:	98 27       	eor	r25, r24
     3a8:	81 2b       	or	r24, r17
     3aa:	f7 01       	movw	r30, r14
     3ac:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     3ae:	0f 2e       	mov	r0, r31
     3b0:	f2 ef       	ldi	r31, 0xF2	; 242
     3b2:	ef 2e       	mov	r14, r31
     3b4:	f1 2c       	mov	r15, r1
     3b6:	f0 2d       	mov	r31, r0
     3b8:	f7 01       	movw	r30, r14
     3ba:	10 81       	ld	r17, Z
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	9a 81       	ldd	r25, Y+2	; 0x02
     3c0:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     3c4:	1f 70       	andi	r17, 0x0F	; 15
     3c6:	80 7f       	andi	r24, 0xF0	; 240
     3c8:	81 2b       	or	r24, r17
     3ca:	f7 01       	movw	r30, r14
     3cc:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     3ce:	0f 2e       	mov	r0, r31
     3d0:	f7 ef       	ldi	r31, 0xF7	; 247
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f1 2c       	mov	r15, r1
     3d6:	f0 2d       	mov	r31, r0
     3d8:	f7 01       	movw	r30, r14
     3da:	10 81       	ld	r17, Z
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     3e4:	88 27       	eor	r24, r24
     3e6:	9f 70       	andi	r25, 0x0F	; 15
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	95 95       	asr	r25
     3ee:	87 95       	ror	r24
     3f0:	95 95       	asr	r25
     3f2:	87 95       	ror	r24
     3f4:	95 95       	asr	r25
     3f6:	87 95       	ror	r24
     3f8:	1f 70       	andi	r17, 0x0F	; 15
     3fa:	81 2b       	or	r24, r17
     3fc:	f7 01       	movw	r30, r14
     3fe:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     400:	0f 2e       	mov	r0, r31
     402:	fc ef       	ldi	r31, 0xFC	; 252
     404:	ef 2e       	mov	r14, r31
     406:	f1 2c       	mov	r15, r1
     408:	f0 2d       	mov	r31, r0
     40a:	f7 01       	movw	r30, r14
     40c:	10 81       	ld	r17, Z
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	9a 81       	ldd	r25, Y+2	; 0x02
     412:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     416:	88 27       	eor	r24, r24
     418:	90 7f       	andi	r25, 0xF0	; 240
     41a:	1f 70       	andi	r17, 0x0F	; 15
     41c:	19 2b       	or	r17, r25
     41e:	f7 01       	movw	r30, r14
     420:	10 83       	st	Z, r17
     422:	a5 c0       	rjmp	.+330    	; 0x56e <__stack+0x6f>
		
	} else if(pos==4){
     424:	64 30       	cpi	r22, 0x04	; 4
     426:	71 05       	cpc	r23, r1
     428:	09 f0       	breq	.+2      	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
     42a:	4e c0       	rjmp	.+156    	; 0x4c8 <__DATA_REGION_LENGTH__+0xc8>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     42c:	0f 2e       	mov	r0, r31
     42e:	fe ee       	ldi	r31, 0xEE	; 238
     430:	ef 2e       	mov	r14, r31
     432:	f1 2c       	mov	r15, r1
     434:	f0 2d       	mov	r31, r0
     436:	f7 01       	movw	r30, r14
     438:	10 81       	ld	r17, Z
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
     43e:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     442:	10 7f       	andi	r17, 0xF0	; 240
     444:	8f 70       	andi	r24, 0x0F	; 15
     446:	81 2b       	or	r24, r17
     448:	f7 01       	movw	r30, r14
     44a:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     44c:	0f 2e       	mov	r0, r31
     44e:	f3 ef       	ldi	r31, 0xF3	; 243
     450:	ef 2e       	mov	r14, r31
     452:	f1 2c       	mov	r15, r1
     454:	f0 2d       	mov	r31, r0
     456:	f7 01       	movw	r30, r14
     458:	10 81       	ld	r17, Z
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     462:	80 7f       	andi	r24, 0xF0	; 240
     464:	99 27       	eor	r25, r25
     466:	95 95       	asr	r25
     468:	87 95       	ror	r24
     46a:	95 95       	asr	r25
     46c:	87 95       	ror	r24
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	95 95       	asr	r25
     474:	87 95       	ror	r24
     476:	10 7f       	andi	r17, 0xF0	; 240
     478:	81 2b       	or	r24, r17
     47a:	f7 01       	movw	r30, r14
     47c:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     47e:	0f 2e       	mov	r0, r31
     480:	f8 ef       	ldi	r31, 0xF8	; 248
     482:	ef 2e       	mov	r14, r31
     484:	f1 2c       	mov	r15, r1
     486:	f0 2d       	mov	r31, r0
     488:	f7 01       	movw	r30, r14
     48a:	10 81       	ld	r17, Z
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	9a 81       	ldd	r25, Y+2	; 0x02
     490:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     494:	88 27       	eor	r24, r24
     496:	9f 70       	andi	r25, 0x0F	; 15
     498:	10 7f       	andi	r17, 0xF0	; 240
     49a:	19 2b       	or	r17, r25
     49c:	f7 01       	movw	r30, r14
     49e:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     4a0:	0f 2e       	mov	r0, r31
     4a2:	fd ef       	ldi	r31, 0xFD	; 253
     4a4:	ef 2e       	mov	r14, r31
     4a6:	f1 2c       	mov	r15, r1
     4a8:	f0 2d       	mov	r31, r0
     4aa:	f7 01       	movw	r30, r14
     4ac:	10 81       	ld	r17, Z
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     4b6:	10 7f       	andi	r17, 0xF0	; 240
     4b8:	95 95       	asr	r25
     4ba:	95 95       	asr	r25
     4bc:	95 95       	asr	r25
     4be:	95 95       	asr	r25
     4c0:	91 2b       	or	r25, r17
     4c2:	f7 01       	movw	r30, r14
     4c4:	90 83       	st	Z, r25
     4c6:	53 c0       	rjmp	.+166    	; 0x56e <__stack+0x6f>
		
	} else if(pos==5){
     4c8:	65 30       	cpi	r22, 0x05	; 5
     4ca:	71 05       	cpc	r23, r1
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
     4ce:	4f c0       	rjmp	.+158    	; 0x56e <__stack+0x6f>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     4d0:	0f 2e       	mov	r0, r31
     4d2:	fe ee       	ldi	r31, 0xEE	; 238
     4d4:	ef 2e       	mov	r14, r31
     4d6:	f1 2c       	mov	r15, r1
     4d8:	f0 2d       	mov	r31, r0
     4da:	f7 01       	movw	r30, r14
     4dc:	10 81       	ld	r17, Z
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     4e6:	1f 70       	andi	r17, 0x0F	; 15
     4e8:	82 95       	swap	r24
     4ea:	92 95       	swap	r25
     4ec:	90 7f       	andi	r25, 0xF0	; 240
     4ee:	98 27       	eor	r25, r24
     4f0:	80 7f       	andi	r24, 0xF0	; 240
     4f2:	98 27       	eor	r25, r24
     4f4:	81 2b       	or	r24, r17
     4f6:	f7 01       	movw	r30, r14
     4f8:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4fa:	0f 2e       	mov	r0, r31
     4fc:	f3 ef       	ldi	r31, 0xF3	; 243
     4fe:	ef 2e       	mov	r14, r31
     500:	f1 2c       	mov	r15, r1
     502:	f0 2d       	mov	r31, r0
     504:	f7 01       	movw	r30, r14
     506:	10 81       	ld	r17, Z
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     510:	1f 70       	andi	r17, 0x0F	; 15
     512:	80 7f       	andi	r24, 0xF0	; 240
     514:	81 2b       	or	r24, r17
     516:	f7 01       	movw	r30, r14
     518:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     51a:	0f 2e       	mov	r0, r31
     51c:	f8 ef       	ldi	r31, 0xF8	; 248
     51e:	ef 2e       	mov	r14, r31
     520:	f1 2c       	mov	r15, r1
     522:	f0 2d       	mov	r31, r0
     524:	f7 01       	movw	r30, r14
     526:	10 81       	ld	r17, Z
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     530:	88 27       	eor	r24, r24
     532:	9f 70       	andi	r25, 0x0F	; 15
     534:	95 95       	asr	r25
     536:	87 95       	ror	r24
     538:	95 95       	asr	r25
     53a:	87 95       	ror	r24
     53c:	95 95       	asr	r25
     53e:	87 95       	ror	r24
     540:	95 95       	asr	r25
     542:	87 95       	ror	r24
     544:	1f 70       	andi	r17, 0x0F	; 15
     546:	81 2b       	or	r24, r17
     548:	f7 01       	movw	r30, r14
     54a:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     54c:	0f 2e       	mov	r0, r31
     54e:	fd ef       	ldi	r31, 0xFD	; 253
     550:	ef 2e       	mov	r14, r31
     552:	f1 2c       	mov	r15, r1
     554:	f0 2d       	mov	r31, r0
     556:	f7 01       	movw	r30, r14
     558:	10 81       	ld	r17, Z
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	9a 81       	ldd	r25, Y+2	; 0x02
     55e:	0e 94 82 00 	call	0x104	; 0x104 <getValueArray>
     562:	88 27       	eor	r24, r24
     564:	90 7f       	andi	r25, 0xF0	; 240
     566:	1f 70       	andi	r17, 0x0F	; 15
     568:	19 2b       	or	r17, r25
     56a:	f7 01       	movw	r30, r14
     56c:	10 83       	st	Z, r17
		
	}
	

}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	08 95       	ret

0000057e <printAt>:

void printAt(long num, int pos) {
     57e:	8f 92       	push	r8
     580:	9f 92       	push	r9
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	4b 01       	movw	r8, r22
     594:	5c 01       	movw	r10, r24
     596:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     598:	24 e6       	ldi	r18, 0x64	; 100
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	0e 94 ac 11 	call	0x2358	; 0x2358 <__divmodsi4>
     5a4:	0f 2e       	mov	r0, r31
     5a6:	fa e0       	ldi	r31, 0x0A	; 10
     5a8:	cf 2e       	mov	r12, r31
     5aa:	d1 2c       	mov	r13, r1
     5ac:	e1 2c       	mov	r14, r1
     5ae:	f1 2c       	mov	r15, r1
     5b0:	f0 2d       	mov	r31, r0
     5b2:	a7 01       	movw	r20, r14
     5b4:	96 01       	movw	r18, r12
     5b6:	0e 94 ac 11 	call	0x2358	; 0x2358 <__divmodsi4>
     5ba:	be 01       	movw	r22, r28
     5bc:	80 e3       	ldi	r24, 0x30	; 48
     5be:	82 0f       	add	r24, r18
     5c0:	0e 94 ab 00 	call	0x156	; 0x156 <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     5c4:	21 96       	adiw	r28, 0x01	; 1
     5c6:	c5 01       	movw	r24, r10
     5c8:	b4 01       	movw	r22, r8
     5ca:	a7 01       	movw	r20, r14
     5cc:	96 01       	movw	r18, r12
     5ce:	0e 94 ac 11 	call	0x2358	; 0x2358 <__divmodsi4>
     5d2:	86 2f       	mov	r24, r22
     5d4:	be 01       	movw	r22, r28
     5d6:	80 5d       	subi	r24, 0xD0	; 208
     5d8:	0e 94 ab 00 	call	0x156	; 0x156 <writeChar>
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	bf 90       	pop	r11
     5ea:	af 90       	pop	r10
     5ec:	9f 90       	pop	r9
     5ee:	8f 90       	pop	r8
     5f0:	08 95       	ret

000005f2 <readJoystick>:

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
     5f2:	1f 9b       	sbis	0x03, 7	; 3
     5f4:	0b c0       	rjmp	.+22     	; 0x60c <readJoystick+0x1a>
        return 7;
    }else if((PINB & (1<<6))==0){ // 6 up
     5f6:	1e 9b       	sbis	0x03, 6	; 3
     5f8:	0c c0       	rjmp	.+24     	; 0x612 <readJoystick+0x20>
        return 6;
    }else if((PINB & (1<<4))==0){ // 4 center
     5fa:	1c 9b       	sbis	0x03, 4	; 3
     5fc:	0d c0       	rjmp	.+26     	; 0x618 <readJoystick+0x26>
        return 4;
    }else if((PINE & (1<<2))==0){ // 2 left
     5fe:	62 9b       	sbis	0x0c, 2	; 12
     600:	0e c0       	rjmp	.+28     	; 0x61e <readJoystick+0x2c>
        return 2;
    }else if((PINE & (1<<3))==0){ // 3 right
     602:	63 9b       	sbis	0x0c, 3	; 12
     604:	0f c0       	rjmp	.+30     	; 0x624 <readJoystick+0x32>
        return 3;
    }else{
        return 0;
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	08 95       	ret
    writeChar( num % 10 + '0', pp);
}

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
        return 7;
     60c:	87 e0       	ldi	r24, 0x07	; 7
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	08 95       	ret
    }else if((PINB & (1<<6))==0){ // 6 up
        return 6;
     612:	86 e0       	ldi	r24, 0x06	; 6
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	08 95       	ret
    }else if((PINB & (1<<4))==0){ // 4 center
        return 4;
     618:	84 e0       	ldi	r24, 0x04	; 4
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	08 95       	ret
    }else if((PINE & (1<<2))==0){ // 2 left
        return 2;
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	08 95       	ret
    }else if((PINE & (1<<3))==0){ // 3 right
        return 3;
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	90 e0       	ldi	r25, 0x00	; 0
    }else{
        return 0;
    }
}
     628:	08 95       	ret

0000062a <updateGui>:
void unlock(guiObj* self){
    self->lock = 0;
}


void updateGui(guiObj* self){
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	ec 01       	movw	r28, r24

    //if(!self->lock){
    //self->lock = 1;
    int value = readJoystick();
     63c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <readJoystick>
    if(value==7){
     640:	87 30       	cpi	r24, 0x07	; 7
     642:	91 05       	cpc	r25, r1
     644:	09 f0       	breq	.+2      	; 0x648 <updateGui+0x1e>
     646:	54 c0       	rjmp	.+168    	; 0x6f0 <updateGui+0xc6>
        if(self->pos==0){
     648:	88 85       	ldd	r24, Y+8	; 0x08
     64a:	99 85       	ldd	r25, Y+9	; 0x09
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	19 f5       	brne	.+70     	; 0x696 <updateGui+0x6c>
            self->freq1--;
     650:	cc 84       	ldd	r12, Y+12	; 0x0c
     652:	dd 84       	ldd	r13, Y+13	; 0x0d
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	c8 1a       	sub	r12, r24
     658:	d1 08       	sbc	r13, r1
     65a:	dd 86       	std	Y+13, r13	; 0x0d
     65c:	cc 86       	std	Y+12, r12	; 0x0c
            ASYNC(&self->pulse1 , setFreq ,self->freq1);
     65e:	8e 01       	movw	r16, r28
     660:	0c 5f       	subi	r16, 0xFC	; 252
     662:	1f 4f       	sbci	r17, 0xFF	; 255
     664:	0f 2e       	mov	r0, r31
     666:	f0 e5       	ldi	r31, 0x50	; 80
     668:	ef 2e       	mov	r14, r31
     66a:	f5 e0       	ldi	r31, 0x05	; 5
     66c:	ff 2e       	mov	r15, r31
     66e:	f0 2d       	mov	r31, r0
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	a9 01       	movw	r20, r18
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	cb 01       	movw	r24, r22
     67c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <async>
            printAt(self->freq1,self->pos);
     680:	48 85       	ldd	r20, Y+8	; 0x08
     682:	59 85       	ldd	r21, Y+9	; 0x09
     684:	6c 85       	ldd	r22, Y+12	; 0x0c
     686:	7d 85       	ldd	r23, Y+13	; 0x0d
     688:	07 2e       	mov	r0, r23
     68a:	00 0c       	add	r0, r0
     68c:	88 0b       	sbc	r24, r24
     68e:	99 0b       	sbc	r25, r25
     690:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
     694:	24 c0       	rjmp	.+72     	; 0x6de <updateGui+0xb4>
        }else if(self->pos==4){
     696:	04 97       	sbiw	r24, 0x04	; 4
     698:	11 f5       	brne	.+68     	; 0x6de <updateGui+0xb4>
            self->freq2--;
     69a:	ce 84       	ldd	r12, Y+14	; 0x0e
     69c:	df 84       	ldd	r13, Y+15	; 0x0f
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	c8 1a       	sub	r12, r24
     6a2:	d1 08       	sbc	r13, r1
     6a4:	df 86       	std	Y+15, r13	; 0x0f
     6a6:	ce 86       	std	Y+14, r12	; 0x0e
            ASYNC(&self->pulse2 , setFreq ,self->freq2);
     6a8:	8e 01       	movw	r16, r28
     6aa:	0a 5f       	subi	r16, 0xFA	; 250
     6ac:	1f 4f       	sbci	r17, 0xFF	; 255
     6ae:	0f 2e       	mov	r0, r31
     6b0:	f0 e5       	ldi	r31, 0x50	; 80
     6b2:	ef 2e       	mov	r14, r31
     6b4:	f5 e0       	ldi	r31, 0x05	; 5
     6b6:	ff 2e       	mov	r15, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	a9 01       	movw	r20, r18
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	cb 01       	movw	r24, r22
     6c6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <async>
            printAt(self->freq2,self->pos);
     6ca:	48 85       	ldd	r20, Y+8	; 0x08
     6cc:	59 85       	ldd	r21, Y+9	; 0x09
     6ce:	6e 85       	ldd	r22, Y+14	; 0x0e
     6d0:	7f 85       	ldd	r23, Y+15	; 0x0f
     6d2:	07 2e       	mov	r0, r23
     6d4:	00 0c       	add	r0, r0
     6d6:	88 0b       	sbc	r24, r24
     6d8:	99 0b       	sbc	r25, r25
     6da:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
        }


        printAt(07,2);
     6de:	42 e0       	ldi	r20, 0x02	; 2
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	67 e0       	ldi	r22, 0x07	; 7
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
     6ee:	80 c0       	rjmp	.+256    	; 0x7f0 <updateGui+0x1c6>
    }else if(value==2){ //left
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	91 05       	cpc	r25, r1
     6f4:	59 f4       	brne	.+22     	; 0x70c <updateGui+0xe2>
        self->pos = 0;
     6f6:	19 86       	std	Y+9, r1	; 0x09
     6f8:	18 86       	std	Y+8, r1	; 0x08
        printAt(02,2);
     6fa:	42 e0       	ldi	r20, 0x02	; 2
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	62 e0       	ldi	r22, 0x02	; 2
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
     70a:	72 c0       	rjmp	.+228    	; 0x7f0 <updateGui+0x1c6>
    }else if(value==3){ //right
     70c:	83 30       	cpi	r24, 0x03	; 3
     70e:	91 05       	cpc	r25, r1
     710:	69 f4       	brne	.+26     	; 0x72c <updateGui+0x102>
        self->pos = 4;
     712:	84 e0       	ldi	r24, 0x04	; 4
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	99 87       	std	Y+9, r25	; 0x09
     718:	88 87       	std	Y+8, r24	; 0x08
        printAt(03,2);
     71a:	42 e0       	ldi	r20, 0x02	; 2
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	63 e0       	ldi	r22, 0x03	; 3
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
     72a:	62 c0       	rjmp	.+196    	; 0x7f0 <updateGui+0x1c6>
    }else if(value==6){ //upp
     72c:	86 30       	cpi	r24, 0x06	; 6
     72e:	91 05       	cpc	r25, r1
     730:	09 f0       	breq	.+2      	; 0x734 <updateGui+0x10a>
     732:	54 c0       	rjmp	.+168    	; 0x7dc <updateGui+0x1b2>
        if(self->pos==0){
     734:	88 85       	ldd	r24, Y+8	; 0x08
     736:	99 85       	ldd	r25, Y+9	; 0x09
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	19 f5       	brne	.+70     	; 0x782 <updateGui+0x158>
            self->freq1++;
     73c:	cc 84       	ldd	r12, Y+12	; 0x0c
     73e:	dd 84       	ldd	r13, Y+13	; 0x0d
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	c8 1a       	sub	r12, r24
     744:	d8 0a       	sbc	r13, r24
     746:	dd 86       	std	Y+13, r13	; 0x0d
     748:	cc 86       	std	Y+12, r12	; 0x0c
            ASYNC(&self->pulse1 , setFreq ,self->freq1);
     74a:	8e 01       	movw	r16, r28
     74c:	0c 5f       	subi	r16, 0xFC	; 252
     74e:	1f 4f       	sbci	r17, 0xFF	; 255
     750:	0f 2e       	mov	r0, r31
     752:	f0 e5       	ldi	r31, 0x50	; 80
     754:	ef 2e       	mov	r14, r31
     756:	f5 e0       	ldi	r31, 0x05	; 5
     758:	ff 2e       	mov	r15, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	a9 01       	movw	r20, r18
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	cb 01       	movw	r24, r22
     768:	0e 94 56 0f 	call	0x1eac	; 0x1eac <async>
            printAt(self->freq1,self->pos);
     76c:	48 85       	ldd	r20, Y+8	; 0x08
     76e:	59 85       	ldd	r21, Y+9	; 0x09
     770:	6c 85       	ldd	r22, Y+12	; 0x0c
     772:	7d 85       	ldd	r23, Y+13	; 0x0d
     774:	07 2e       	mov	r0, r23
     776:	00 0c       	add	r0, r0
     778:	88 0b       	sbc	r24, r24
     77a:	99 0b       	sbc	r25, r25
     77c:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
     780:	24 c0       	rjmp	.+72     	; 0x7ca <updateGui+0x1a0>
        }else if(self->pos==4){
     782:	04 97       	sbiw	r24, 0x04	; 4
     784:	11 f5       	brne	.+68     	; 0x7ca <updateGui+0x1a0>
            self->freq2++;
     786:	ce 84       	ldd	r12, Y+14	; 0x0e
     788:	df 84       	ldd	r13, Y+15	; 0x0f
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	c8 1a       	sub	r12, r24
     78e:	d8 0a       	sbc	r13, r24
     790:	df 86       	std	Y+15, r13	; 0x0f
     792:	ce 86       	std	Y+14, r12	; 0x0e
            ASYNC(&self->pulse2 , setFreq ,self->freq2);
     794:	8e 01       	movw	r16, r28
     796:	0a 5f       	subi	r16, 0xFA	; 250
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	0f 2e       	mov	r0, r31
     79c:	f0 e5       	ldi	r31, 0x50	; 80
     79e:	ef 2e       	mov	r14, r31
     7a0:	f5 e0       	ldi	r31, 0x05	; 5
     7a2:	ff 2e       	mov	r15, r31
     7a4:	f0 2d       	mov	r31, r0
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	cb 01       	movw	r24, r22
     7b2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <async>
            printAt(self->freq2,self->pos);
     7b6:	48 85       	ldd	r20, Y+8	; 0x08
     7b8:	59 85       	ldd	r21, Y+9	; 0x09
     7ba:	6e 85       	ldd	r22, Y+14	; 0x0e
     7bc:	7f 85       	ldd	r23, Y+15	; 0x0f
     7be:	07 2e       	mov	r0, r23
     7c0:	00 0c       	add	r0, r0
     7c2:	88 0b       	sbc	r24, r24
     7c4:	99 0b       	sbc	r25, r25
     7c6:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
        }

        printAt(06,2);
     7ca:	42 e0       	ldi	r20, 0x02	; 2
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	66 e0       	ldi	r22, 0x06	; 6
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
     7da:	0a c0       	rjmp	.+20     	; 0x7f0 <updateGui+0x1c6>
    }else if(value==4){ //center
     7dc:	04 97       	sbiw	r24, 0x04	; 4
     7de:	41 f0       	breq	.+16     	; 0x7f0 <updateGui+0x1c6>
        
    }else{
        printAt(04,2);
     7e0:	42 e0       	ldi	r20, 0x02	; 2
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	64 e0       	ldi	r22, 0x04	; 4
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
    //}
    //self->prevValue = value;
    //AFTER(MSEC(100),&self,unlock,NULL);
    

}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <interupts>:
    {

    }
}

void interupts(mainObj* self){
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
    ASYNC(&self->gui, updateGui, NULL);
     80e:	8c 01       	movw	r16, r24
     810:	06 5f       	subi	r16, 0xF6	; 246
     812:	1f 4f       	sbci	r17, 0xFF	; 255
     814:	c1 2c       	mov	r12, r1
     816:	d1 2c       	mov	r13, r1
     818:	0f 2e       	mov	r0, r31
     81a:	f5 e1       	ldi	r31, 0x15	; 21
     81c:	ef 2e       	mov	r14, r31
     81e:	f3 e0       	ldi	r31, 0x03	; 3
     820:	ff 2e       	mov	r15, r31
     822:	f0 2d       	mov	r31, r0
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	a9 01       	movw	r20, r18
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	cb 01       	movw	r24, r22
     830:	0e 94 56 0f 	call	0x1eac	; 0x1eac <async>
}
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	08 95       	ret

00000842 <run>:

void run(mainObj* self){
     842:	cf 92       	push	r12
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	00 d0       	rcall	.+0      	; 0x854 <run+0x12>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	9a 83       	std	Y+2, r25	; 0x02
     85a:	89 83       	std	Y+1, r24	; 0x01
    INSTALL(&self, interupts, IRQ_PCINT0);
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	74 e0       	ldi	r23, 0x04	; 4
     862:	ce 01       	movw	r24, r28
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	0e 94 62 11 	call	0x22c4	; 0x22c4 <install>
    INSTALL(&self, interupts, IRQ_PCINT1);
     86a:	42 e0       	ldi	r20, 0x02	; 2
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	74 e0       	ldi	r23, 0x04	; 4
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	0e 94 62 11 	call	0x22c4	; 0x22c4 <install>


    ASYNC(&self->pulse1, cycle, NULL);
     878:	09 81       	ldd	r16, Y+1	; 0x01
     87a:	1a 81       	ldd	r17, Y+2	; 0x02
     87c:	0a 5f       	subi	r16, 0xFA	; 250
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	c1 2c       	mov	r12, r1
     882:	d1 2c       	mov	r13, r1
     884:	0f 2e       	mov	r0, r31
     886:	f7 e0       	ldi	r31, 0x07	; 7
     888:	ef 2e       	mov	r14, r31
     88a:	f5 e0       	ldi	r31, 0x05	; 5
     88c:	ff 2e       	mov	r15, r31
     88e:	f0 2d       	mov	r31, r0
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	a9 01       	movw	r20, r18
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	cb 01       	movw	r24, r22
     89c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <async>
    ASYNC(&self->pulse2, cycle, NULL);
     8a0:	09 81       	ldd	r16, Y+1	; 0x01
     8a2:	1a 81       	ldd	r17, Y+2	; 0x02
     8a4:	08 5f       	subi	r16, 0xF8	; 248
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	a9 01       	movw	r20, r18
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	cb 01       	movw	r24, r22
     8b4:	0e 94 56 0f 	call	0x1eac	; 0x1eac <async>


}
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	08 95       	ret

000008ce <main>:




int main(void)
{
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	ec 97       	sbiw	r28, 0x3c	; 60
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
    Gui__init();
     8e6:	0e 94 7d 00 	call	0xfa	; 0xfa <Gui__init>
    portWriter writer = initPortWriter;
     8ea:	1a 82       	std	Y+2, r1	; 0x02
     8ec:	19 82       	std	Y+1, r1	; 0x01
     8ee:	1c 82       	std	Y+4, r1	; 0x04
     8f0:	1b 82       	std	Y+3, r1	; 0x03
    pulseGenerator pulse = initPulseGenerator(&writer, 4, 1);
     8f2:	1e 82       	std	Y+6, r1	; 0x06
     8f4:	1d 82       	std	Y+5, r1	; 0x05
     8f6:	18 86       	std	Y+8, r1	; 0x08
     8f8:	1f 82       	std	Y+7, r1	; 0x07
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	9a 87       	std	Y+10, r25	; 0x0a
     900:	89 87       	std	Y+9, r24	; 0x09
     902:	24 e0       	ldi	r18, 0x04	; 4
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	3c 87       	std	Y+12, r19	; 0x0c
     908:	2b 87       	std	Y+11, r18	; 0x0b
     90a:	1e 86       	std	Y+14, r1	; 0x0e
     90c:	1d 86       	std	Y+13, r1	; 0x0d
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	38 8b       	std	Y+16, r19	; 0x10
     914:	2f 87       	std	Y+15, r18	; 0x0f
    pulseGenerator pulse2 = initPulseGenerator(&writer, 6, 0);
     916:	1a 8a       	std	Y+18, r1	; 0x12
     918:	19 8a       	std	Y+17, r1	; 0x11
     91a:	1c 8a       	std	Y+20, r1	; 0x14
     91c:	1b 8a       	std	Y+19, r1	; 0x13
     91e:	9e 8b       	std	Y+22, r25	; 0x16
     920:	8d 8b       	std	Y+21, r24	; 0x15
     922:	26 e0       	ldi	r18, 0x06	; 6
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	38 8f       	std	Y+24, r19	; 0x18
     928:	2f 8b       	std	Y+23, r18	; 0x17
     92a:	1a 8e       	std	Y+26, r1	; 0x1a
     92c:	19 8e       	std	Y+25, r1	; 0x19
     92e:	1c 8e       	std	Y+28, r1	; 0x1c
     930:	1b 8e       	std	Y+27, r1	; 0x1b
    guiObj  gui = initGui(&pulse, &pulse2, 0);
     932:	1e 8e       	std	Y+30, r1	; 0x1e
     934:	1d 8e       	std	Y+29, r1	; 0x1d
     936:	18 a2       	std	Y+32, r1	; 0x20
     938:	1f 8e       	std	Y+31, r1	; 0x1f
     93a:	ae 01       	movw	r20, r28
     93c:	4b 5f       	subi	r20, 0xFB	; 251
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	5a a3       	std	Y+34, r21	; 0x22
     942:	49 a3       	std	Y+33, r20	; 0x21
     944:	9e 01       	movw	r18, r28
     946:	2f 5e       	subi	r18, 0xEF	; 239
     948:	3f 4f       	sbci	r19, 0xFF	; 255
     94a:	3c a3       	std	Y+36, r19	; 0x24
     94c:	2b a3       	std	Y+35, r18	; 0x23
     94e:	1e a2       	std	Y+38, r1	; 0x26
     950:	1d a2       	std	Y+37, r1	; 0x25
     952:	18 a6       	std	Y+40, r1	; 0x28
     954:	1f a2       	std	Y+39, r1	; 0x27
     956:	1a a6       	std	Y+42, r1	; 0x2a
     958:	19 a6       	std	Y+41, r1	; 0x29
     95a:	1c a6       	std	Y+44, r1	; 0x2c
     95c:	1b a6       	std	Y+43, r1	; 0x2b
     95e:	1e a6       	std	Y+46, r1	; 0x2e
     960:	1d a6       	std	Y+45, r1	; 0x2d
     962:	18 aa       	std	Y+48, r1	; 0x30
     964:	1f a6       	std	Y+47, r1	; 0x2f
    mainObj mainObject = {initObject(), &writer, &pulse, &pulse2, &gui};
     966:	1a aa       	std	Y+50, r1	; 0x32
     968:	19 aa       	std	Y+49, r1	; 0x31
     96a:	1c aa       	std	Y+52, r1	; 0x34
     96c:	1b aa       	std	Y+51, r1	; 0x33
     96e:	9e ab       	std	Y+54, r25	; 0x36
     970:	8d ab       	std	Y+53, r24	; 0x35
     972:	58 af       	std	Y+56, r21	; 0x38
     974:	4f ab       	std	Y+55, r20	; 0x37
     976:	3a af       	std	Y+58, r19	; 0x3a
     978:	29 af       	std	Y+57, r18	; 0x39
     97a:	4c 96       	adiw	r24, 0x1c	; 28
     97c:	9c af       	std	Y+60, r25	; 0x3c
     97e:	8b af       	std	Y+59, r24	; 0x3b

    for(int i; i<1000; i++){
     980:	00 e0       	ldi	r16, 0x00	; 0
     982:	10 e0       	ldi	r17, 0x00	; 0
        printAt(i,2);
     984:	b8 01       	movw	r22, r16
     986:	01 2e       	mov	r0, r17
     988:	00 0c       	add	r0, r0
     98a:	88 0b       	sbc	r24, r24
     98c:	99 0b       	sbc	r25, r25
     98e:	42 e0       	ldi	r20, 0x02	; 2
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	0e 94 bf 02 	call	0x57e	; 0x57e <printAt>
    pulseGenerator pulse = initPulseGenerator(&writer, 4, 1);
    pulseGenerator pulse2 = initPulseGenerator(&writer, 6, 0);
    guiObj  gui = initGui(&pulse, &pulse2, 0);
    mainObj mainObject = {initObject(), &writer, &pulse, &pulse2, &gui};

    for(int i; i<1000; i++){
     996:	0f 5f       	subi	r16, 0xFF	; 255
     998:	1f 4f       	sbci	r17, 0xFF	; 255
     99a:	08 3e       	cpi	r16, 0xE8	; 232
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	18 07       	cpc	r17, r24
     9a0:	89 f7       	brne	.-30     	; 0x984 <main+0xb6>
        printAt(i,2);
    }


    //SYNC(&pulse,cycle, 4);
    return TINYTIMBER(&mainObject, run, NULL);
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	61 e2       	ldi	r22, 0x21	; 33
     9a8:	74 e0       	ldi	r23, 0x04	; 4
     9aa:	ce 01       	movw	r24, r28
     9ac:	c1 96       	adiw	r24, 0x31	; 49
     9ae:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <tinytimber>
	
    while (1) 
    {

    }
}
     9b2:	ec 96       	adiw	r28, 0x3c	; 60
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret

000009c8 <write>:

#include "portWriter.h"
#include <avr/io.h>

int write(portWriter* self, int arg){
    if((PORTE>>arg)&1){
     9c8:	8e b1       	in	r24, 0x0e	; 14
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	06 2e       	mov	r0, r22
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <write+0xc>
     9d0:	95 95       	asr	r25
     9d2:	87 95       	ror	r24
     9d4:	0a 94       	dec	r0
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <write+0x8>
     9d8:	80 ff       	sbrs	r24, 0
     9da:	0c c0       	rjmp	.+24     	; 0x9f4 <write+0x2c>
        PORTE &= ~(1<<arg);
     9dc:	2e b1       	in	r18, 0x0e	; 14
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <write+0x20>
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	6a 95       	dec	r22
     9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <write+0x1c>
     9ec:	80 95       	com	r24
     9ee:	82 23       	and	r24, r18
     9f0:	8e b9       	out	0x0e, r24	; 14
     9f2:	0a c0       	rjmp	.+20     	; 0xa08 <write+0x40>
    }else{
        PORTE |= (1<<arg);
     9f4:	2e b1       	in	r18, 0x0e	; 14
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <write+0x38>
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	6a 95       	dec	r22
     a02:	e2 f7       	brpl	.-8      	; 0x9fc <write+0x34>
     a04:	82 2b       	or	r24, r18
     a06:	8e b9       	out	0x0e, r24	; 14
    }

    return 0;
    
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	08 95       	ret

00000a0e <cycle>:
void decFreq(pulseGenerator* self){
    self->freq--;
}
int getFreq(pulseGenerator* self){
    return self->freq;
}
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
     a20:	8a 85       	ldd	r24, Y+10	; 0x0a
     a22:	9b 85       	ldd	r25, Y+11	; 0x0b
     a24:	89 2b       	or	r24, r25
     a26:	41 f0       	breq	.+16     	; 0xa38 <cycle+0x2a>
     a28:	4e 81       	ldd	r20, Y+6	; 0x06
     a2a:	5f 81       	ldd	r21, Y+7	; 0x07
     a2c:	64 ee       	ldi	r22, 0xE4	; 228
     a2e:	74 e0       	ldi	r23, 0x04	; 4
     a30:	ce 01       	movw	r24, r28
     a32:	04 96       	adiw	r24, 0x04	; 4
     a34:	0e 94 67 10 	call	0x20ce	; 0x20ce <sync>
     a38:	6a 85       	ldd	r22, Y+10	; 0x0a
     a3a:	7b 85       	ldd	r23, Y+11	; 0x0b
     a3c:	84 ef       	ldi	r24, 0xF4	; 244
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 98 11 	call	0x2330	; 0x2330 <__divmodhi4>
     a44:	2d e7       	ldi	r18, 0x7D	; 125
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	db 01       	movw	r26, r22
     a4a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__usmulhisi3>
     a4e:	8b 01       	movw	r16, r22
     a50:	9c 01       	movw	r18, r24
     a52:	99 23       	and	r25, r25
     a54:	24 f4       	brge	.+8      	; 0xa5e <cycle+0x50>
     a56:	0d 5f       	subi	r16, 0xFD	; 253
     a58:	1f 4f       	sbci	r17, 0xFF	; 255
     a5a:	2f 4f       	sbci	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	c9 01       	movw	r24, r18
     a60:	b8 01       	movw	r22, r16
     a62:	95 95       	asr	r25
     a64:	87 95       	ror	r24
     a66:	77 95       	ror	r23
     a68:	67 95       	ror	r22
     a6a:	95 95       	asr	r25
     a6c:	87 95       	ror	r24
     a6e:	77 95       	ror	r23
     a70:	67 95       	ror	r22
     a72:	c1 2c       	mov	r12, r1
     a74:	d1 2c       	mov	r13, r1
     a76:	0f 2e       	mov	r0, r31
     a78:	f7 e0       	ldi	r31, 0x07	; 7
     a7a:	ef 2e       	mov	r14, r31
     a7c:	f5 e0       	ldi	r31, 0x05	; 5
     a7e:	ff 2e       	mov	r15, r31
     a80:	f0 2d       	mov	r31, r0
     a82:	8e 01       	movw	r16, r28
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	a9 01       	movw	r20, r18
     a8a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <async>
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	08 95       	ret

00000aa0 <setFreq>:
void setFreq(pulseGenerator* self, int freq){
    self->freq = freq;
     aa0:	fc 01       	movw	r30, r24
     aa2:	73 87       	std	Z+11, r23	; 0x0b
     aa4:	62 87       	std	Z+10, r22	; 0x0a
     aa6:	08 95       	ret

00000aa8 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	00 d0       	rcall	.+0      	; 0xaae <initialize+0x6>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <initialize+0x8>
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	8b ef       	ldi	r24, 0xFB	; 251
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	2b ed       	ldi	r18, 0xDB	; 219
     aba:	32 e0       	ldi	r19, 0x02	; 2
     abc:	fc 01       	movw	r30, r24
     abe:	70 97       	sbiw	r30, 0x10	; 16
     ac0:	91 83       	std	Z+1, r25	; 0x01
     ac2:	80 83       	st	Z, r24
     ac4:	40 96       	adiw	r24, 0x10	; 16
     ac6:	82 17       	cp	r24, r18
     ac8:	93 07       	cpc	r25, r19
     aca:	c1 f7       	brne	.-16     	; 0xabc <initialize+0x14>
     acc:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <messages+0xe1>
     ad0:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <messages+0xe0>
     ad4:	e6 e3       	ldi	r30, 0x36	; 54
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	83 e5       	ldi	r24, 0x53	; 83
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	91 83       	std	Z+1, r25	; 0x01
     ade:	80 83       	st	Z, r24
     ae0:	80 e7       	ldi	r24, 0x70	; 112
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	96 8f       	std	Z+30, r25	; 0x1e
     ae6:	85 8f       	std	Z+29, r24	; 0x1d
     ae8:	ad e8       	ldi	r26, 0x8D	; 141
     aea:	b1 e0       	ldi	r27, 0x01	; 1
     aec:	b3 af       	std	Z+59, r27	; 0x3b
     aee:	a2 af       	std	Z+58, r26	; 0x3a
     af0:	1d 92       	st	X+, r1
     af2:	1c 92       	st	X, r1
     af4:	fa 83       	std	Y+2, r31	; 0x02
     af6:	e9 83       	std	Y+1, r30	; 0x01
     af8:	e7 e3       	ldi	r30, 0x37	; 55
     afa:	f3 e0       	ldi	r31, 0x03	; 3
     afc:	fc 83       	std	Y+4, r31	; 0x04
     afe:	eb 83       	std	Y+3, r30	; 0x03
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	9a 81       	ldd	r25, Y+2	; 0x02
     b04:	06 96       	adiw	r24, 0x06	; 6
     b06:	0e 94 1d 12 	call	0x243a	; 0x243a <setjmp>
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	e9 81       	ldd	r30, Y+1	; 0x01
     b10:	fa 81       	ldd	r31, Y+2	; 0x02
     b12:	97 8b       	std	Z+23, r25	; 0x17
     b14:	86 8b       	std	Z+22, r24	; 0x16
     b16:	91 8f       	std	Z+25, r25	; 0x19
     b18:	80 8f       	std	Z+24, r24	; 0x18
     b1a:	84 ef       	ldi	r24, 0xF4	; 244
     b1c:	90 e1       	ldi	r25, 0x10	; 16
     b1e:	94 8f       	std	Z+28, r25	; 0x1c
     b20:	83 8f       	std	Z+27, r24	; 0x1b
     b22:	15 82       	std	Z+5, r1	; 0x05
     b24:	14 82       	std	Z+4, r1	; 0x04
     b26:	7d 96       	adiw	r30, 0x1d	; 29
     b28:	fa 83       	std	Y+2, r31	; 0x02
     b2a:	e9 83       	std	Y+1, r30	; 0x01
     b2c:	eb 81       	ldd	r30, Y+3	; 0x03
     b2e:	fc 81       	ldd	r31, Y+4	; 0x04
     b30:	e0 5a       	subi	r30, 0xA0	; 160
     b32:	ff 4f       	sbci	r31, 0xFF	; 255
     b34:	fc 83       	std	Y+4, r31	; 0x04
     b36:	eb 83       	std	Y+3, r30	; 0x03
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	8a 5a       	subi	r24, 0xAA	; 170
     b3e:	91 40       	sbci	r25, 0x01	; 1
     b40:	f9 f6       	brne	.-66     	; 0xb00 <initialize+0x58>
     b42:	ee ec       	ldi	r30, 0xCE	; 206
     b44:	f1 e0       	ldi	r31, 0x01	; 1
     b46:	11 82       	std	Z+1, r1	; 0x01
     b48:	10 82       	st	Z, r1
     b4a:	15 82       	std	Z+5, r1	; 0x05
     b4c:	14 82       	std	Z+4, r1	; 0x04
     b4e:	13 82       	std	Z+3, r1	; 0x03
     b50:	12 82       	std	Z+2, r1	; 0x02
     b52:	e1 e6       	ldi	r30, 0x61	; 97
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 e8       	ldi	r24, 0x80	; 128
     b58:	80 83       	st	Z, r24
     b5a:	10 82       	st	Z, r1
     b5c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b60:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b64:	84 e0       	ldi	r24, 0x04	; 4
     b66:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <dispatch>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	00 d0       	rcall	.+0      	; 0xb84 <dispatch+0x6>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	9a 83       	std	Y+2, r25	; 0x02
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b90:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b94:	06 96       	adiw	r24, 0x06	; 6
     b96:	0e 94 1d 12 	call	0x243a	; 0x243a <setjmp>
     b9a:	89 2b       	or	r24, r25
     b9c:	59 f4       	brne	.+22     	; 0xbb4 <dispatch+0x36>
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ba6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	06 96       	adiw	r24, 0x06	; 6
     bb0:	0e 94 3d 12 	call	0x247a	; 0x247a <longjmp>
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <schedule>:
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <msgQ>
     bca:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <msgQ+0x1>
     bce:	30 97       	sbiw	r30, 0x00	; 0
     bd0:	61 f1       	breq	.+88     	; 0xc2a <schedule+0x6c>
     bd2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     bd6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	31 f1       	breq	.+76     	; 0xc2a <schedule+0x6c>
     bde:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     be2:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     be6:	aa 81       	ldd	r26, Y+2	; 0x02
     be8:	bb 81       	ldd	r27, Y+3	; 0x03
     bea:	10 97       	sbiw	r26, 0x00	; 0
     bec:	79 f0       	breq	.+30     	; 0xc0c <schedule+0x4e>
     bee:	46 81       	ldd	r20, Z+6	; 0x06
     bf0:	57 81       	ldd	r21, Z+7	; 0x07
     bf2:	60 85       	ldd	r22, Z+8	; 0x08
     bf4:	71 85       	ldd	r23, Z+9	; 0x09
     bf6:	16 96       	adiw	r26, 0x06	; 6
     bf8:	0d 91       	ld	r16, X+
     bfa:	1d 91       	ld	r17, X+
     bfc:	2d 91       	ld	r18, X+
     bfe:	3c 91       	ld	r19, X
     c00:	19 97       	sbiw	r26, 0x09	; 9
     c02:	40 1b       	sub	r20, r16
     c04:	51 0b       	sbc	r21, r17
     c06:	62 0b       	sbc	r22, r18
     c08:	73 0b       	sbc	r23, r19
     c0a:	7a f4       	brpl	.+30     	; 0xc2a <schedule+0x6c>
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 81       	ld	r18, Z
     c10:	31 81       	ldd	r19, Z+1	; 0x01
     c12:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     c16:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     c1a:	d1 83       	std	Z+1, r29	; 0x01
     c1c:	c0 83       	st	Z, r28
     c1e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     c22:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     c26:	0e 94 bf 05 	call	0xb7e	; 0xb7e <dispatch>
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	08 95       	ret

00000c34 <__vector_1>:
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	2f 93       	push	r18
     c40:	3f 93       	push	r19
     c42:	4f 93       	push	r20
     c44:	5f 93       	push	r21
     c46:	6f 93       	push	r22
     c48:	7f 93       	push	r23
     c4a:	8f 93       	push	r24
     c4c:	9f 93       	push	r25
     c4e:	af 93       	push	r26
     c50:	bf 93       	push	r27
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
     c56:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     c5a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     c5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c66:	c9 01       	movw	r24, r18
     c68:	03 2e       	mov	r0, r19
     c6a:	00 0c       	add	r0, r0
     c6c:	aa 0b       	sbc	r26, r26
     c6e:	bb 0b       	sbc	r27, r27
     c70:	dc 01       	movw	r26, r24
     c72:	99 27       	eor	r25, r25
     c74:	88 27       	eor	r24, r24
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	84 2b       	or	r24, r20
     c7c:	95 2b       	or	r25, r21
     c7e:	a6 2b       	or	r26, r22
     c80:	b7 2b       	or	r27, r23
     c82:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     c86:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     c8a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     c8e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     c92:	b0 9b       	sbis	0x16, 0	; 22
     c94:	1b c0       	rjmp	.+54     	; 0xccc <__vector_1+0x98>
     c96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c9e:	c9 01       	movw	r24, r18
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	09 2e       	mov	r0, r25
     ca4:	00 0c       	add	r0, r0
     ca6:	aa 0b       	sbc	r26, r26
     ca8:	bb 0b       	sbc	r27, r27
     caa:	dc 01       	movw	r26, r24
     cac:	99 27       	eor	r25, r25
     cae:	88 27       	eor	r24, r24
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	84 2b       	or	r24, r20
     cb6:	95 2b       	or	r25, r21
     cb8:	a6 2b       	or	r26, r22
     cba:	b7 2b       	or	r27, r23
     cbc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     cc0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     cc4:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     cc8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     ccc:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <mtable>
     cd0:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <mtable+0x1>
     cd4:	30 97       	sbiw	r30, 0x00	; 0
     cd6:	39 f0       	breq	.+14     	; 0xce6 <__vector_1+0xb2>
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <otable>
     ce0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <otable+0x1>
     ce4:	09 95       	icall
     ce6:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	1f 90       	pop	r1
     d0a:	18 95       	reti

00000d0c <__vector_2>:
     d0c:	1f 92       	push	r1
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	0f 92       	push	r0
     d14:	11 24       	eor	r1, r1
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
     d2e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     d32:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     d36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d3e:	c9 01       	movw	r24, r18
     d40:	03 2e       	mov	r0, r19
     d42:	00 0c       	add	r0, r0
     d44:	aa 0b       	sbc	r26, r26
     d46:	bb 0b       	sbc	r27, r27
     d48:	dc 01       	movw	r26, r24
     d4a:	99 27       	eor	r25, r25
     d4c:	88 27       	eor	r24, r24
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	84 2b       	or	r24, r20
     d54:	95 2b       	or	r25, r21
     d56:	a6 2b       	or	r26, r22
     d58:	b7 2b       	or	r27, r23
     d5a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     d5e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     d62:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     d66:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     d6a:	b0 9b       	sbis	0x16, 0	; 22
     d6c:	1b c0       	rjmp	.+54     	; 0xda4 <__vector_2+0x98>
     d6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d76:	c9 01       	movw	r24, r18
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	09 2e       	mov	r0, r25
     d7c:	00 0c       	add	r0, r0
     d7e:	aa 0b       	sbc	r26, r26
     d80:	bb 0b       	sbc	r27, r27
     d82:	dc 01       	movw	r26, r24
     d84:	99 27       	eor	r25, r25
     d86:	88 27       	eor	r24, r24
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	84 2b       	or	r24, r20
     d8e:	95 2b       	or	r25, r21
     d90:	a6 2b       	or	r26, r22
     d92:	b7 2b       	or	r27, r23
     d94:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     d98:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     d9c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     da0:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     da4:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <mtable+0x2>
     da8:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <mtable+0x3>
     dac:	30 97       	sbiw	r30, 0x00	; 0
     dae:	39 f0       	breq	.+14     	; 0xdbe <__vector_2+0xb2>
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <otable+0x2>
     db8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <otable+0x3>
     dbc:	09 95       	icall
     dbe:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
     dc2:	ff 91       	pop	r31
     dc4:	ef 91       	pop	r30
     dc6:	bf 91       	pop	r27
     dc8:	af 91       	pop	r26
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	7f 91       	pop	r23
     dd0:	6f 91       	pop	r22
     dd2:	5f 91       	pop	r21
     dd4:	4f 91       	pop	r20
     dd6:	3f 91       	pop	r19
     dd8:	2f 91       	pop	r18
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <__vector_3>:
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	6f 93       	push	r22
     df8:	7f 93       	push	r23
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31
     e06:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     e0a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     e0e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e12:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e16:	c9 01       	movw	r24, r18
     e18:	03 2e       	mov	r0, r19
     e1a:	00 0c       	add	r0, r0
     e1c:	aa 0b       	sbc	r26, r26
     e1e:	bb 0b       	sbc	r27, r27
     e20:	dc 01       	movw	r26, r24
     e22:	99 27       	eor	r25, r25
     e24:	88 27       	eor	r24, r24
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	84 2b       	or	r24, r20
     e2c:	95 2b       	or	r25, r21
     e2e:	a6 2b       	or	r26, r22
     e30:	b7 2b       	or	r27, r23
     e32:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     e36:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     e3a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     e3e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     e42:	b0 9b       	sbis	0x16, 0	; 22
     e44:	1b c0       	rjmp	.+54     	; 0xe7c <__vector_3+0x98>
     e46:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e4a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e4e:	c9 01       	movw	r24, r18
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	09 2e       	mov	r0, r25
     e54:	00 0c       	add	r0, r0
     e56:	aa 0b       	sbc	r26, r26
     e58:	bb 0b       	sbc	r27, r27
     e5a:	dc 01       	movw	r26, r24
     e5c:	99 27       	eor	r25, r25
     e5e:	88 27       	eor	r24, r24
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	84 2b       	or	r24, r20
     e66:	95 2b       	or	r25, r21
     e68:	a6 2b       	or	r26, r22
     e6a:	b7 2b       	or	r27, r23
     e6c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     e70:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     e74:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     e78:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     e7c:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <mtable+0x4>
     e80:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <mtable+0x5>
     e84:	30 97       	sbiw	r30, 0x00	; 0
     e86:	39 f0       	breq	.+14     	; 0xe96 <__vector_3+0xb2>
     e88:	62 e0       	ldi	r22, 0x02	; 2
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <otable+0x4>
     e90:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <otable+0x5>
     e94:	09 95       	icall
     e96:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	7f 91       	pop	r23
     ea8:	6f 91       	pop	r22
     eaa:	5f 91       	pop	r21
     eac:	4f 91       	pop	r20
     eae:	3f 91       	pop	r19
     eb0:	2f 91       	pop	r18
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <__vector_4>:
     ebc:	1f 92       	push	r1
     ebe:	0f 92       	push	r0
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	0f 92       	push	r0
     ec4:	11 24       	eor	r1, r1
     ec6:	2f 93       	push	r18
     ec8:	3f 93       	push	r19
     eca:	4f 93       	push	r20
     ecc:	5f 93       	push	r21
     ece:	6f 93       	push	r22
     ed0:	7f 93       	push	r23
     ed2:	8f 93       	push	r24
     ed4:	9f 93       	push	r25
     ed6:	af 93       	push	r26
     ed8:	bf 93       	push	r27
     eda:	ef 93       	push	r30
     edc:	ff 93       	push	r31
     ede:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     ee2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     ee6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eee:	c9 01       	movw	r24, r18
     ef0:	03 2e       	mov	r0, r19
     ef2:	00 0c       	add	r0, r0
     ef4:	aa 0b       	sbc	r26, r26
     ef6:	bb 0b       	sbc	r27, r27
     ef8:	dc 01       	movw	r26, r24
     efa:	99 27       	eor	r25, r25
     efc:	88 27       	eor	r24, r24
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	84 2b       	or	r24, r20
     f04:	95 2b       	or	r25, r21
     f06:	a6 2b       	or	r26, r22
     f08:	b7 2b       	or	r27, r23
     f0a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     f0e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     f12:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     f16:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     f1a:	b0 9b       	sbis	0x16, 0	; 22
     f1c:	1b c0       	rjmp	.+54     	; 0xf54 <__vector_4+0x98>
     f1e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f22:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f26:	c9 01       	movw	r24, r18
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	09 2e       	mov	r0, r25
     f2c:	00 0c       	add	r0, r0
     f2e:	aa 0b       	sbc	r26, r26
     f30:	bb 0b       	sbc	r27, r27
     f32:	dc 01       	movw	r26, r24
     f34:	99 27       	eor	r25, r25
     f36:	88 27       	eor	r24, r24
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	84 2b       	or	r24, r20
     f3e:	95 2b       	or	r25, r21
     f40:	a6 2b       	or	r26, r22
     f42:	b7 2b       	or	r27, r23
     f44:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     f48:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     f4c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     f50:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     f54:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mtable+0x6>
     f58:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mtable+0x7>
     f5c:	30 97       	sbiw	r30, 0x00	; 0
     f5e:	39 f0       	breq	.+14     	; 0xf6e <__vector_4+0xb2>
     f60:	63 e0       	ldi	r22, 0x03	; 3
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <otable+0x6>
     f68:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <otable+0x7>
     f6c:	09 95       	icall
     f6e:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
     f72:	ff 91       	pop	r31
     f74:	ef 91       	pop	r30
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <__vector_5>:
     f94:	1f 92       	push	r1
     f96:	0f 92       	push	r0
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	0f 92       	push	r0
     f9c:	11 24       	eor	r1, r1
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
     fb6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     fba:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     fbe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fc2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fc6:	c9 01       	movw	r24, r18
     fc8:	03 2e       	mov	r0, r19
     fca:	00 0c       	add	r0, r0
     fcc:	aa 0b       	sbc	r26, r26
     fce:	bb 0b       	sbc	r27, r27
     fd0:	dc 01       	movw	r26, r24
     fd2:	99 27       	eor	r25, r25
     fd4:	88 27       	eor	r24, r24
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	84 2b       	or	r24, r20
     fdc:	95 2b       	or	r25, r21
     fde:	a6 2b       	or	r26, r22
     fe0:	b7 2b       	or	r27, r23
     fe2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     fe6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     fea:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     fee:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     ff2:	b0 9b       	sbis	0x16, 0	; 22
     ff4:	1b c0       	rjmp	.+54     	; 0x102c <__vector_5+0x98>
     ff6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ffa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ffe:	c9 01       	movw	r24, r18
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	09 2e       	mov	r0, r25
    1004:	00 0c       	add	r0, r0
    1006:	aa 0b       	sbc	r26, r26
    1008:	bb 0b       	sbc	r27, r27
    100a:	dc 01       	movw	r26, r24
    100c:	99 27       	eor	r25, r25
    100e:	88 27       	eor	r24, r24
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	84 2b       	or	r24, r20
    1016:	95 2b       	or	r25, r21
    1018:	a6 2b       	or	r26, r22
    101a:	b7 2b       	or	r27, r23
    101c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1020:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1024:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1028:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    102c:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <mtable+0x8>
    1030:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <mtable+0x9>
    1034:	30 97       	sbiw	r30, 0x00	; 0
    1036:	39 f0       	breq	.+14     	; 0x1046 <__vector_5+0xb2>
    1038:	64 e0       	ldi	r22, 0x04	; 4
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <otable+0x8>
    1040:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <otable+0x9>
    1044:	09 95       	icall
    1046:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    104a:	ff 91       	pop	r31
    104c:	ef 91       	pop	r30
    104e:	bf 91       	pop	r27
    1050:	af 91       	pop	r26
    1052:	9f 91       	pop	r25
    1054:	8f 91       	pop	r24
    1056:	7f 91       	pop	r23
    1058:	6f 91       	pop	r22
    105a:	5f 91       	pop	r21
    105c:	4f 91       	pop	r20
    105e:	3f 91       	pop	r19
    1060:	2f 91       	pop	r18
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <__vector_10>:
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	2f 93       	push	r18
    1078:	3f 93       	push	r19
    107a:	4f 93       	push	r20
    107c:	5f 93       	push	r21
    107e:	6f 93       	push	r22
    1080:	7f 93       	push	r23
    1082:	8f 93       	push	r24
    1084:	9f 93       	push	r25
    1086:	af 93       	push	r26
    1088:	bf 93       	push	r27
    108a:	ef 93       	push	r30
    108c:	ff 93       	push	r31
    108e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1092:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1096:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    109a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    109e:	c9 01       	movw	r24, r18
    10a0:	03 2e       	mov	r0, r19
    10a2:	00 0c       	add	r0, r0
    10a4:	aa 0b       	sbc	r26, r26
    10a6:	bb 0b       	sbc	r27, r27
    10a8:	dc 01       	movw	r26, r24
    10aa:	99 27       	eor	r25, r25
    10ac:	88 27       	eor	r24, r24
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	84 2b       	or	r24, r20
    10b4:	95 2b       	or	r25, r21
    10b6:	a6 2b       	or	r26, r22
    10b8:	b7 2b       	or	r27, r23
    10ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    10be:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    10c2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    10c6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    10ca:	b0 9b       	sbis	0x16, 0	; 22
    10cc:	1b c0       	rjmp	.+54     	; 0x1104 <__vector_10+0x98>
    10ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10d6:	c9 01       	movw	r24, r18
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	09 2e       	mov	r0, r25
    10dc:	00 0c       	add	r0, r0
    10de:	aa 0b       	sbc	r26, r26
    10e0:	bb 0b       	sbc	r27, r27
    10e2:	dc 01       	movw	r26, r24
    10e4:	99 27       	eor	r25, r25
    10e6:	88 27       	eor	r24, r24
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	84 2b       	or	r24, r20
    10ee:	95 2b       	or	r25, r21
    10f0:	a6 2b       	or	r26, r22
    10f2:	b7 2b       	or	r27, r23
    10f4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    10f8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    10fc:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1100:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1104:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable+0xa>
    1108:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0xb>
    110c:	30 97       	sbiw	r30, 0x00	; 0
    110e:	39 f0       	breq	.+14     	; 0x111e <__vector_10+0xb2>
    1110:	65 e0       	ldi	r22, 0x05	; 5
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable+0xa>
    1118:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0xb>
    111c:	09 95       	icall
    111e:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    1122:	ff 91       	pop	r31
    1124:	ef 91       	pop	r30
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	0f 90       	pop	r0
    1140:	1f 90       	pop	r1
    1142:	18 95       	reti

00001144 <__vector_11>:
    1144:	1f 92       	push	r1
    1146:	0f 92       	push	r0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	0f 92       	push	r0
    114c:	11 24       	eor	r1, r1
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
    1166:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    116a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    116e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1172:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1176:	c9 01       	movw	r24, r18
    1178:	03 2e       	mov	r0, r19
    117a:	00 0c       	add	r0, r0
    117c:	aa 0b       	sbc	r26, r26
    117e:	bb 0b       	sbc	r27, r27
    1180:	dc 01       	movw	r26, r24
    1182:	99 27       	eor	r25, r25
    1184:	88 27       	eor	r24, r24
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	84 2b       	or	r24, r20
    118c:	95 2b       	or	r25, r21
    118e:	a6 2b       	or	r26, r22
    1190:	b7 2b       	or	r27, r23
    1192:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1196:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    119a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    119e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    11a2:	b0 9b       	sbis	0x16, 0	; 22
    11a4:	1b c0       	rjmp	.+54     	; 0x11dc <__vector_11+0x98>
    11a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ae:	c9 01       	movw	r24, r18
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	09 2e       	mov	r0, r25
    11b4:	00 0c       	add	r0, r0
    11b6:	aa 0b       	sbc	r26, r26
    11b8:	bb 0b       	sbc	r27, r27
    11ba:	dc 01       	movw	r26, r24
    11bc:	99 27       	eor	r25, r25
    11be:	88 27       	eor	r24, r24
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	84 2b       	or	r24, r20
    11c6:	95 2b       	or	r25, r21
    11c8:	a6 2b       	or	r26, r22
    11ca:	b7 2b       	or	r27, r23
    11cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    11d0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    11d4:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    11d8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    11dc:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0xc>
    11e0:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0xd>
    11e4:	30 97       	sbiw	r30, 0x00	; 0
    11e6:	39 f0       	breq	.+14     	; 0x11f6 <__vector_11+0xb2>
    11e8:	66 e0       	ldi	r22, 0x06	; 6
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0xc>
    11f0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0xd>
    11f4:	09 95       	icall
    11f6:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    11fa:	ff 91       	pop	r31
    11fc:	ef 91       	pop	r30
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	0f 90       	pop	r0
    1218:	1f 90       	pop	r1
    121a:	18 95       	reti

0000121c <__vector_12>:
    121c:	1f 92       	push	r1
    121e:	0f 92       	push	r0
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	0f 92       	push	r0
    1224:	11 24       	eor	r1, r1
    1226:	2f 93       	push	r18
    1228:	3f 93       	push	r19
    122a:	4f 93       	push	r20
    122c:	5f 93       	push	r21
    122e:	6f 93       	push	r22
    1230:	7f 93       	push	r23
    1232:	8f 93       	push	r24
    1234:	9f 93       	push	r25
    1236:	af 93       	push	r26
    1238:	bf 93       	push	r27
    123a:	ef 93       	push	r30
    123c:	ff 93       	push	r31
    123e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1242:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1246:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    124a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    124e:	c9 01       	movw	r24, r18
    1250:	03 2e       	mov	r0, r19
    1252:	00 0c       	add	r0, r0
    1254:	aa 0b       	sbc	r26, r26
    1256:	bb 0b       	sbc	r27, r27
    1258:	dc 01       	movw	r26, r24
    125a:	99 27       	eor	r25, r25
    125c:	88 27       	eor	r24, r24
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	84 2b       	or	r24, r20
    1264:	95 2b       	or	r25, r21
    1266:	a6 2b       	or	r26, r22
    1268:	b7 2b       	or	r27, r23
    126a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    126e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1272:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1276:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    127a:	b0 9b       	sbis	0x16, 0	; 22
    127c:	1b c0       	rjmp	.+54     	; 0x12b4 <__vector_12+0x98>
    127e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1282:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1286:	c9 01       	movw	r24, r18
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	09 2e       	mov	r0, r25
    128c:	00 0c       	add	r0, r0
    128e:	aa 0b       	sbc	r26, r26
    1290:	bb 0b       	sbc	r27, r27
    1292:	dc 01       	movw	r26, r24
    1294:	99 27       	eor	r25, r25
    1296:	88 27       	eor	r24, r24
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	84 2b       	or	r24, r20
    129e:	95 2b       	or	r25, r21
    12a0:	a6 2b       	or	r26, r22
    12a2:	b7 2b       	or	r27, r23
    12a4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    12a8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    12ac:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    12b0:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    12b4:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0xe>
    12b8:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0xf>
    12bc:	30 97       	sbiw	r30, 0x00	; 0
    12be:	39 f0       	breq	.+14     	; 0x12ce <__vector_12+0xb2>
    12c0:	67 e0       	ldi	r22, 0x07	; 7
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0xe>
    12c8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0xf>
    12cc:	09 95       	icall
    12ce:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	bf 91       	pop	r27
    12d8:	af 91       	pop	r26
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	7f 91       	pop	r23
    12e0:	6f 91       	pop	r22
    12e2:	5f 91       	pop	r21
    12e4:	4f 91       	pop	r20
    12e6:	3f 91       	pop	r19
    12e8:	2f 91       	pop	r18
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	0f 90       	pop	r0
    12f0:	1f 90       	pop	r1
    12f2:	18 95       	reti

000012f4 <__vector_13>:
    12f4:	1f 92       	push	r1
    12f6:	0f 92       	push	r0
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	0f 92       	push	r0
    12fc:	11 24       	eor	r1, r1
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	ef 93       	push	r30
    1314:	ff 93       	push	r31
    1316:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    131a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    131e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1322:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1326:	c9 01       	movw	r24, r18
    1328:	03 2e       	mov	r0, r19
    132a:	00 0c       	add	r0, r0
    132c:	aa 0b       	sbc	r26, r26
    132e:	bb 0b       	sbc	r27, r27
    1330:	dc 01       	movw	r26, r24
    1332:	99 27       	eor	r25, r25
    1334:	88 27       	eor	r24, r24
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	84 2b       	or	r24, r20
    133c:	95 2b       	or	r25, r21
    133e:	a6 2b       	or	r26, r22
    1340:	b7 2b       	or	r27, r23
    1342:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1346:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    134a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    134e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1352:	b0 9b       	sbis	0x16, 0	; 22
    1354:	1b c0       	rjmp	.+54     	; 0x138c <__vector_13+0x98>
    1356:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    135a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    135e:	c9 01       	movw	r24, r18
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	09 2e       	mov	r0, r25
    1364:	00 0c       	add	r0, r0
    1366:	aa 0b       	sbc	r26, r26
    1368:	bb 0b       	sbc	r27, r27
    136a:	dc 01       	movw	r26, r24
    136c:	99 27       	eor	r25, r25
    136e:	88 27       	eor	r24, r24
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	84 2b       	or	r24, r20
    1376:	95 2b       	or	r25, r21
    1378:	a6 2b       	or	r26, r22
    137a:	b7 2b       	or	r27, r23
    137c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1380:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1384:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1388:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    138c:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x10>
    1390:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x11>
    1394:	30 97       	sbiw	r30, 0x00	; 0
    1396:	39 f0       	breq	.+14     	; 0x13a6 <__vector_13+0xb2>
    1398:	68 e0       	ldi	r22, 0x08	; 8
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x10>
    13a0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x11>
    13a4:	09 95       	icall
    13a6:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    13aa:	ff 91       	pop	r31
    13ac:	ef 91       	pop	r30
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	7f 91       	pop	r23
    13b8:	6f 91       	pop	r22
    13ba:	5f 91       	pop	r21
    13bc:	4f 91       	pop	r20
    13be:	3f 91       	pop	r19
    13c0:	2f 91       	pop	r18
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <__vector_14>:
    13cc:	1f 92       	push	r1
    13ce:	0f 92       	push	r0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	6f 93       	push	r22
    13e0:	7f 93       	push	r23
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
    13ee:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    13f2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    13f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13fe:	c9 01       	movw	r24, r18
    1400:	03 2e       	mov	r0, r19
    1402:	00 0c       	add	r0, r0
    1404:	aa 0b       	sbc	r26, r26
    1406:	bb 0b       	sbc	r27, r27
    1408:	dc 01       	movw	r26, r24
    140a:	99 27       	eor	r25, r25
    140c:	88 27       	eor	r24, r24
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	84 2b       	or	r24, r20
    1414:	95 2b       	or	r25, r21
    1416:	a6 2b       	or	r26, r22
    1418:	b7 2b       	or	r27, r23
    141a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    141e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1422:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1426:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    142a:	b0 9b       	sbis	0x16, 0	; 22
    142c:	1b c0       	rjmp	.+54     	; 0x1464 <__vector_14+0x98>
    142e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1432:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1436:	c9 01       	movw	r24, r18
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	09 2e       	mov	r0, r25
    143c:	00 0c       	add	r0, r0
    143e:	aa 0b       	sbc	r26, r26
    1440:	bb 0b       	sbc	r27, r27
    1442:	dc 01       	movw	r26, r24
    1444:	99 27       	eor	r25, r25
    1446:	88 27       	eor	r24, r24
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	84 2b       	or	r24, r20
    144e:	95 2b       	or	r25, r21
    1450:	a6 2b       	or	r26, r22
    1452:	b7 2b       	or	r27, r23
    1454:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1458:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    145c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1460:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1464:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x12>
    1468:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x13>
    146c:	30 97       	sbiw	r30, 0x00	; 0
    146e:	39 f0       	breq	.+14     	; 0x147e <__vector_14+0xb2>
    1470:	69 e0       	ldi	r22, 0x09	; 9
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x12>
    1478:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x13>
    147c:	09 95       	icall
    147e:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <__vector_15>:
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	2f 93       	push	r18
    14b0:	3f 93       	push	r19
    14b2:	4f 93       	push	r20
    14b4:	5f 93       	push	r21
    14b6:	6f 93       	push	r22
    14b8:	7f 93       	push	r23
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
    14c6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    14ca:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    14ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14d6:	c9 01       	movw	r24, r18
    14d8:	03 2e       	mov	r0, r19
    14da:	00 0c       	add	r0, r0
    14dc:	aa 0b       	sbc	r26, r26
    14de:	bb 0b       	sbc	r27, r27
    14e0:	dc 01       	movw	r26, r24
    14e2:	99 27       	eor	r25, r25
    14e4:	88 27       	eor	r24, r24
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	84 2b       	or	r24, r20
    14ec:	95 2b       	or	r25, r21
    14ee:	a6 2b       	or	r26, r22
    14f0:	b7 2b       	or	r27, r23
    14f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    14f6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    14fa:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    14fe:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1502:	b0 9b       	sbis	0x16, 0	; 22
    1504:	1b c0       	rjmp	.+54     	; 0x153c <__vector_15+0x98>
    1506:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    150a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    150e:	c9 01       	movw	r24, r18
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	09 2e       	mov	r0, r25
    1514:	00 0c       	add	r0, r0
    1516:	aa 0b       	sbc	r26, r26
    1518:	bb 0b       	sbc	r27, r27
    151a:	dc 01       	movw	r26, r24
    151c:	99 27       	eor	r25, r25
    151e:	88 27       	eor	r24, r24
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	84 2b       	or	r24, r20
    1526:	95 2b       	or	r25, r21
    1528:	a6 2b       	or	r26, r22
    152a:	b7 2b       	or	r27, r23
    152c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1530:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1534:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1538:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    153c:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0x14>
    1540:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x15>
    1544:	30 97       	sbiw	r30, 0x00	; 0
    1546:	39 f0       	breq	.+14     	; 0x1556 <__vector_15+0xb2>
    1548:	6a e0       	ldi	r22, 0x0A	; 10
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0x14>
    1550:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x15>
    1554:	09 95       	icall
    1556:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	9f 91       	pop	r25
    1564:	8f 91       	pop	r24
    1566:	7f 91       	pop	r23
    1568:	6f 91       	pop	r22
    156a:	5f 91       	pop	r21
    156c:	4f 91       	pop	r20
    156e:	3f 91       	pop	r19
    1570:	2f 91       	pop	r18
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	0f 90       	pop	r0
    1578:	1f 90       	pop	r1
    157a:	18 95       	reti

0000157c <__vector_16>:
    157c:	1f 92       	push	r1
    157e:	0f 92       	push	r0
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	0f 92       	push	r0
    1584:	11 24       	eor	r1, r1
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
    159c:	ff 93       	push	r31
    159e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    15a2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    15a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15ae:	c9 01       	movw	r24, r18
    15b0:	03 2e       	mov	r0, r19
    15b2:	00 0c       	add	r0, r0
    15b4:	aa 0b       	sbc	r26, r26
    15b6:	bb 0b       	sbc	r27, r27
    15b8:	dc 01       	movw	r26, r24
    15ba:	99 27       	eor	r25, r25
    15bc:	88 27       	eor	r24, r24
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	84 2b       	or	r24, r20
    15c4:	95 2b       	or	r25, r21
    15c6:	a6 2b       	or	r26, r22
    15c8:	b7 2b       	or	r27, r23
    15ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    15ce:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    15d2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    15d6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    15da:	b0 9b       	sbis	0x16, 0	; 22
    15dc:	1b c0       	rjmp	.+54     	; 0x1614 <__vector_16+0x98>
    15de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15e6:	c9 01       	movw	r24, r18
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	09 2e       	mov	r0, r25
    15ec:	00 0c       	add	r0, r0
    15ee:	aa 0b       	sbc	r26, r26
    15f0:	bb 0b       	sbc	r27, r27
    15f2:	dc 01       	movw	r26, r24
    15f4:	99 27       	eor	r25, r25
    15f6:	88 27       	eor	r24, r24
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	84 2b       	or	r24, r20
    15fe:	95 2b       	or	r25, r21
    1600:	a6 2b       	or	r26, r22
    1602:	b7 2b       	or	r27, r23
    1604:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1608:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    160c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1610:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1614:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x16>
    1618:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x17>
    161c:	30 97       	sbiw	r30, 0x00	; 0
    161e:	39 f0       	breq	.+14     	; 0x162e <__vector_16+0xb2>
    1620:	6b e0       	ldi	r22, 0x0B	; 11
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x16>
    1628:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x17>
    162c:	09 95       	icall
    162e:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    1632:	ff 91       	pop	r31
    1634:	ef 91       	pop	r30
    1636:	bf 91       	pop	r27
    1638:	af 91       	pop	r26
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	7f 91       	pop	r23
    1640:	6f 91       	pop	r22
    1642:	5f 91       	pop	r21
    1644:	4f 91       	pop	r20
    1646:	3f 91       	pop	r19
    1648:	2f 91       	pop	r18
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <__vector_17>:
    1654:	1f 92       	push	r1
    1656:	0f 92       	push	r0
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	0f 92       	push	r0
    165c:	11 24       	eor	r1, r1
    165e:	2f 93       	push	r18
    1660:	3f 93       	push	r19
    1662:	4f 93       	push	r20
    1664:	5f 93       	push	r21
    1666:	6f 93       	push	r22
    1668:	7f 93       	push	r23
    166a:	8f 93       	push	r24
    166c:	9f 93       	push	r25
    166e:	af 93       	push	r26
    1670:	bf 93       	push	r27
    1672:	ef 93       	push	r30
    1674:	ff 93       	push	r31
    1676:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    167a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    167e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1682:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1686:	c9 01       	movw	r24, r18
    1688:	03 2e       	mov	r0, r19
    168a:	00 0c       	add	r0, r0
    168c:	aa 0b       	sbc	r26, r26
    168e:	bb 0b       	sbc	r27, r27
    1690:	dc 01       	movw	r26, r24
    1692:	99 27       	eor	r25, r25
    1694:	88 27       	eor	r24, r24
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	84 2b       	or	r24, r20
    169c:	95 2b       	or	r25, r21
    169e:	a6 2b       	or	r26, r22
    16a0:	b7 2b       	or	r27, r23
    16a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    16a6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    16aa:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    16ae:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    16b2:	b0 9b       	sbis	0x16, 0	; 22
    16b4:	1b c0       	rjmp	.+54     	; 0x16ec <__vector_17+0x98>
    16b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16be:	c9 01       	movw	r24, r18
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	09 2e       	mov	r0, r25
    16c4:	00 0c       	add	r0, r0
    16c6:	aa 0b       	sbc	r26, r26
    16c8:	bb 0b       	sbc	r27, r27
    16ca:	dc 01       	movw	r26, r24
    16cc:	99 27       	eor	r25, r25
    16ce:	88 27       	eor	r24, r24
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	84 2b       	or	r24, r20
    16d6:	95 2b       	or	r25, r21
    16d8:	a6 2b       	or	r26, r22
    16da:	b7 2b       	or	r27, r23
    16dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    16e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    16e4:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    16e8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    16ec:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x18>
    16f0:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x19>
    16f4:	30 97       	sbiw	r30, 0x00	; 0
    16f6:	39 f0       	breq	.+14     	; 0x1706 <__vector_17+0xb2>
    16f8:	6c e0       	ldi	r22, 0x0C	; 12
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x18>
    1700:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x19>
    1704:	09 95       	icall
    1706:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    170a:	ff 91       	pop	r31
    170c:	ef 91       	pop	r30
    170e:	bf 91       	pop	r27
    1710:	af 91       	pop	r26
    1712:	9f 91       	pop	r25
    1714:	8f 91       	pop	r24
    1716:	7f 91       	pop	r23
    1718:	6f 91       	pop	r22
    171a:	5f 91       	pop	r21
    171c:	4f 91       	pop	r20
    171e:	3f 91       	pop	r19
    1720:	2f 91       	pop	r18
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	0f 90       	pop	r0
    1728:	1f 90       	pop	r1
    172a:	18 95       	reti

0000172c <__vector_18>:
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	0f 92       	push	r0
    1734:	11 24       	eor	r1, r1
    1736:	2f 93       	push	r18
    1738:	3f 93       	push	r19
    173a:	4f 93       	push	r20
    173c:	5f 93       	push	r21
    173e:	6f 93       	push	r22
    1740:	7f 93       	push	r23
    1742:	8f 93       	push	r24
    1744:	9f 93       	push	r25
    1746:	af 93       	push	r26
    1748:	bf 93       	push	r27
    174a:	ef 93       	push	r30
    174c:	ff 93       	push	r31
    174e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1752:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1756:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    175a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    175e:	c9 01       	movw	r24, r18
    1760:	03 2e       	mov	r0, r19
    1762:	00 0c       	add	r0, r0
    1764:	aa 0b       	sbc	r26, r26
    1766:	bb 0b       	sbc	r27, r27
    1768:	dc 01       	movw	r26, r24
    176a:	99 27       	eor	r25, r25
    176c:	88 27       	eor	r24, r24
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	84 2b       	or	r24, r20
    1774:	95 2b       	or	r25, r21
    1776:	a6 2b       	or	r26, r22
    1778:	b7 2b       	or	r27, r23
    177a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    177e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1782:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1786:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    178a:	b0 9b       	sbis	0x16, 0	; 22
    178c:	1b c0       	rjmp	.+54     	; 0x17c4 <__vector_18+0x98>
    178e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1792:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1796:	c9 01       	movw	r24, r18
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	09 2e       	mov	r0, r25
    179c:	00 0c       	add	r0, r0
    179e:	aa 0b       	sbc	r26, r26
    17a0:	bb 0b       	sbc	r27, r27
    17a2:	dc 01       	movw	r26, r24
    17a4:	99 27       	eor	r25, r25
    17a6:	88 27       	eor	r24, r24
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	84 2b       	or	r24, r20
    17ae:	95 2b       	or	r25, r21
    17b0:	a6 2b       	or	r26, r22
    17b2:	b7 2b       	or	r27, r23
    17b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    17b8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    17bc:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    17c0:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    17c4:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x1a>
    17c8:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x1b>
    17cc:	30 97       	sbiw	r30, 0x00	; 0
    17ce:	39 f0       	breq	.+14     	; 0x17de <__vector_18+0xb2>
    17d0:	6d e0       	ldi	r22, 0x0D	; 13
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x1a>
    17d8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x1b>
    17dc:	09 95       	icall
    17de:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    17e2:	ff 91       	pop	r31
    17e4:	ef 91       	pop	r30
    17e6:	bf 91       	pop	r27
    17e8:	af 91       	pop	r26
    17ea:	9f 91       	pop	r25
    17ec:	8f 91       	pop	r24
    17ee:	7f 91       	pop	r23
    17f0:	6f 91       	pop	r22
    17f2:	5f 91       	pop	r21
    17f4:	4f 91       	pop	r20
    17f6:	3f 91       	pop	r19
    17f8:	2f 91       	pop	r18
    17fa:	0f 90       	pop	r0
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	0f 90       	pop	r0
    1800:	1f 90       	pop	r1
    1802:	18 95       	reti

00001804 <__vector_19>:
    1804:	1f 92       	push	r1
    1806:	0f 92       	push	r0
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	0f 92       	push	r0
    180c:	11 24       	eor	r1, r1
    180e:	2f 93       	push	r18
    1810:	3f 93       	push	r19
    1812:	4f 93       	push	r20
    1814:	5f 93       	push	r21
    1816:	6f 93       	push	r22
    1818:	7f 93       	push	r23
    181a:	8f 93       	push	r24
    181c:	9f 93       	push	r25
    181e:	af 93       	push	r26
    1820:	bf 93       	push	r27
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
    1826:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    182a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    182e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1832:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1836:	c9 01       	movw	r24, r18
    1838:	03 2e       	mov	r0, r19
    183a:	00 0c       	add	r0, r0
    183c:	aa 0b       	sbc	r26, r26
    183e:	bb 0b       	sbc	r27, r27
    1840:	dc 01       	movw	r26, r24
    1842:	99 27       	eor	r25, r25
    1844:	88 27       	eor	r24, r24
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	84 2b       	or	r24, r20
    184c:	95 2b       	or	r25, r21
    184e:	a6 2b       	or	r26, r22
    1850:	b7 2b       	or	r27, r23
    1852:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1856:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    185a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    185e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1862:	b0 9b       	sbis	0x16, 0	; 22
    1864:	1b c0       	rjmp	.+54     	; 0x189c <__vector_19+0x98>
    1866:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    186a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    186e:	c9 01       	movw	r24, r18
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	09 2e       	mov	r0, r25
    1874:	00 0c       	add	r0, r0
    1876:	aa 0b       	sbc	r26, r26
    1878:	bb 0b       	sbc	r27, r27
    187a:	dc 01       	movw	r26, r24
    187c:	99 27       	eor	r25, r25
    187e:	88 27       	eor	r24, r24
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	84 2b       	or	r24, r20
    1886:	95 2b       	or	r25, r21
    1888:	a6 2b       	or	r26, r22
    188a:	b7 2b       	or	r27, r23
    188c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1890:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1894:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1898:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    189c:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x1c>
    18a0:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x1d>
    18a4:	30 97       	sbiw	r30, 0x00	; 0
    18a6:	39 f0       	breq	.+14     	; 0x18b6 <__vector_19+0xb2>
    18a8:	6e e0       	ldi	r22, 0x0E	; 14
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x1c>
    18b0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x1d>
    18b4:	09 95       	icall
    18b6:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    18ba:	ff 91       	pop	r31
    18bc:	ef 91       	pop	r30
    18be:	bf 91       	pop	r27
    18c0:	af 91       	pop	r26
    18c2:	9f 91       	pop	r25
    18c4:	8f 91       	pop	r24
    18c6:	7f 91       	pop	r23
    18c8:	6f 91       	pop	r22
    18ca:	5f 91       	pop	r21
    18cc:	4f 91       	pop	r20
    18ce:	3f 91       	pop	r19
    18d0:	2f 91       	pop	r18
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	0f 90       	pop	r0
    18d8:	1f 90       	pop	r1
    18da:	18 95       	reti

000018dc <__vector_20>:
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
    18fe:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1902:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1906:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    190a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    190e:	c9 01       	movw	r24, r18
    1910:	03 2e       	mov	r0, r19
    1912:	00 0c       	add	r0, r0
    1914:	aa 0b       	sbc	r26, r26
    1916:	bb 0b       	sbc	r27, r27
    1918:	dc 01       	movw	r26, r24
    191a:	99 27       	eor	r25, r25
    191c:	88 27       	eor	r24, r24
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	84 2b       	or	r24, r20
    1924:	95 2b       	or	r25, r21
    1926:	a6 2b       	or	r26, r22
    1928:	b7 2b       	or	r27, r23
    192a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    192e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1932:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1936:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    193a:	b0 9b       	sbis	0x16, 0	; 22
    193c:	1b c0       	rjmp	.+54     	; 0x1974 <__vector_20+0x98>
    193e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1942:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1946:	c9 01       	movw	r24, r18
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	09 2e       	mov	r0, r25
    194c:	00 0c       	add	r0, r0
    194e:	aa 0b       	sbc	r26, r26
    1950:	bb 0b       	sbc	r27, r27
    1952:	dc 01       	movw	r26, r24
    1954:	99 27       	eor	r25, r25
    1956:	88 27       	eor	r24, r24
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	84 2b       	or	r24, r20
    195e:	95 2b       	or	r25, r21
    1960:	a6 2b       	or	r26, r22
    1962:	b7 2b       	or	r27, r23
    1964:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1968:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    196c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1970:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1974:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x1e>
    1978:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x1f>
    197c:	30 97       	sbiw	r30, 0x00	; 0
    197e:	39 f0       	breq	.+14     	; 0x198e <__vector_20+0xb2>
    1980:	6f e0       	ldi	r22, 0x0F	; 15
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x1e>
    1988:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x1f>
    198c:	09 95       	icall
    198e:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    1992:	ff 91       	pop	r31
    1994:	ef 91       	pop	r30
    1996:	bf 91       	pop	r27
    1998:	af 91       	pop	r26
    199a:	9f 91       	pop	r25
    199c:	8f 91       	pop	r24
    199e:	7f 91       	pop	r23
    19a0:	6f 91       	pop	r22
    19a2:	5f 91       	pop	r21
    19a4:	4f 91       	pop	r20
    19a6:	3f 91       	pop	r19
    19a8:	2f 91       	pop	r18
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	0f 90       	pop	r0
    19b0:	1f 90       	pop	r1
    19b2:	18 95       	reti

000019b4 <__vector_21>:
    19b4:	1f 92       	push	r1
    19b6:	0f 92       	push	r0
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	0f 92       	push	r0
    19bc:	11 24       	eor	r1, r1
    19be:	2f 93       	push	r18
    19c0:	3f 93       	push	r19
    19c2:	4f 93       	push	r20
    19c4:	5f 93       	push	r21
    19c6:	6f 93       	push	r22
    19c8:	7f 93       	push	r23
    19ca:	8f 93       	push	r24
    19cc:	9f 93       	push	r25
    19ce:	af 93       	push	r26
    19d0:	bf 93       	push	r27
    19d2:	ef 93       	push	r30
    19d4:	ff 93       	push	r31
    19d6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    19da:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    19de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19e6:	c9 01       	movw	r24, r18
    19e8:	03 2e       	mov	r0, r19
    19ea:	00 0c       	add	r0, r0
    19ec:	aa 0b       	sbc	r26, r26
    19ee:	bb 0b       	sbc	r27, r27
    19f0:	dc 01       	movw	r26, r24
    19f2:	99 27       	eor	r25, r25
    19f4:	88 27       	eor	r24, r24
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	84 2b       	or	r24, r20
    19fc:	95 2b       	or	r25, r21
    19fe:	a6 2b       	or	r26, r22
    1a00:	b7 2b       	or	r27, r23
    1a02:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1a06:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1a0a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1a0e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1a12:	b0 9b       	sbis	0x16, 0	; 22
    1a14:	1b c0       	rjmp	.+54     	; 0x1a4c <__vector_21+0x98>
    1a16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a1e:	c9 01       	movw	r24, r18
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	09 2e       	mov	r0, r25
    1a24:	00 0c       	add	r0, r0
    1a26:	aa 0b       	sbc	r26, r26
    1a28:	bb 0b       	sbc	r27, r27
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	99 27       	eor	r25, r25
    1a2e:	88 27       	eor	r24, r24
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	84 2b       	or	r24, r20
    1a36:	95 2b       	or	r25, r21
    1a38:	a6 2b       	or	r26, r22
    1a3a:	b7 2b       	or	r27, r23
    1a3c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1a40:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1a44:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1a48:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1a4c:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x20>
    1a50:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x21>
    1a54:	30 97       	sbiw	r30, 0x00	; 0
    1a56:	39 f0       	breq	.+14     	; 0x1a66 <__vector_21+0xb2>
    1a58:	60 e1       	ldi	r22, 0x10	; 16
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x20>
    1a60:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x21>
    1a64:	09 95       	icall
    1a66:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_22>:
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	2f 93       	push	r18
    1a98:	3f 93       	push	r19
    1a9a:	4f 93       	push	r20
    1a9c:	5f 93       	push	r21
    1a9e:	6f 93       	push	r22
    1aa0:	7f 93       	push	r23
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	af 93       	push	r26
    1aa8:	bf 93       	push	r27
    1aaa:	ef 93       	push	r30
    1aac:	ff 93       	push	r31
    1aae:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1ab2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1ab6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1abe:	c9 01       	movw	r24, r18
    1ac0:	03 2e       	mov	r0, r19
    1ac2:	00 0c       	add	r0, r0
    1ac4:	aa 0b       	sbc	r26, r26
    1ac6:	bb 0b       	sbc	r27, r27
    1ac8:	dc 01       	movw	r26, r24
    1aca:	99 27       	eor	r25, r25
    1acc:	88 27       	eor	r24, r24
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	84 2b       	or	r24, r20
    1ad4:	95 2b       	or	r25, r21
    1ad6:	a6 2b       	or	r26, r22
    1ad8:	b7 2b       	or	r27, r23
    1ada:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1ade:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1ae2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1ae6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1aea:	b0 9b       	sbis	0x16, 0	; 22
    1aec:	1b c0       	rjmp	.+54     	; 0x1b24 <__vector_22+0x98>
    1aee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1af2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1af6:	c9 01       	movw	r24, r18
    1af8:	01 96       	adiw	r24, 0x01	; 1
    1afa:	09 2e       	mov	r0, r25
    1afc:	00 0c       	add	r0, r0
    1afe:	aa 0b       	sbc	r26, r26
    1b00:	bb 0b       	sbc	r27, r27
    1b02:	dc 01       	movw	r26, r24
    1b04:	99 27       	eor	r25, r25
    1b06:	88 27       	eor	r24, r24
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	84 2b       	or	r24, r20
    1b0e:	95 2b       	or	r25, r21
    1b10:	a6 2b       	or	r26, r22
    1b12:	b7 2b       	or	r27, r23
    1b14:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1b18:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1b1c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1b20:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1b24:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0x22>
    1b28:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0x23>
    1b2c:	30 97       	sbiw	r30, 0x00	; 0
    1b2e:	39 f0       	breq	.+14     	; 0x1b3e <__vector_22+0xb2>
    1b30:	61 e1       	ldi	r22, 0x11	; 17
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0x22>
    1b38:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0x23>
    1b3c:	09 95       	icall
    1b3e:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    1b42:	ff 91       	pop	r31
    1b44:	ef 91       	pop	r30
    1b46:	bf 91       	pop	r27
    1b48:	af 91       	pop	r26
    1b4a:	9f 91       	pop	r25
    1b4c:	8f 91       	pop	r24
    1b4e:	7f 91       	pop	r23
    1b50:	6f 91       	pop	r22
    1b52:	5f 91       	pop	r21
    1b54:	4f 91       	pop	r20
    1b56:	3f 91       	pop	r19
    1b58:	2f 91       	pop	r18
    1b5a:	0f 90       	pop	r0
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	0f 90       	pop	r0
    1b60:	1f 90       	pop	r1
    1b62:	18 95       	reti

00001b64 <enqueueByDeadline>:
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	7b 01       	movw	r14, r22
    1b72:	eb 01       	movw	r28, r22
    1b74:	a8 81       	ld	r26, Y
    1b76:	b9 81       	ldd	r27, Y+1	; 0x01
    1b78:	10 97       	sbiw	r26, 0x00	; 0
    1b7a:	61 f1       	breq	.+88     	; 0x1bd4 <enqueueByDeadline+0x70>
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	06 81       	ldd	r16, Z+6	; 0x06
    1b80:	17 81       	ldd	r17, Z+7	; 0x07
    1b82:	20 85       	ldd	r18, Z+8	; 0x08
    1b84:	31 85       	ldd	r19, Z+9	; 0x09
    1b86:	16 96       	adiw	r26, 0x06	; 6
    1b88:	4d 91       	ld	r20, X+
    1b8a:	5d 91       	ld	r21, X+
    1b8c:	6d 91       	ld	r22, X+
    1b8e:	7c 91       	ld	r23, X
    1b90:	19 97       	sbiw	r26, 0x09	; 9
    1b92:	04 17       	cp	r16, r20
    1b94:	15 07       	cpc	r17, r21
    1b96:	26 07       	cpc	r18, r22
    1b98:	37 07       	cpc	r19, r23
    1b9a:	14 f4       	brge	.+4      	; 0x1ba0 <enqueueByDeadline+0x3c>
    1b9c:	1b c0       	rjmp	.+54     	; 0x1bd4 <enqueueByDeadline+0x70>
    1b9e:	df 01       	movw	r26, r30
    1ba0:	ed 91       	ld	r30, X+
    1ba2:	fc 91       	ld	r31, X
    1ba4:	11 97       	sbiw	r26, 0x01	; 1
    1ba6:	30 97       	sbiw	r30, 0x00	; 0
    1ba8:	49 f0       	breq	.+18     	; 0x1bbc <enqueueByDeadline+0x58>
    1baa:	46 81       	ldd	r20, Z+6	; 0x06
    1bac:	57 81       	ldd	r21, Z+7	; 0x07
    1bae:	60 85       	ldd	r22, Z+8	; 0x08
    1bb0:	71 85       	ldd	r23, Z+9	; 0x09
    1bb2:	04 17       	cp	r16, r20
    1bb4:	15 07       	cpc	r17, r21
    1bb6:	26 07       	cpc	r18, r22
    1bb8:	37 07       	cpc	r19, r23
    1bba:	8c f7       	brge	.-30     	; 0x1b9e <enqueueByDeadline+0x3a>
    1bbc:	ec 01       	movw	r28, r24
    1bbe:	f9 83       	std	Y+1, r31	; 0x01
    1bc0:	e8 83       	st	Y, r30
    1bc2:	10 97       	sbiw	r26, 0x00	; 0
    1bc4:	21 f4       	brne	.+8      	; 0x1bce <enqueueByDeadline+0x6a>
    1bc6:	f7 01       	movw	r30, r14
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    1bcc:	07 c0       	rjmp	.+14     	; 0x1bdc <enqueueByDeadline+0x78>
    1bce:	8d 93       	st	X+, r24
    1bd0:	9c 93       	st	X, r25
    1bd2:	04 c0       	rjmp	.+8      	; 0x1bdc <enqueueByDeadline+0x78>
    1bd4:	ec 01       	movw	r28, r24
    1bd6:	b9 83       	std	Y+1, r27	; 0x01
    1bd8:	a8 83       	st	Y, r26
    1bda:	f5 cf       	rjmp	.-22     	; 0x1bc6 <enqueueByDeadline+0x62>
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	08 95       	ret

00001bea <enqueueByBaseline>:
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	7b 01       	movw	r14, r22
    1bf8:	eb 01       	movw	r28, r22
    1bfa:	a8 81       	ld	r26, Y
    1bfc:	b9 81       	ldd	r27, Y+1	; 0x01
    1bfe:	10 97       	sbiw	r26, 0x00	; 0
    1c00:	61 f1       	breq	.+88     	; 0x1c5a <enqueueByBaseline+0x70>
    1c02:	fc 01       	movw	r30, r24
    1c04:	02 81       	ldd	r16, Z+2	; 0x02
    1c06:	13 81       	ldd	r17, Z+3	; 0x03
    1c08:	24 81       	ldd	r18, Z+4	; 0x04
    1c0a:	35 81       	ldd	r19, Z+5	; 0x05
    1c0c:	12 96       	adiw	r26, 0x02	; 2
    1c0e:	4d 91       	ld	r20, X+
    1c10:	5d 91       	ld	r21, X+
    1c12:	6d 91       	ld	r22, X+
    1c14:	7c 91       	ld	r23, X
    1c16:	15 97       	sbiw	r26, 0x05	; 5
    1c18:	04 17       	cp	r16, r20
    1c1a:	15 07       	cpc	r17, r21
    1c1c:	26 07       	cpc	r18, r22
    1c1e:	37 07       	cpc	r19, r23
    1c20:	14 f4       	brge	.+4      	; 0x1c26 <enqueueByBaseline+0x3c>
    1c22:	1b c0       	rjmp	.+54     	; 0x1c5a <enqueueByBaseline+0x70>
    1c24:	df 01       	movw	r26, r30
    1c26:	ed 91       	ld	r30, X+
    1c28:	fc 91       	ld	r31, X
    1c2a:	11 97       	sbiw	r26, 0x01	; 1
    1c2c:	30 97       	sbiw	r30, 0x00	; 0
    1c2e:	49 f0       	breq	.+18     	; 0x1c42 <enqueueByBaseline+0x58>
    1c30:	42 81       	ldd	r20, Z+2	; 0x02
    1c32:	53 81       	ldd	r21, Z+3	; 0x03
    1c34:	64 81       	ldd	r22, Z+4	; 0x04
    1c36:	75 81       	ldd	r23, Z+5	; 0x05
    1c38:	04 17       	cp	r16, r20
    1c3a:	15 07       	cpc	r17, r21
    1c3c:	26 07       	cpc	r18, r22
    1c3e:	37 07       	cpc	r19, r23
    1c40:	8c f7       	brge	.-30     	; 0x1c24 <enqueueByBaseline+0x3a>
    1c42:	ec 01       	movw	r28, r24
    1c44:	f9 83       	std	Y+1, r31	; 0x01
    1c46:	e8 83       	st	Y, r30
    1c48:	10 97       	sbiw	r26, 0x00	; 0
    1c4a:	21 f4       	brne	.+8      	; 0x1c54 <enqueueByBaseline+0x6a>
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24
    1c52:	07 c0       	rjmp	.+14     	; 0x1c62 <enqueueByBaseline+0x78>
    1c54:	8d 93       	st	X+, r24
    1c56:	9c 93       	st	X, r25
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <enqueueByBaseline+0x78>
    1c5a:	ec 01       	movw	r28, r24
    1c5c:	b9 83       	std	Y+1, r27	; 0x01
    1c5e:	a8 83       	st	Y, r26
    1c60:	f5 cf       	rjmp	.-22     	; 0x1c4c <enqueueByBaseline+0x62>
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	ff 90       	pop	r15
    1c6c:	ef 90       	pop	r14
    1c6e:	08 95       	ret

00001c70 <dequeue>:
    1c70:	dc 01       	movw	r26, r24
    1c72:	ed 91       	ld	r30, X+
    1c74:	fc 91       	ld	r31, X
    1c76:	11 97       	sbiw	r26, 0x01	; 1
    1c78:	30 97       	sbiw	r30, 0x00	; 0
    1c7a:	59 f4       	brne	.+22     	; 0x1c92 <dequeue+0x22>
    1c7c:	8f ef       	ldi	r24, 0xFF	; 255
    1c7e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1c82:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1c86:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	83 bf       	out	0x33, r24	; 51
    1c8e:	88 95       	sleep
    1c90:	fd cf       	rjmp	.-6      	; 0x1c8c <dequeue+0x1c>
    1c92:	20 81       	ld	r18, Z
    1c94:	31 81       	ldd	r19, Z+1	; 0x01
    1c96:	2d 93       	st	X+, r18
    1c98:	3c 93       	st	X, r19
    1c9a:	cf 01       	movw	r24, r30
    1c9c:	08 95       	ret

00001c9e <__vector_9>:
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	2f 93       	push	r18
    1caa:	3f 93       	push	r19
    1cac:	4f 93       	push	r20
    1cae:	5f 93       	push	r21
    1cb0:	6f 93       	push	r22
    1cb2:	7f 93       	push	r23
    1cb4:	8f 93       	push	r24
    1cb6:	9f 93       	push	r25
    1cb8:	ef 93       	push	r30
    1cba:	ff 93       	push	r31
    1cbc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
    1cc0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
    1cca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
    1cce:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1cd2:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1cd6:	30 97       	sbiw	r30, 0x00	; 0
    1cd8:	01 f1       	breq	.+64     	; 0x1d1a <__vector_9+0x7c>
    1cda:	42 81       	ldd	r20, Z+2	; 0x02
    1cdc:	53 81       	ldd	r21, Z+3	; 0x03
    1cde:	64 81       	ldd	r22, Z+4	; 0x04
    1ce0:	75 81       	ldd	r23, Z+5	; 0x05
    1ce2:	86 17       	cp	r24, r22
    1ce4:	97 07       	cpc	r25, r23
    1ce6:	c9 f4       	brne	.+50     	; 0x1d1a <__vector_9+0x7c>
    1ce8:	ca 01       	movw	r24, r20
    1cea:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cee:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cf2:	42 1b       	sub	r20, r18
    1cf4:	53 0b       	sbc	r21, r19
    1cf6:	41 30       	cpi	r20, 0x01	; 1
    1cf8:	51 05       	cpc	r21, r1
    1cfa:	29 f4       	brne	.+10     	; 0x1d06 <__vector_9+0x68>
    1cfc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d00:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d0a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d0e:	ef e6       	ldi	r30, 0x6F	; 111
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	82 60       	ori	r24, 0x02	; 2
    1d16:	80 83       	st	Z, r24
    1d18:	05 c0       	rjmp	.+10     	; 0x1d24 <__vector_9+0x86>
    1d1a:	ef e6       	ldi	r30, 0x6F	; 111
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8d 7f       	andi	r24, 0xFD	; 253
    1d22:	80 83       	st	Z, r24
    1d24:	ff 91       	pop	r31
    1d26:	ef 91       	pop	r30
    1d28:	9f 91       	pop	r25
    1d2a:	8f 91       	pop	r24
    1d2c:	7f 91       	pop	r23
    1d2e:	6f 91       	pop	r22
    1d30:	5f 91       	pop	r21
    1d32:	4f 91       	pop	r20
    1d34:	3f 91       	pop	r19
    1d36:	2f 91       	pop	r18
    1d38:	0f 90       	pop	r0
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	0f 90       	pop	r0
    1d3e:	1f 90       	pop	r1
    1d40:	18 95       	reti

00001d42 <__vector_7>:
    1d42:	1f 92       	push	r1
    1d44:	0f 92       	push	r0
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	0f 92       	push	r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	2f 93       	push	r18
    1d56:	3f 93       	push	r19
    1d58:	4f 93       	push	r20
    1d5a:	5f 93       	push	r21
    1d5c:	6f 93       	push	r22
    1d5e:	7f 93       	push	r23
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	af 93       	push	r26
    1d66:	bf 93       	push	r27
    1d68:	ef 93       	push	r30
    1d6a:	ff 93       	push	r31
    1d6c:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <__data_end>
    1d70:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <__data_end+0x1>
    1d74:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d78:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d7c:	b0 99       	sbic	0x16, 0	; 22
    1d7e:	0f c0       	rjmp	.+30     	; 0x1d9e <__vector_7+0x5c>
    1d80:	0d 2c       	mov	r0, r13
    1d82:	00 0c       	add	r0, r0
    1d84:	ee 08       	sbc	r14, r14
    1d86:	ff 08       	sbc	r15, r15
    1d88:	d6 01       	movw	r26, r12
    1d8a:	99 27       	eor	r25, r25
    1d8c:	88 27       	eor	r24, r24
    1d8e:	69 01       	movw	r12, r18
    1d90:	e1 2c       	mov	r14, r1
    1d92:	f1 2c       	mov	r15, r1
    1d94:	c8 2a       	or	r12, r24
    1d96:	d9 2a       	or	r13, r25
    1d98:	ea 2a       	or	r14, r26
    1d9a:	fb 2a       	or	r15, r27
    1d9c:	15 c0       	rjmp	.+42     	; 0x1dc8 <__vector_7+0x86>
    1d9e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1da2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	c8 1a       	sub	r12, r24
    1daa:	d8 0a       	sbc	r13, r24
    1dac:	0d 2c       	mov	r0, r13
    1dae:	00 0c       	add	r0, r0
    1db0:	ee 08       	sbc	r14, r14
    1db2:	ff 08       	sbc	r15, r15
    1db4:	d6 01       	movw	r26, r12
    1db6:	99 27       	eor	r25, r25
    1db8:	88 27       	eor	r24, r24
    1dba:	69 01       	movw	r12, r18
    1dbc:	e1 2c       	mov	r14, r1
    1dbe:	f1 2c       	mov	r15, r1
    1dc0:	c8 2a       	or	r12, r24
    1dc2:	d9 2a       	or	r13, r25
    1dc4:	ea 2a       	or	r14, r26
    1dc6:	fb 2a       	or	r15, r27
    1dc8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1dcc:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1dd0:	30 97       	sbiw	r30, 0x00	; 0
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <__vector_7+0x94>
    1dd4:	42 c0       	rjmp	.+132    	; 0x1e5a <__vector_7+0x118>
    1dd6:	82 81       	ldd	r24, Z+2	; 0x02
    1dd8:	93 81       	ldd	r25, Z+3	; 0x03
    1dda:	a4 81       	ldd	r26, Z+4	; 0x04
    1ddc:	b5 81       	ldd	r27, Z+5	; 0x05
    1dde:	8c 19       	sub	r24, r12
    1de0:	9d 09       	sbc	r25, r13
    1de2:	ae 09       	sbc	r26, r14
    1de4:	bf 09       	sbc	r27, r15
    1de6:	18 16       	cp	r1, r24
    1de8:	19 06       	cpc	r1, r25
    1dea:	1a 06       	cpc	r1, r26
    1dec:	1b 06       	cpc	r1, r27
    1dee:	ec f1       	brlt	.+122    	; 0x1e6a <__vector_7+0x128>
    1df0:	8e e0       	ldi	r24, 0x0E	; 14
    1df2:	91 e0       	ldi	r25, 0x01	; 1
    1df4:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <dequeue>
    1df8:	60 e1       	ldi	r22, 0x10	; 16
    1dfa:	71 e0       	ldi	r23, 0x01	; 1
    1dfc:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <enqueueByDeadline>
    1e00:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1e04:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1e08:	30 97       	sbiw	r30, 0x00	; 0
    1e0a:	39 f1       	breq	.+78     	; 0x1e5a <__vector_7+0x118>
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	a4 81       	ldd	r26, Z+4	; 0x04
    1e12:	b5 81       	ldd	r27, Z+5	; 0x05
    1e14:	8c 19       	sub	r24, r12
    1e16:	9d 09       	sbc	r25, r13
    1e18:	ae 09       	sbc	r26, r14
    1e1a:	bf 09       	sbc	r27, r15
    1e1c:	18 16       	cp	r1, r24
    1e1e:	19 06       	cpc	r1, r25
    1e20:	1a 06       	cpc	r1, r26
    1e22:	1b 06       	cpc	r1, r27
    1e24:	2c f7       	brge	.-54     	; 0x1df0 <__vector_7+0xae>
    1e26:	21 c0       	rjmp	.+66     	; 0x1e6a <__vector_7+0x128>
    1e28:	9c 01       	movw	r18, r24
    1e2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e32:	84 1b       	sub	r24, r20
    1e34:	95 0b       	sbc	r25, r21
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	31 f4       	brne	.+12     	; 0x1e46 <__vector_7+0x104>
    1e3a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e3e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e42:	2f 5f       	subi	r18, 0xFF	; 255
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e4a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e4e:	ef e6       	ldi	r30, 0x6F	; 111
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	82 60       	ori	r24, 0x02	; 2
    1e56:	80 83       	st	Z, r24
    1e58:	05 c0       	rjmp	.+10     	; 0x1e64 <__vector_7+0x122>
    1e5a:	ef e6       	ldi	r30, 0x6F	; 111
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	8d 7f       	andi	r24, 0xFD	; 253
    1e62:	80 83       	st	Z, r24
    1e64:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    1e68:	0c c0       	rjmp	.+24     	; 0x1e82 <__vector_7+0x140>
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	a4 81       	ldd	r26, Z+4	; 0x04
    1e70:	b5 81       	ldd	r27, Z+5	; 0x05
    1e72:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1e76:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1e7a:	2a 17       	cp	r18, r26
    1e7c:	3b 07       	cpc	r19, r27
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <__vector_7+0x118>
    1e80:	d3 cf       	rjmp	.-90     	; 0x1e28 <__vector_7+0xe6>
    1e82:	ff 91       	pop	r31
    1e84:	ef 91       	pop	r30
    1e86:	bf 91       	pop	r27
    1e88:	af 91       	pop	r26
    1e8a:	9f 91       	pop	r25
    1e8c:	8f 91       	pop	r24
    1e8e:	7f 91       	pop	r23
    1e90:	6f 91       	pop	r22
    1e92:	5f 91       	pop	r21
    1e94:	4f 91       	pop	r20
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	0f 90       	pop	r0
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	0f 90       	pop	r0
    1ea8:	1f 90       	pop	r1
    1eaa:	18 95       	reti

00001eac <async>:
    1eac:	3f 92       	push	r3
    1eae:	4f 92       	push	r4
    1eb0:	5f 92       	push	r5
    1eb2:	6f 92       	push	r6
    1eb4:	7f 92       	push	r7
    1eb6:	8f 92       	push	r8
    1eb8:	9f 92       	push	r9
    1eba:	af 92       	push	r10
    1ebc:	bf 92       	push	r11
    1ebe:	cf 92       	push	r12
    1ec0:	df 92       	push	r13
    1ec2:	ef 92       	push	r14
    1ec4:	ff 92       	push	r15
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	2b 01       	movw	r4, r22
    1ed0:	3c 01       	movw	r6, r24
    1ed2:	49 01       	movw	r8, r18
    1ed4:	5a 01       	movw	r10, r20
    1ed6:	8f b7       	in	r24, 0x3f	; 63
    1ed8:	80 78       	andi	r24, 0x80	; 128
    1eda:	38 2e       	mov	r3, r24
    1edc:	f8 94       	cli
    1ede:	86 e0       	ldi	r24, 0x06	; 6
    1ee0:	91 e0       	ldi	r25, 0x01	; 1
    1ee2:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <dequeue>
    1ee6:	ec 01       	movw	r28, r24
    1ee8:	1b 87       	std	Y+11, r17	; 0x0b
    1eea:	0a 87       	std	Y+10, r16	; 0x0a
    1eec:	fd 86       	std	Y+13, r15	; 0x0d
    1eee:	ec 86       	std	Y+12, r14	; 0x0c
    1ef0:	df 86       	std	Y+15, r13	; 0x0f
    1ef2:	ce 86       	std	Y+14, r12	; 0x0e
    1ef4:	33 20       	and	r3, r3
    1ef6:	61 f0       	breq	.+24     	; 0x1f10 <async+0x64>
    1ef8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1efc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f00:	02 80       	ldd	r0, Z+2	; 0x02
    1f02:	f3 81       	ldd	r31, Z+3	; 0x03
    1f04:	e0 2d       	mov	r30, r0
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	a4 81       	ldd	r26, Z+4	; 0x04
    1f0c:	b5 81       	ldd	r27, Z+5	; 0x05
    1f0e:	08 c0       	rjmp	.+16     	; 0x1f20 <async+0x74>
    1f10:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timestamp>
    1f14:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timestamp+0x1>
    1f18:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <timestamp+0x2>
    1f1c:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <timestamp+0x3>
    1f20:	48 0e       	add	r4, r24
    1f22:	59 1e       	adc	r5, r25
    1f24:	6a 1e       	adc	r6, r26
    1f26:	7b 1e       	adc	r7, r27
    1f28:	4a 82       	std	Y+2, r4	; 0x02
    1f2a:	5b 82       	std	Y+3, r5	; 0x03
    1f2c:	6c 82       	std	Y+4, r6	; 0x04
    1f2e:	7d 82       	std	Y+5, r7	; 0x05
    1f30:	18 14       	cp	r1, r8
    1f32:	19 04       	cpc	r1, r9
    1f34:	1a 04       	cpc	r1, r10
    1f36:	1b 04       	cpc	r1, r11
    1f38:	44 f0       	brlt	.+16     	; 0x1f4a <async+0x9e>
    1f3a:	0f 2e       	mov	r0, r31
    1f3c:	88 24       	eor	r8, r8
    1f3e:	8a 94       	dec	r8
    1f40:	98 2c       	mov	r9, r8
    1f42:	a8 2c       	mov	r10, r8
    1f44:	ff e7       	ldi	r31, 0x7F	; 127
    1f46:	bf 2e       	mov	r11, r31
    1f48:	f0 2d       	mov	r31, r0
    1f4a:	84 0c       	add	r8, r4
    1f4c:	95 1c       	adc	r9, r5
    1f4e:	a6 1c       	adc	r10, r6
    1f50:	b7 1c       	adc	r11, r7
    1f52:	8e 82       	std	Y+6, r8	; 0x06
    1f54:	9f 82       	std	Y+7, r9	; 0x07
    1f56:	a8 86       	std	Y+8, r10	; 0x08
    1f58:	b9 86       	std	Y+9, r11	; 0x09
    1f5a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
    1f5e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
    1f62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f6a:	b0 99       	sbic	0x16, 0	; 22
    1f6c:	0e c0       	rjmp	.+28     	; 0x1f8a <async+0xde>
    1f6e:	09 2e       	mov	r0, r25
    1f70:	00 0c       	add	r0, r0
    1f72:	aa 0b       	sbc	r26, r26
    1f74:	bb 0b       	sbc	r27, r27
    1f76:	dc 01       	movw	r26, r24
    1f78:	99 27       	eor	r25, r25
    1f7a:	88 27       	eor	r24, r24
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	84 2b       	or	r24, r20
    1f82:	95 2b       	or	r25, r21
    1f84:	a6 2b       	or	r26, r22
    1f86:	b7 2b       	or	r27, r23
    1f88:	13 c0       	rjmp	.+38     	; 0x1fb0 <async+0x104>
    1f8a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f8e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	09 2e       	mov	r0, r25
    1f96:	00 0c       	add	r0, r0
    1f98:	aa 0b       	sbc	r26, r26
    1f9a:	bb 0b       	sbc	r27, r27
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	99 27       	eor	r25, r25
    1fa0:	88 27       	eor	r24, r24
    1fa2:	a9 01       	movw	r20, r18
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	84 2b       	or	r24, r20
    1faa:	95 2b       	or	r25, r21
    1fac:	a6 2b       	or	r26, r22
    1fae:	b7 2b       	or	r27, r23
    1fb0:	48 1a       	sub	r4, r24
    1fb2:	59 0a       	sbc	r5, r25
    1fb4:	6a 0a       	sbc	r6, r26
    1fb6:	7b 0a       	sbc	r7, r27
    1fb8:	14 14       	cp	r1, r4
    1fba:	15 04       	cpc	r1, r5
    1fbc:	16 04       	cpc	r1, r6
    1fbe:	17 04       	cpc	r1, r7
    1fc0:	ac f5       	brge	.+106    	; 0x202c <async+0x180>
    1fc2:	6e e0       	ldi	r22, 0x0E	; 14
    1fc4:	71 e0       	ldi	r23, 0x01	; 1
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <enqueueByBaseline>
    1fcc:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1fd0:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1fd4:	30 97       	sbiw	r30, 0x00	; 0
    1fd6:	21 f1       	breq	.+72     	; 0x2020 <async+0x174>
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	a4 81       	ldd	r26, Z+4	; 0x04
    1fde:	b5 81       	ldd	r27, Z+5	; 0x05
    1fe0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1fe4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1fe8:	2a 17       	cp	r18, r26
    1fea:	3b 07       	cpc	r19, r27
    1fec:	c9 f4       	brne	.+50     	; 0x2020 <async+0x174>
    1fee:	9c 01       	movw	r18, r24
    1ff0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ff4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ff8:	84 1b       	sub	r24, r20
    1ffa:	95 0b       	sbc	r25, r21
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	31 f4       	brne	.+12     	; 0x200c <async+0x160>
    2000:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2004:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2008:	2f 5f       	subi	r18, 0xFF	; 255
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    2010:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    2014:	ef e6       	ldi	r30, 0x6F	; 111
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	82 60       	ori	r24, 0x02	; 2
    201c:	80 83       	st	Z, r24
    201e:	41 c0       	rjmp	.+130    	; 0x20a2 <async+0x1f6>
    2020:	ef e6       	ldi	r30, 0x6F	; 111
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	8d 7f       	andi	r24, 0xFD	; 253
    2028:	80 83       	st	Z, r24
    202a:	3b c0       	rjmp	.+118    	; 0x20a2 <async+0x1f6>
    202c:	60 e1       	ldi	r22, 0x10	; 16
    202e:	71 e0       	ldi	r23, 0x01	; 1
    2030:	ce 01       	movw	r24, r28
    2032:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <enqueueByDeadline>
    2036:	33 20       	and	r3, r3
    2038:	b9 f1       	breq	.+110    	; 0x20a8 <async+0x1fc>
    203a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    203e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	81 f1       	breq	.+96     	; 0x20a6 <async+0x1fa>
    2046:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    204a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    204e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <msgQ>
    2052:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <msgQ+0x1>
    2056:	02 81       	ldd	r16, Z+2	; 0x02
    2058:	13 81       	ldd	r17, Z+3	; 0x03
    205a:	d9 01       	movw	r26, r18
    205c:	16 96       	adiw	r26, 0x06	; 6
    205e:	4d 91       	ld	r20, X+
    2060:	5d 91       	ld	r21, X+
    2062:	6d 91       	ld	r22, X+
    2064:	7c 91       	ld	r23, X
    2066:	19 97       	sbiw	r26, 0x09	; 9
    2068:	d8 01       	movw	r26, r16
    206a:	16 96       	adiw	r26, 0x06	; 6
    206c:	0d 91       	ld	r16, X+
    206e:	1d 91       	ld	r17, X+
    2070:	2d 91       	ld	r18, X+
    2072:	3c 91       	ld	r19, X
    2074:	19 97       	sbiw	r26, 0x09	; 9
    2076:	40 1b       	sub	r20, r16
    2078:	51 0b       	sbc	r21, r17
    207a:	62 0b       	sbc	r22, r18
    207c:	73 0b       	sbc	r23, r19
    207e:	9a f4       	brpl	.+38     	; 0x20a6 <async+0x1fa>
    2080:	dc 01       	movw	r26, r24
    2082:	2d 91       	ld	r18, X+
    2084:	3c 91       	ld	r19, X
    2086:	11 97       	sbiw	r26, 0x01	; 1
    2088:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    208c:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    2090:	ed 93       	st	X+, r30
    2092:	fc 93       	st	X, r31
    2094:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    2098:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    209c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <dispatch>
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <async+0x1fa>
    20a2:	33 20       	and	r3, r3
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <async+0x1fc>
    20a6:	78 94       	sei
    20a8:	ce 01       	movw	r24, r28
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	df 90       	pop	r13
    20b8:	cf 90       	pop	r12
    20ba:	bf 90       	pop	r11
    20bc:	af 90       	pop	r10
    20be:	9f 90       	pop	r9
    20c0:	8f 90       	pop	r8
    20c2:	7f 90       	pop	r7
    20c4:	6f 90       	pop	r6
    20c6:	5f 90       	pop	r5
    20c8:	4f 90       	pop	r4
    20ca:	3f 90       	pop	r3
    20cc:	08 95       	ret

000020ce <sync>:
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	ec 01       	movw	r28, r24
    20e0:	7b 01       	movw	r14, r22
    20e2:	6a 01       	movw	r12, r20
    20e4:	1f b7       	in	r17, 0x3f	; 63
    20e6:	10 78       	andi	r17, 0x80	; 128
    20e8:	f8 94       	cli
    20ea:	a8 81       	ld	r26, Y
    20ec:	b9 81       	ldd	r27, Y+1	; 0x01
    20ee:	10 97       	sbiw	r26, 0x00	; 0
    20f0:	61 f1       	breq	.+88     	; 0x214a <sync+0x7c>
    20f2:	14 96       	adiw	r26, 0x04	; 4
    20f4:	ed 91       	ld	r30, X+
    20f6:	fc 91       	ld	r31, X
    20f8:	15 97       	sbiw	r26, 0x05	; 5
    20fa:	30 97       	sbiw	r30, 0x00	; 0
    20fc:	41 f0       	breq	.+16     	; 0x210e <sync+0x40>
    20fe:	a0 81       	ld	r26, Z
    2100:	b1 81       	ldd	r27, Z+1	; 0x01
    2102:	14 96       	adiw	r26, 0x04	; 4
    2104:	ed 91       	ld	r30, X+
    2106:	fc 91       	ld	r31, X
    2108:	15 97       	sbiw	r26, 0x05	; 5
    210a:	30 97       	sbiw	r30, 0x00	; 0
    210c:	c1 f7       	brne	.-16     	; 0x20fe <sync+0x30>
    210e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2112:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2116:	2a 17       	cp	r18, r26
    2118:	3b 07       	cpc	r19, r27
    211a:	21 f0       	breq	.+8      	; 0x2124 <sync+0x56>
    211c:	11 23       	and	r17, r17
    211e:	09 f4       	brne	.+2      	; 0x2122 <sync+0x54>
    2120:	3d c0       	rjmp	.+122    	; 0x219c <sync+0xce>
    2122:	07 c0       	rjmp	.+14     	; 0x2132 <sync+0x64>
    2124:	11 23       	and	r17, r17
    2126:	09 f4       	brne	.+2      	; 0x212a <sync+0x5c>
    2128:	3c c0       	rjmp	.+120    	; 0x21a2 <sync+0xd4>
    212a:	78 94       	sei
    212c:	8f ef       	ldi	r24, 0xFF	; 255
    212e:	9f ef       	ldi	r25, 0xFF	; 255
    2130:	52 c0       	rjmp	.+164    	; 0x21d6 <sync+0x108>
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	9b 81       	ldd	r25, Y+3	; 0x03
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	d1 f1       	breq	.+116    	; 0x21ae <sync+0xe0>
    213a:	fc 01       	movw	r30, r24
    213c:	15 82       	std	Z+5, r1	; 0x05
    213e:	14 82       	std	Z+4, r1	; 0x04
    2140:	36 c0       	rjmp	.+108    	; 0x21ae <sync+0xe0>
    2142:	78 94       	sei
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	46 c0       	rjmp	.+140    	; 0x21d6 <sync+0x108>
    214a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    214e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2152:	99 83       	std	Y+1, r25	; 0x01
    2154:	88 83       	st	Y, r24
    2156:	11 23       	and	r17, r17
    2158:	29 f0       	breq	.+10     	; 0x2164 <sync+0x96>
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	9b 81       	ldd	r25, Y+3	; 0x03
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	09 f0       	breq	.+2      	; 0x2164 <sync+0x96>
    2162:	78 94       	sei
    2164:	b6 01       	movw	r22, r12
    2166:	ce 01       	movw	r24, r28
    2168:	f7 01       	movw	r30, r14
    216a:	09 95       	icall
    216c:	f8 2e       	mov	r15, r24
    216e:	09 2f       	mov	r16, r25
    2170:	8f b7       	in	r24, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	19 82       	std	Y+1, r1	; 0x01
    2176:	18 82       	st	Y, r1
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	9b 81       	ldd	r25, Y+3	; 0x03
    217c:	82 30       	cpi	r24, 0x02	; 2
    217e:	91 05       	cpc	r25, r1
    2180:	38 f0       	brcs	.+14     	; 0x2190 <sync+0xc2>
    2182:	1b 82       	std	Y+3, r1	; 0x03
    2184:	1a 82       	std	Y+2, r1	; 0x02
    2186:	fc 01       	movw	r30, r24
    2188:	15 82       	std	Z+5, r1	; 0x05
    218a:	14 82       	std	Z+4, r1	; 0x04
    218c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <dispatch>
    2190:	11 23       	and	r17, r17
    2192:	51 f0       	breq	.+20     	; 0x21a8 <sync+0xda>
    2194:	78 94       	sei
    2196:	8f 2d       	mov	r24, r15
    2198:	90 2f       	mov	r25, r16
    219a:	1d c0       	rjmp	.+58     	; 0x21d6 <sync+0x108>
    219c:	8f ef       	ldi	r24, 0xFF	; 255
    219e:	9f ef       	ldi	r25, 0xFF	; 255
    21a0:	1a c0       	rjmp	.+52     	; 0x21d6 <sync+0x108>
    21a2:	8f ef       	ldi	r24, 0xFF	; 255
    21a4:	9f ef       	ldi	r25, 0xFF	; 255
    21a6:	17 c0       	rjmp	.+46     	; 0x21d6 <sync+0x108>
    21a8:	8f 2d       	mov	r24, r15
    21aa:	90 2f       	mov	r25, r16
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <sync+0x108>
    21ae:	3b 83       	std	Y+3, r19	; 0x03
    21b0:	2a 83       	std	Y+2, r18	; 0x02
    21b2:	f9 01       	movw	r30, r18
    21b4:	d5 83       	std	Z+5, r29	; 0x05
    21b6:	c4 83       	std	Z+4, r28	; 0x04
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 bf 05 	call	0xb7e	; 0xb7e <dispatch>
    21be:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21c2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	89 2b       	or	r24, r25
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <sync+0x102>
    21ce:	b9 cf       	rjmp	.-142    	; 0x2142 <sync+0x74>
    21d0:	f9 83       	std	Y+1, r31	; 0x01
    21d2:	e8 83       	st	Y, r30
    21d4:	c2 cf       	rjmp	.-124    	; 0x215a <sync+0x8c>
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	1f 91       	pop	r17
    21dc:	0f 91       	pop	r16
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	df 90       	pop	r13
    21e4:	cf 90       	pop	r12
    21e6:	08 95       	ret

000021e8 <run>:
    21e8:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21ec:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21f0:	80 e1       	ldi	r24, 0x10	; 16
    21f2:	91 e0       	ldi	r25, 0x01	; 1
    21f4:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <dequeue>
    21f8:	ec 01       	movw	r28, r24
    21fa:	d8 01       	movw	r26, r16
    21fc:	13 96       	adiw	r26, 0x03	; 3
    21fe:	9c 93       	st	X, r25
    2200:	8e 93       	st	-X, r24
    2202:	12 97       	sbiw	r26, 0x02	; 2
    2204:	78 94       	sei
    2206:	4e 85       	ldd	r20, Y+14	; 0x0e
    2208:	5f 85       	ldd	r21, Y+15	; 0x0f
    220a:	6c 85       	ldd	r22, Y+12	; 0x0c
    220c:	7d 85       	ldd	r23, Y+13	; 0x0d
    220e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2210:	9b 85       	ldd	r25, Y+11	; 0x0b
    2212:	0e 94 67 10 	call	0x20ce	; 0x20ce <sync>
    2216:	8f b7       	in	r24, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    221e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    2222:	99 83       	std	Y+1, r25	; 0x01
    2224:	88 83       	st	Y, r24
    2226:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    222a:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    222e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2232:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2236:	00 81       	ld	r16, Z
    2238:	11 81       	ldd	r17, Z+1	; 0x01
    223a:	e8 01       	movw	r28, r16
    223c:	2a 81       	ldd	r18, Y+2	; 0x02
    223e:	3b 81       	ldd	r19, Y+3	; 0x03
    2240:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <msgQ>
    2244:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <msgQ+0x1>
    2248:	10 97       	sbiw	r26, 0x00	; 0
    224a:	c1 f0       	breq	.+48     	; 0x227c <run+0x94>
    224c:	21 15       	cp	r18, r1
    224e:	31 05       	cpc	r19, r1
    2250:	59 f2       	breq	.-106    	; 0x21e8 <run>
    2252:	16 96       	adiw	r26, 0x06	; 6
    2254:	8d 91       	ld	r24, X+
    2256:	9d 91       	ld	r25, X+
    2258:	0d 90       	ld	r0, X+
    225a:	bc 91       	ld	r27, X
    225c:	a0 2d       	mov	r26, r0
    225e:	e9 01       	movw	r28, r18
    2260:	4e 81       	ldd	r20, Y+6	; 0x06
    2262:	5f 81       	ldd	r21, Y+7	; 0x07
    2264:	68 85       	ldd	r22, Y+8	; 0x08
    2266:	79 85       	ldd	r23, Y+9	; 0x09
    2268:	84 1b       	sub	r24, r20
    226a:	95 0b       	sbc	r25, r21
    226c:	a6 0b       	sbc	r26, r22
    226e:	b7 0b       	sbc	r27, r23
    2270:	18 16       	cp	r1, r24
    2272:	19 06       	cpc	r1, r25
    2274:	1a 06       	cpc	r1, r26
    2276:	1b 06       	cpc	r1, r27
    2278:	0c f0       	brlt	.+2      	; 0x227c <run+0x94>
    227a:	b6 cf       	rjmp	.-148    	; 0x21e8 <run>
    227c:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <activeStack+0x1>
    2280:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <activeStack>
    2284:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    2288:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    228c:	91 83       	std	Z+1, r25	; 0x01
    228e:	80 83       	st	Z, r24
    2290:	f0 93 05 01 	sts	0x0105, r31	; 0x800105 <threadPool+0x1>
    2294:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <threadPool>
    2298:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    229c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    22a0:	14 96       	adiw	r26, 0x04	; 4
    22a2:	ed 91       	ld	r30, X+
    22a4:	fc 91       	ld	r31, X
    22a6:	15 97       	sbiw	r26, 0x05	; 5
    22a8:	30 97       	sbiw	r30, 0x00	; 0
    22aa:	41 f0       	breq	.+16     	; 0x22bc <run+0xd4>
    22ac:	a0 81       	ld	r26, Z
    22ae:	b1 81       	ldd	r27, Z+1	; 0x01
    22b0:	14 96       	adiw	r26, 0x04	; 4
    22b2:	ed 91       	ld	r30, X+
    22b4:	fc 91       	ld	r31, X
    22b6:	15 97       	sbiw	r26, 0x05	; 5
    22b8:	30 97       	sbiw	r30, 0x00	; 0
    22ba:	c1 f7       	brne	.-16     	; 0x22ac <run+0xc4>
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 bf 05 	call	0xb7e	; 0xb7e <dispatch>
    22c2:	92 cf       	rjmp	.-220    	; 0x21e8 <run>

000022c4 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    22c4:	42 31       	cpi	r20, 0x12	; 18
    22c6:	b8 f4       	brcc	.+46     	; 0x22f6 <install+0x32>
        char status;
        DISABLE(status);
    22c8:	2f b7       	in	r18, 0x3f	; 63
    22ca:	f8 94       	cli
        otable[i] = obj;
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	44 0f       	add	r20, r20
    22d0:	55 1f       	adc	r21, r21
    22d2:	fa 01       	movw	r30, r20
    22d4:	ee 5e       	subi	r30, 0xEE	; 238
    22d6:	fe 4f       	sbci	r31, 0xFE	; 254
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	80 83       	st	Z, r24
        mtable[i] = m;
    22dc:	fa 01       	movw	r30, r20
    22de:	e6 55       	subi	r30, 0x56	; 86
    22e0:	fe 4f       	sbci	r31, 0xFE	; 254
    22e2:	71 83       	std	Z+1, r23	; 0x01
    22e4:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	50 e0       	ldi	r21, 0x00	; 0
    22ea:	fc 01       	movw	r30, r24
    22ec:	53 83       	std	Z+3, r21	; 0x03
    22ee:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    22f0:	22 23       	and	r18, r18
    22f2:	0c f4       	brge	.+2      	; 0x22f6 <install+0x32>
    22f4:	78 94       	sei
    22f6:	08 95       	ret

000022f8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    22f8:	8c 01       	movw	r16, r24
    22fa:	7b 01       	movw	r14, r22
    22fc:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    22fe:	8f b7       	in	r24, 0x3f	; 63
    2300:	f8 94       	cli
    initialize();
    2302:	0e 94 54 05 	call	0xaa8	; 0xaa8 <initialize>
    ENABLE(1);
    2306:	78 94       	sei
    if (m != NULL)
    2308:	e1 14       	cp	r14, r1
    230a:	f1 04       	cpc	r15, r1
    230c:	41 f0       	breq	.+16     	; 0x231e <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	a9 01       	movw	r20, r18
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	cb 01       	movw	r24, r22
    231a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <async>
    DISABLE(status);
    231e:	8f b7       	in	r24, 0x3f	; 63
    2320:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2322:	0e 94 df 05 	call	0xbbe	; 0xbbe <schedule>
    ENABLE(1);
    2326:	78 94       	sei
    while (1) {
        SLEEP();
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	83 bf       	out	0x33, r24	; 51
    232c:	88 95       	sleep
    232e:	fd cf       	rjmp	.-6      	; 0x232a <tinytimber+0x32>

00002330 <__divmodhi4>:
    2330:	97 fb       	bst	r25, 7
    2332:	07 2e       	mov	r0, r23
    2334:	16 f4       	brtc	.+4      	; 0x233a <__divmodhi4+0xa>
    2336:	00 94       	com	r0
    2338:	07 d0       	rcall	.+14     	; 0x2348 <__divmodhi4_neg1>
    233a:	77 fd       	sbrc	r23, 7
    233c:	09 d0       	rcall	.+18     	; 0x2350 <__divmodhi4_neg2>
    233e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <__udivmodhi4>
    2342:	07 fc       	sbrc	r0, 7
    2344:	05 d0       	rcall	.+10     	; 0x2350 <__divmodhi4_neg2>
    2346:	3e f4       	brtc	.+14     	; 0x2356 <__divmodhi4_exit>

00002348 <__divmodhi4_neg1>:
    2348:	90 95       	com	r25
    234a:	81 95       	neg	r24
    234c:	9f 4f       	sbci	r25, 0xFF	; 255
    234e:	08 95       	ret

00002350 <__divmodhi4_neg2>:
    2350:	70 95       	com	r23
    2352:	61 95       	neg	r22
    2354:	7f 4f       	sbci	r23, 0xFF	; 255

00002356 <__divmodhi4_exit>:
    2356:	08 95       	ret

00002358 <__divmodsi4>:
    2358:	05 2e       	mov	r0, r21
    235a:	97 fb       	bst	r25, 7
    235c:	1e f4       	brtc	.+6      	; 0x2364 <__divmodsi4+0xc>
    235e:	00 94       	com	r0
    2360:	0e 94 c3 11 	call	0x2386	; 0x2386 <__negsi2>
    2364:	57 fd       	sbrc	r21, 7
    2366:	07 d0       	rcall	.+14     	; 0x2376 <__divmodsi4_neg2>
    2368:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__udivmodsi4>
    236c:	07 fc       	sbrc	r0, 7
    236e:	03 d0       	rcall	.+6      	; 0x2376 <__divmodsi4_neg2>
    2370:	4e f4       	brtc	.+18     	; 0x2384 <__divmodsi4_exit>
    2372:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__negsi2>

00002376 <__divmodsi4_neg2>:
    2376:	50 95       	com	r21
    2378:	40 95       	com	r20
    237a:	30 95       	com	r19
    237c:	21 95       	neg	r18
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	4f 4f       	sbci	r20, 0xFF	; 255
    2382:	5f 4f       	sbci	r21, 0xFF	; 255

00002384 <__divmodsi4_exit>:
    2384:	08 95       	ret

00002386 <__negsi2>:
    2386:	90 95       	com	r25
    2388:	80 95       	com	r24
    238a:	70 95       	com	r23
    238c:	61 95       	neg	r22
    238e:	7f 4f       	sbci	r23, 0xFF	; 255
    2390:	8f 4f       	sbci	r24, 0xFF	; 255
    2392:	9f 4f       	sbci	r25, 0xFF	; 255
    2394:	08 95       	ret

00002396 <__tablejump2__>:
    2396:	ee 0f       	add	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	05 90       	lpm	r0, Z+
    239c:	f4 91       	lpm	r31, Z
    239e:	e0 2d       	mov	r30, r0
    23a0:	09 94       	ijmp

000023a2 <__usmulhisi3>:
    23a2:	0e 94 0e 12 	call	0x241c	; 0x241c <__umulhisi3>

000023a6 <__usmulhisi3_tail>:
    23a6:	b7 ff       	sbrs	r27, 7
    23a8:	08 95       	ret
    23aa:	82 1b       	sub	r24, r18
    23ac:	93 0b       	sbc	r25, r19
    23ae:	08 95       	ret

000023b0 <__udivmodhi4>:
    23b0:	aa 1b       	sub	r26, r26
    23b2:	bb 1b       	sub	r27, r27
    23b4:	51 e1       	ldi	r21, 0x11	; 17
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <__udivmodhi4_ep>

000023b8 <__udivmodhi4_loop>:
    23b8:	aa 1f       	adc	r26, r26
    23ba:	bb 1f       	adc	r27, r27
    23bc:	a6 17       	cp	r26, r22
    23be:	b7 07       	cpc	r27, r23
    23c0:	10 f0       	brcs	.+4      	; 0x23c6 <__udivmodhi4_ep>
    23c2:	a6 1b       	sub	r26, r22
    23c4:	b7 0b       	sbc	r27, r23

000023c6 <__udivmodhi4_ep>:
    23c6:	88 1f       	adc	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	5a 95       	dec	r21
    23cc:	a9 f7       	brne	.-22     	; 0x23b8 <__udivmodhi4_loop>
    23ce:	80 95       	com	r24
    23d0:	90 95       	com	r25
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	08 95       	ret

000023d8 <__udivmodsi4>:
    23d8:	a1 e2       	ldi	r26, 0x21	; 33
    23da:	1a 2e       	mov	r1, r26
    23dc:	aa 1b       	sub	r26, r26
    23de:	bb 1b       	sub	r27, r27
    23e0:	fd 01       	movw	r30, r26
    23e2:	0d c0       	rjmp	.+26     	; 0x23fe <__udivmodsi4_ep>

000023e4 <__udivmodsi4_loop>:
    23e4:	aa 1f       	adc	r26, r26
    23e6:	bb 1f       	adc	r27, r27
    23e8:	ee 1f       	adc	r30, r30
    23ea:	ff 1f       	adc	r31, r31
    23ec:	a2 17       	cp	r26, r18
    23ee:	b3 07       	cpc	r27, r19
    23f0:	e4 07       	cpc	r30, r20
    23f2:	f5 07       	cpc	r31, r21
    23f4:	20 f0       	brcs	.+8      	; 0x23fe <__udivmodsi4_ep>
    23f6:	a2 1b       	sub	r26, r18
    23f8:	b3 0b       	sbc	r27, r19
    23fa:	e4 0b       	sbc	r30, r20
    23fc:	f5 0b       	sbc	r31, r21

000023fe <__udivmodsi4_ep>:
    23fe:	66 1f       	adc	r22, r22
    2400:	77 1f       	adc	r23, r23
    2402:	88 1f       	adc	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	1a 94       	dec	r1
    2408:	69 f7       	brne	.-38     	; 0x23e4 <__udivmodsi4_loop>
    240a:	60 95       	com	r22
    240c:	70 95       	com	r23
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	9b 01       	movw	r18, r22
    2414:	ac 01       	movw	r20, r24
    2416:	bd 01       	movw	r22, r26
    2418:	cf 01       	movw	r24, r30
    241a:	08 95       	ret

0000241c <__umulhisi3>:
    241c:	a2 9f       	mul	r26, r18
    241e:	b0 01       	movw	r22, r0
    2420:	b3 9f       	mul	r27, r19
    2422:	c0 01       	movw	r24, r0
    2424:	a3 9f       	mul	r26, r19
    2426:	70 0d       	add	r23, r0
    2428:	81 1d       	adc	r24, r1
    242a:	11 24       	eor	r1, r1
    242c:	91 1d       	adc	r25, r1
    242e:	b2 9f       	mul	r27, r18
    2430:	70 0d       	add	r23, r0
    2432:	81 1d       	adc	r24, r1
    2434:	11 24       	eor	r1, r1
    2436:	91 1d       	adc	r25, r1
    2438:	08 95       	ret

0000243a <setjmp>:
    243a:	dc 01       	movw	r26, r24
    243c:	2d 92       	st	X+, r2
    243e:	3d 92       	st	X+, r3
    2440:	4d 92       	st	X+, r4
    2442:	5d 92       	st	X+, r5
    2444:	6d 92       	st	X+, r6
    2446:	7d 92       	st	X+, r7
    2448:	8d 92       	st	X+, r8
    244a:	9d 92       	st	X+, r9
    244c:	ad 92       	st	X+, r10
    244e:	bd 92       	st	X+, r11
    2450:	cd 92       	st	X+, r12
    2452:	dd 92       	st	X+, r13
    2454:	ed 92       	st	X+, r14
    2456:	fd 92       	st	X+, r15
    2458:	0d 93       	st	X+, r16
    245a:	1d 93       	st	X+, r17
    245c:	cd 93       	st	X+, r28
    245e:	dd 93       	st	X+, r29
    2460:	ff 91       	pop	r31
    2462:	ef 91       	pop	r30
    2464:	8d b7       	in	r24, 0x3d	; 61
    2466:	8d 93       	st	X+, r24
    2468:	8e b7       	in	r24, 0x3e	; 62
    246a:	8d 93       	st	X+, r24
    246c:	8f b7       	in	r24, 0x3f	; 63
    246e:	8d 93       	st	X+, r24
    2470:	ed 93       	st	X+, r30
    2472:	fd 93       	st	X+, r31
    2474:	88 27       	eor	r24, r24
    2476:	99 27       	eor	r25, r25
    2478:	09 94       	ijmp

0000247a <longjmp>:
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	91 05       	cpc	r25, r1
    2482:	81 1d       	adc	r24, r1
    2484:	2d 90       	ld	r2, X+
    2486:	3d 90       	ld	r3, X+
    2488:	4d 90       	ld	r4, X+
    248a:	5d 90       	ld	r5, X+
    248c:	6d 90       	ld	r6, X+
    248e:	7d 90       	ld	r7, X+
    2490:	8d 90       	ld	r8, X+
    2492:	9d 90       	ld	r9, X+
    2494:	ad 90       	ld	r10, X+
    2496:	bd 90       	ld	r11, X+
    2498:	cd 90       	ld	r12, X+
    249a:	dd 90       	ld	r13, X+
    249c:	ed 90       	ld	r14, X+
    249e:	fd 90       	ld	r15, X+
    24a0:	0d 91       	ld	r16, X+
    24a2:	1d 91       	ld	r17, X+
    24a4:	cd 91       	ld	r28, X+
    24a6:	dd 91       	ld	r29, X+
    24a8:	ed 91       	ld	r30, X+
    24aa:	fd 91       	ld	r31, X+
    24ac:	0d 90       	ld	r0, X+
    24ae:	f8 94       	cli
    24b0:	fe bf       	out	0x3e, r31	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	ed bf       	out	0x3d, r30	; 61
    24b6:	ed 91       	ld	r30, X+
    24b8:	fd 91       	ld	r31, X+
    24ba:	09 94       	ijmp

000024bc <_exit>:
    24bc:	f8 94       	cli

000024be <__stop_program>:
    24be:	ff cf       	rjmp	.-2      	; 0x24be <__stop_program>
