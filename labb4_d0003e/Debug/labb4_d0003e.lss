
labb4_d0003e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002696  0000272a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  0080014a  0080014a  00002774  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002774  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dcc  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101e  00000000  00000000  00005800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001653  00000000  00000000  0000681e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bec  00000000  00000000  00007e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b3  00000000  00000000  00008a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002808  00000000  00000000  00009413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000bc1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_1>
       8:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_2>
       c:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_3>
      10:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_4>
      14:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__vector_9>
      28:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__vector_10>
      2c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_11>
      30:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_12>
      34:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_13>
      38:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_14>
      3c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_15>
      40:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_16>
      44:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_17>
      48:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__vector_18>
      4c:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_19>
      50:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__vector_20>
      54:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__vector_21>
      58:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__vector_22>
      5c:	a3 00       	.word	0x00a3	; ????
      5e:	85 00       	.word	0x0085	; ????
      60:	88 00       	.word	0x0088	; ????
      62:	8b 00       	.word	0x008b	; ????
      64:	8e 00       	.word	0x008e	; ????
      66:	91 00       	.word	0x0091	; ????
      68:	94 00       	.word	0x0094	; ????
      6a:	97 00       	.word	0x0097	; ????
      6c:	9a 00       	.word	0x009a	; ????
      6e:	9d 00       	.word	0x009d	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 e9       	ldi	r30, 0x96	; 150
      84:	f6 e2       	ldi	r31, 0x26	; 38
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	aa 34       	cpi	r26, 0x4A	; 74
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	aa e4       	ldi	r26, 0x4A	; 74
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a1 3a       	cpi	r26, 0xA1	; 161
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <main>
      a6:	0c 94 49 13 	jmp	0x2692	; 0x2692 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:
    printAt(0,4);

 }

void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b6:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      b8:	87 eb       	ldi	r24, 0xB7	; 183
      ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c4:	8f e0       	ldi	r24, 0x0F	; 15
      c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d0:	08 95       	ret

000000d2 <button_init>:
void button_init(void){


    
    // initialize button
    PORTB |= ((1 << 7)| (1 << 6 ) | (1 << 4));  // 7 down, 6 up, 4 center down 
      d2:	85 b1       	in	r24, 0x05	; 5
      d4:	80 6d       	ori	r24, 0xD0	; 208
      d6:	85 b9       	out	0x05, r24	; 5
	PORTE |= ( (1 << 2) | ( 1 << 3));           // 2 left, 3 right
      d8:	8e b1       	in	r24, 0x0e	; 14
      da:	8c 60       	ori	r24, 0x0C	; 12
      dc:	8e b9       	out	0x0e, r24	; 14


	// enable interupts for joystick
    EIMSK |= (1 << PCIE1) | (1 << PCIE0); //  PCIE1 enables PCINT15..8 interupts // PCIE0 enables PCINT7..0 interupts
      de:	8d b3       	in	r24, 0x1d	; 29
      e0:	80 6c       	ori	r24, 0xC0	; 192
      e2:	8d bb       	out	0x1d, r24	; 29
	//EIMSK |= (1 << PCINT15);

	PCMSK1 |= (1 << PCINT15)|(1 << PCINT14)|(1 << PCINT12); //enables those pins
      e4:	ec e6       	ldi	r30, 0x6C	; 108
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 6d       	ori	r24, 0xD0	; 208
      ec:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3)|(1 << PCINT2);
      ee:	eb e6       	ldi	r30, 0x6B	; 107
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	8c 60       	ori	r24, 0x0C	; 12
      f6:	80 83       	st	Z, r24
      f8:	08 95       	ret

000000fa <getValueArray>:


}

int getValueArray(int i){
    switch (i)
      fa:	8a 30       	cpi	r24, 0x0A	; 10
      fc:	91 05       	cpc	r25, r1
      fe:	00 f5       	brcc	.+64     	; 0x140 <getValueArray+0x46>
     100:	fc 01       	movw	r30, r24
     102:	e2 5d       	subi	r30, 0xD2	; 210
     104:	ff 4f       	sbci	r31, 0xFF	; 255
     106:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
     10a:	80 e8       	ldi	r24, 0x80	; 128
     10c:	90 e2       	ldi	r25, 0x20	; 32
     10e:	08 95       	ret
    
    case 2:
        return TwoValue;
     110:	81 e1       	ldi	r24, 0x11	; 17
     112:	9e e1       	ldi	r25, 0x1E	; 30
     114:	08 95       	ret

    case 3:
        return ThreeValue;
     116:	81 e1       	ldi	r24, 0x11	; 17
     118:	9b e1       	ldi	r25, 0x1B	; 27
     11a:	08 95       	ret
    
    case 4:
        return FourValue;
     11c:	80 e5       	ldi	r24, 0x50	; 80
     11e:	9b e0       	ldi	r25, 0x0B	; 11
     120:	08 95       	ret

    case 5:
        return FiveValue;
     122:	81 e4       	ldi	r24, 0x41	; 65
     124:	9b e1       	ldi	r25, 0x1B	; 27
     126:	08 95       	ret
    
    case 6:
        return SixValue;
     128:	81 e4       	ldi	r24, 0x41	; 65
     12a:	9f e1       	ldi	r25, 0x1F	; 31
     12c:	08 95       	ret
    
    case 7:
        return SevenValue;
     12e:	81 e1       	ldi	r24, 0x11	; 17
     130:	91 e0       	ldi	r25, 0x01	; 1
     132:	08 95       	ret
        
    case 8:
        return EightValue;
     134:	81 e5       	ldi	r24, 0x51	; 81
     136:	9f e1       	ldi	r25, 0x1F	; 31
     138:	08 95       	ret
    
    case 9:
        return NineValue;
     13a:	81 e5       	ldi	r24, 0x51	; 81
     13c:	9b e0       	ldi	r25, 0x0B	; 11
     13e:	08 95       	ret
    
    default: // 10
        return BlankValue;
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	08 95       	ret

int getValueArray(int i){
    switch (i)
    {
    case 0:
        return ZeroValue;
     146:	81 e5       	ldi	r24, 0x51	; 81
     148:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     14a:	08 95       	ret

0000014c <writeChar>:

void writeChar(char ch, int pos) {
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <writeChar+0xc>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
	

	volatile int i = 0;
     15c:	1a 82       	std	Y+2, r1	; 0x02
     15e:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     160:	66 30       	cpi	r22, 0x06	; 6
     162:	71 05       	cpc	r23, r1
     164:	08 f0       	brcs	.+2      	; 0x168 <writeChar+0x1c>
     166:	fe c1       	rjmp	.+1020   	; 0x564 <__stack+0x65>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     168:	90 ed       	ldi	r25, 0xD0	; 208
     16a:	98 0f       	add	r25, r24
     16c:	9a 30       	cpi	r25, 0x0A	; 10
     16e:	28 f0       	brcs	.+10     	; 0x17a <writeChar+0x2e>
		i=10;
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	9a 83       	std	Y+2, r25	; 0x02
     176:	89 83       	std	Y+1, r24	; 0x01
     178:	04 c0       	rjmp	.+8      	; 0x182 <writeChar+0x36>
	}else{
        i = ch - 48;
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	c0 97       	sbiw	r24, 0x30	; 48
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     182:	61 15       	cp	r22, r1
     184:	71 05       	cpc	r23, r1
     186:	09 f0       	breq	.+2      	; 0x18a <writeChar+0x3e>
     188:	4e c0       	rjmp	.+156    	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     18a:	0f 2e       	mov	r0, r31
     18c:	fc ee       	ldi	r31, 0xEC	; 236
     18e:	ef 2e       	mov	r14, r31
     190:	f1 2c       	mov	r15, r1
     192:	f0 2d       	mov	r31, r0
     194:	f7 01       	movw	r30, r14
     196:	10 81       	ld	r17, Z
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	9a 81       	ldd	r25, Y+2	; 0x02
     19c:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     1a0:	10 7f       	andi	r17, 0xF0	; 240
     1a2:	8f 70       	andi	r24, 0x0F	; 15
     1a4:	81 2b       	or	r24, r17
     1a6:	f7 01       	movw	r30, r14
     1a8:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     1aa:	0f 2e       	mov	r0, r31
     1ac:	f1 ef       	ldi	r31, 0xF1	; 241
     1ae:	ef 2e       	mov	r14, r31
     1b0:	f1 2c       	mov	r15, r1
     1b2:	f0 2d       	mov	r31, r0
     1b4:	f7 01       	movw	r30, r14
     1b6:	10 81       	ld	r17, Z
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     1c0:	80 7f       	andi	r24, 0xF0	; 240
     1c2:	99 27       	eor	r25, r25
     1c4:	95 95       	asr	r25
     1c6:	87 95       	ror	r24
     1c8:	95 95       	asr	r25
     1ca:	87 95       	ror	r24
     1cc:	95 95       	asr	r25
     1ce:	87 95       	ror	r24
     1d0:	95 95       	asr	r25
     1d2:	87 95       	ror	r24
     1d4:	10 7f       	andi	r17, 0xF0	; 240
     1d6:	81 2b       	or	r24, r17
     1d8:	f7 01       	movw	r30, r14
     1da:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1dc:	0f 2e       	mov	r0, r31
     1de:	f6 ef       	ldi	r31, 0xF6	; 246
     1e0:	ef 2e       	mov	r14, r31
     1e2:	f1 2c       	mov	r15, r1
     1e4:	f0 2d       	mov	r31, r0
     1e6:	f7 01       	movw	r30, r14
     1e8:	10 81       	ld	r17, Z
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
     1ee:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     1f2:	88 27       	eor	r24, r24
     1f4:	9f 70       	andi	r25, 0x0F	; 15
     1f6:	10 7f       	andi	r17, 0xF0	; 240
     1f8:	19 2b       	or	r17, r25
     1fa:	f7 01       	movw	r30, r14
     1fc:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     1fe:	0f 2e       	mov	r0, r31
     200:	fb ef       	ldi	r31, 0xFB	; 251
     202:	ef 2e       	mov	r14, r31
     204:	f1 2c       	mov	r15, r1
     206:	f0 2d       	mov	r31, r0
     208:	f7 01       	movw	r30, r14
     20a:	10 81       	ld	r17, Z
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9a 81       	ldd	r25, Y+2	; 0x02
     210:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     214:	10 7f       	andi	r17, 0xF0	; 240
     216:	95 95       	asr	r25
     218:	95 95       	asr	r25
     21a:	95 95       	asr	r25
     21c:	95 95       	asr	r25
     21e:	91 2b       	or	r25, r17
     220:	f7 01       	movw	r30, r14
     222:	90 83       	st	Z, r25
     224:	9f c1       	rjmp	.+830    	; 0x564 <__stack+0x65>
		
	} else if(pos==1){
     226:	61 30       	cpi	r22, 0x01	; 1
     228:	71 05       	cpc	r23, r1
     22a:	09 f0       	breq	.+2      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
     22c:	50 c0       	rjmp	.+160    	; 0x2ce <__EEPROM_REGION_LENGTH__+0xce>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     22e:	0f 2e       	mov	r0, r31
     230:	fc ee       	ldi	r31, 0xEC	; 236
     232:	ef 2e       	mov	r14, r31
     234:	f1 2c       	mov	r15, r1
     236:	f0 2d       	mov	r31, r0
     238:	f7 01       	movw	r30, r14
     23a:	10 81       	ld	r17, Z
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	9a 81       	ldd	r25, Y+2	; 0x02
     240:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     244:	1f 70       	andi	r17, 0x0F	; 15
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	81 2b       	or	r24, r17
     254:	f7 01       	movw	r30, r14
     256:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     258:	0f 2e       	mov	r0, r31
     25a:	f1 ef       	ldi	r31, 0xF1	; 241
     25c:	ef 2e       	mov	r14, r31
     25e:	f1 2c       	mov	r15, r1
     260:	f0 2d       	mov	r31, r0
     262:	f7 01       	movw	r30, r14
     264:	10 81       	ld	r17, Z
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	9a 81       	ldd	r25, Y+2	; 0x02
     26a:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     26e:	1f 70       	andi	r17, 0x0F	; 15
     270:	80 7f       	andi	r24, 0xF0	; 240
     272:	81 2b       	or	r24, r17
     274:	f7 01       	movw	r30, r14
     276:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     278:	0f 2e       	mov	r0, r31
     27a:	f6 ef       	ldi	r31, 0xF6	; 246
     27c:	ef 2e       	mov	r14, r31
     27e:	f1 2c       	mov	r15, r1
     280:	f0 2d       	mov	r31, r0
     282:	f7 01       	movw	r30, r14
     284:	10 81       	ld	r17, Z
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	9a 81       	ldd	r25, Y+2	; 0x02
     28a:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     28e:	88 27       	eor	r24, r24
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	1f 70       	andi	r17, 0x0F	; 15
     2a4:	81 2b       	or	r24, r17
     2a6:	f7 01       	movw	r30, r14
     2a8:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     2aa:	0f 2e       	mov	r0, r31
     2ac:	fb ef       	ldi	r31, 0xFB	; 251
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f1 2c       	mov	r15, r1
     2b2:	f0 2d       	mov	r31, r0
     2b4:	f7 01       	movw	r30, r14
     2b6:	10 81       	ld	r17, Z
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	9a 81       	ldd	r25, Y+2	; 0x02
     2bc:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     2c0:	88 27       	eor	r24, r24
     2c2:	90 7f       	andi	r25, 0xF0	; 240
     2c4:	1f 70       	andi	r17, 0x0F	; 15
     2c6:	19 2b       	or	r17, r25
     2c8:	f7 01       	movw	r30, r14
     2ca:	10 83       	st	Z, r17
     2cc:	4b c1       	rjmp	.+662    	; 0x564 <__stack+0x65>
	} else if(pos==2){
     2ce:	62 30       	cpi	r22, 0x02	; 2
     2d0:	71 05       	cpc	r23, r1
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <__EEPROM_REGION_LENGTH__+0xd6>
     2d4:	4e c0       	rjmp	.+156    	; 0x372 <__EEPROM_REGION_LENGTH__+0x172>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2d6:	0f 2e       	mov	r0, r31
     2d8:	fd ee       	ldi	r31, 0xED	; 237
     2da:	ef 2e       	mov	r14, r31
     2dc:	f1 2c       	mov	r15, r1
     2de:	f0 2d       	mov	r31, r0
     2e0:	f7 01       	movw	r30, r14
     2e2:	10 81       	ld	r17, Z
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     2ec:	10 7f       	andi	r17, 0xF0	; 240
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	81 2b       	or	r24, r17
     2f2:	f7 01       	movw	r30, r14
     2f4:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     2f6:	0f 2e       	mov	r0, r31
     2f8:	f2 ef       	ldi	r31, 0xF2	; 242
     2fa:	ef 2e       	mov	r14, r31
     2fc:	f1 2c       	mov	r15, r1
     2fe:	f0 2d       	mov	r31, r0
     300:	f7 01       	movw	r30, r14
     302:	10 81       	ld	r17, Z
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     30c:	80 7f       	andi	r24, 0xF0	; 240
     30e:	99 27       	eor	r25, r25
     310:	95 95       	asr	r25
     312:	87 95       	ror	r24
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	95 95       	asr	r25
     31a:	87 95       	ror	r24
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	10 7f       	andi	r17, 0xF0	; 240
     322:	81 2b       	or	r24, r17
     324:	f7 01       	movw	r30, r14
     326:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     328:	0f 2e       	mov	r0, r31
     32a:	f7 ef       	ldi	r31, 0xF7	; 247
     32c:	ef 2e       	mov	r14, r31
     32e:	f1 2c       	mov	r15, r1
     330:	f0 2d       	mov	r31, r0
     332:	f7 01       	movw	r30, r14
     334:	10 81       	ld	r17, Z
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     33e:	88 27       	eor	r24, r24
     340:	9f 70       	andi	r25, 0x0F	; 15
     342:	10 7f       	andi	r17, 0xF0	; 240
     344:	19 2b       	or	r17, r25
     346:	f7 01       	movw	r30, r14
     348:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     34a:	0f 2e       	mov	r0, r31
     34c:	fc ef       	ldi	r31, 0xFC	; 252
     34e:	ef 2e       	mov	r14, r31
     350:	f1 2c       	mov	r15, r1
     352:	f0 2d       	mov	r31, r0
     354:	f7 01       	movw	r30, r14
     356:	10 81       	ld	r17, Z
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     360:	10 7f       	andi	r17, 0xF0	; 240
     362:	95 95       	asr	r25
     364:	95 95       	asr	r25
     366:	95 95       	asr	r25
     368:	95 95       	asr	r25
     36a:	91 2b       	or	r25, r17
     36c:	f7 01       	movw	r30, r14
     36e:	90 83       	st	Z, r25
     370:	f9 c0       	rjmp	.+498    	; 0x564 <__stack+0x65>
		
	} else if(pos==3){
     372:	63 30       	cpi	r22, 0x03	; 3
     374:	71 05       	cpc	r23, r1
     376:	09 f0       	breq	.+2      	; 0x37a <__EEPROM_REGION_LENGTH__+0x17a>
     378:	50 c0       	rjmp	.+160    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     37a:	0f 2e       	mov	r0, r31
     37c:	fd ee       	ldi	r31, 0xED	; 237
     37e:	ef 2e       	mov	r14, r31
     380:	f1 2c       	mov	r15, r1
     382:	f0 2d       	mov	r31, r0
     384:	f7 01       	movw	r30, r14
     386:	10 81       	ld	r17, Z
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     390:	1f 70       	andi	r17, 0x0F	; 15
     392:	82 95       	swap	r24
     394:	92 95       	swap	r25
     396:	90 7f       	andi	r25, 0xF0	; 240
     398:	98 27       	eor	r25, r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	98 27       	eor	r25, r24
     39e:	81 2b       	or	r24, r17
     3a0:	f7 01       	movw	r30, r14
     3a2:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     3a4:	0f 2e       	mov	r0, r31
     3a6:	f2 ef       	ldi	r31, 0xF2	; 242
     3a8:	ef 2e       	mov	r14, r31
     3aa:	f1 2c       	mov	r15, r1
     3ac:	f0 2d       	mov	r31, r0
     3ae:	f7 01       	movw	r30, r14
     3b0:	10 81       	ld	r17, Z
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	9a 81       	ldd	r25, Y+2	; 0x02
     3b6:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     3ba:	1f 70       	andi	r17, 0x0F	; 15
     3bc:	80 7f       	andi	r24, 0xF0	; 240
     3be:	81 2b       	or	r24, r17
     3c0:	f7 01       	movw	r30, r14
     3c2:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     3c4:	0f 2e       	mov	r0, r31
     3c6:	f7 ef       	ldi	r31, 0xF7	; 247
     3c8:	ef 2e       	mov	r14, r31
     3ca:	f1 2c       	mov	r15, r1
     3cc:	f0 2d       	mov	r31, r0
     3ce:	f7 01       	movw	r30, r14
     3d0:	10 81       	ld	r17, Z
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     3da:	88 27       	eor	r24, r24
     3dc:	9f 70       	andi	r25, 0x0F	; 15
     3de:	95 95       	asr	r25
     3e0:	87 95       	ror	r24
     3e2:	95 95       	asr	r25
     3e4:	87 95       	ror	r24
     3e6:	95 95       	asr	r25
     3e8:	87 95       	ror	r24
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	1f 70       	andi	r17, 0x0F	; 15
     3f0:	81 2b       	or	r24, r17
     3f2:	f7 01       	movw	r30, r14
     3f4:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     3f6:	0f 2e       	mov	r0, r31
     3f8:	fc ef       	ldi	r31, 0xFC	; 252
     3fa:	ef 2e       	mov	r14, r31
     3fc:	f1 2c       	mov	r15, r1
     3fe:	f0 2d       	mov	r31, r0
     400:	f7 01       	movw	r30, r14
     402:	10 81       	ld	r17, Z
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     40c:	88 27       	eor	r24, r24
     40e:	90 7f       	andi	r25, 0xF0	; 240
     410:	1f 70       	andi	r17, 0x0F	; 15
     412:	19 2b       	or	r17, r25
     414:	f7 01       	movw	r30, r14
     416:	10 83       	st	Z, r17
     418:	a5 c0       	rjmp	.+330    	; 0x564 <__stack+0x65>
		
	} else if(pos==4){
     41a:	64 30       	cpi	r22, 0x04	; 4
     41c:	71 05       	cpc	r23, r1
     41e:	09 f0       	breq	.+2      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
     420:	4e c0       	rjmp	.+156    	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     422:	0f 2e       	mov	r0, r31
     424:	fe ee       	ldi	r31, 0xEE	; 238
     426:	ef 2e       	mov	r14, r31
     428:	f1 2c       	mov	r15, r1
     42a:	f0 2d       	mov	r31, r0
     42c:	f7 01       	movw	r30, r14
     42e:	10 81       	ld	r17, Z
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     438:	10 7f       	andi	r17, 0xF0	; 240
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	81 2b       	or	r24, r17
     43e:	f7 01       	movw	r30, r14
     440:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     442:	0f 2e       	mov	r0, r31
     444:	f3 ef       	ldi	r31, 0xF3	; 243
     446:	ef 2e       	mov	r14, r31
     448:	f1 2c       	mov	r15, r1
     44a:	f0 2d       	mov	r31, r0
     44c:	f7 01       	movw	r30, r14
     44e:	10 81       	ld	r17, Z
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     458:	80 7f       	andi	r24, 0xF0	; 240
     45a:	99 27       	eor	r25, r25
     45c:	95 95       	asr	r25
     45e:	87 95       	ror	r24
     460:	95 95       	asr	r25
     462:	87 95       	ror	r24
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	10 7f       	andi	r17, 0xF0	; 240
     46e:	81 2b       	or	r24, r17
     470:	f7 01       	movw	r30, r14
     472:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     474:	0f 2e       	mov	r0, r31
     476:	f8 ef       	ldi	r31, 0xF8	; 248
     478:	ef 2e       	mov	r14, r31
     47a:	f1 2c       	mov	r15, r1
     47c:	f0 2d       	mov	r31, r0
     47e:	f7 01       	movw	r30, r14
     480:	10 81       	ld	r17, Z
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     48a:	88 27       	eor	r24, r24
     48c:	9f 70       	andi	r25, 0x0F	; 15
     48e:	10 7f       	andi	r17, 0xF0	; 240
     490:	19 2b       	or	r17, r25
     492:	f7 01       	movw	r30, r14
     494:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     496:	0f 2e       	mov	r0, r31
     498:	fd ef       	ldi	r31, 0xFD	; 253
     49a:	ef 2e       	mov	r14, r31
     49c:	f1 2c       	mov	r15, r1
     49e:	f0 2d       	mov	r31, r0
     4a0:	f7 01       	movw	r30, r14
     4a2:	10 81       	ld	r17, Z
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	9a 81       	ldd	r25, Y+2	; 0x02
     4a8:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     4ac:	10 7f       	andi	r17, 0xF0	; 240
     4ae:	95 95       	asr	r25
     4b0:	95 95       	asr	r25
     4b2:	95 95       	asr	r25
     4b4:	95 95       	asr	r25
     4b6:	91 2b       	or	r25, r17
     4b8:	f7 01       	movw	r30, r14
     4ba:	90 83       	st	Z, r25
     4bc:	53 c0       	rjmp	.+166    	; 0x564 <__stack+0x65>
		
	} else if(pos==5){
     4be:	65 30       	cpi	r22, 0x05	; 5
     4c0:	71 05       	cpc	r23, r1
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__DATA_REGION_LENGTH__+0xc6>
     4c4:	4f c0       	rjmp	.+158    	; 0x564 <__stack+0x65>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     4c6:	0f 2e       	mov	r0, r31
     4c8:	fe ee       	ldi	r31, 0xEE	; 238
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 2c       	mov	r15, r1
     4ce:	f0 2d       	mov	r31, r0
     4d0:	f7 01       	movw	r30, r14
     4d2:	10 81       	ld	r17, Z
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     4dc:	1f 70       	andi	r17, 0x0F	; 15
     4de:	82 95       	swap	r24
     4e0:	92 95       	swap	r25
     4e2:	90 7f       	andi	r25, 0xF0	; 240
     4e4:	98 27       	eor	r25, r24
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	98 27       	eor	r25, r24
     4ea:	81 2b       	or	r24, r17
     4ec:	f7 01       	movw	r30, r14
     4ee:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4f0:	0f 2e       	mov	r0, r31
     4f2:	f3 ef       	ldi	r31, 0xF3	; 243
     4f4:	ef 2e       	mov	r14, r31
     4f6:	f1 2c       	mov	r15, r1
     4f8:	f0 2d       	mov	r31, r0
     4fa:	f7 01       	movw	r30, r14
     4fc:	10 81       	ld	r17, Z
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	9a 81       	ldd	r25, Y+2	; 0x02
     502:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     506:	1f 70       	andi	r17, 0x0F	; 15
     508:	80 7f       	andi	r24, 0xF0	; 240
     50a:	81 2b       	or	r24, r17
     50c:	f7 01       	movw	r30, r14
     50e:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     510:	0f 2e       	mov	r0, r31
     512:	f8 ef       	ldi	r31, 0xF8	; 248
     514:	ef 2e       	mov	r14, r31
     516:	f1 2c       	mov	r15, r1
     518:	f0 2d       	mov	r31, r0
     51a:	f7 01       	movw	r30, r14
     51c:	10 81       	ld	r17, Z
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     526:	88 27       	eor	r24, r24
     528:	9f 70       	andi	r25, 0x0F	; 15
     52a:	95 95       	asr	r25
     52c:	87 95       	ror	r24
     52e:	95 95       	asr	r25
     530:	87 95       	ror	r24
     532:	95 95       	asr	r25
     534:	87 95       	ror	r24
     536:	95 95       	asr	r25
     538:	87 95       	ror	r24
     53a:	1f 70       	andi	r17, 0x0F	; 15
     53c:	81 2b       	or	r24, r17
     53e:	f7 01       	movw	r30, r14
     540:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     542:	0f 2e       	mov	r0, r31
     544:	fd ef       	ldi	r31, 0xFD	; 253
     546:	ef 2e       	mov	r14, r31
     548:	f1 2c       	mov	r15, r1
     54a:	f0 2d       	mov	r31, r0
     54c:	f7 01       	movw	r30, r14
     54e:	10 81       	ld	r17, Z
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	9a 81       	ldd	r25, Y+2	; 0x02
     554:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     558:	88 27       	eor	r24, r24
     55a:	90 7f       	andi	r25, 0xF0	; 240
     55c:	1f 70       	andi	r17, 0x0F	; 15
     55e:	19 2b       	or	r17, r25
     560:	f7 01       	movw	r30, r14
     562:	10 83       	st	Z, r17
		
	}
	

}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	08 95       	ret

00000574 <printAt>:

void printAt(long num, int pos) {
     574:	8f 92       	push	r8
     576:	9f 92       	push	r9
     578:	af 92       	push	r10
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	4b 01       	movw	r8, r22
     58a:	5c 01       	movw	r10, r24
     58c:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     58e:	24 e6       	ldi	r18, 0x64	; 100
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	0e 94 97 12 	call	0x252e	; 0x252e <__divmodsi4>
     59a:	0f 2e       	mov	r0, r31
     59c:	fa e0       	ldi	r31, 0x0A	; 10
     59e:	cf 2e       	mov	r12, r31
     5a0:	d1 2c       	mov	r13, r1
     5a2:	e1 2c       	mov	r14, r1
     5a4:	f1 2c       	mov	r15, r1
     5a6:	f0 2d       	mov	r31, r0
     5a8:	a7 01       	movw	r20, r14
     5aa:	96 01       	movw	r18, r12
     5ac:	0e 94 97 12 	call	0x252e	; 0x252e <__divmodsi4>
     5b0:	be 01       	movw	r22, r28
     5b2:	80 e3       	ldi	r24, 0x30	; 48
     5b4:	82 0f       	add	r24, r18
     5b6:	0e 94 a6 00 	call	0x14c	; 0x14c <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     5ba:	21 96       	adiw	r28, 0x01	; 1
     5bc:	c5 01       	movw	r24, r10
     5be:	b4 01       	movw	r22, r8
     5c0:	a7 01       	movw	r20, r14
     5c2:	96 01       	movw	r18, r12
     5c4:	0e 94 97 12 	call	0x252e	; 0x252e <__divmodsi4>
     5c8:	86 2f       	mov	r24, r22
     5ca:	be 01       	movw	r22, r28
     5cc:	80 5d       	subi	r24, 0xD0	; 208
     5ce:	0e 94 a6 00 	call	0x14c	; 0x14c <writeChar>
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	bf 90       	pop	r11
     5e0:	af 90       	pop	r10
     5e2:	9f 90       	pop	r9
     5e4:	8f 90       	pop	r8
     5e6:	08 95       	ret

000005e8 <Gui__init>:




void Gui__init() {
    LCD_Init();
     5e8:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
    button_init();
     5ec:	0e 94 69 00 	call	0xd2	; 0xd2 <button_init>
    LCDDR18 = 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
    printAt(0,0);
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	cb 01       	movw	r24, r22
     600:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
    printAt(0,4);
     604:	44 e0       	ldi	r20, 0x04	; 4
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	cb 01       	movw	r24, r22
     60e:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     612:	08 95       	ret

00000614 <readJoystick>:
    pp++;
    writeChar( num % 10 + '0', pp);
}

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
     614:	1f 9b       	sbis	0x03, 7	; 3
     616:	0b c0       	rjmp	.+22     	; 0x62e <readJoystick+0x1a>
        return 7;
    }else if((PINB & (1<<6))==0){ // 6 up
     618:	1e 9b       	sbis	0x03, 6	; 3
     61a:	0c c0       	rjmp	.+24     	; 0x634 <readJoystick+0x20>
        return 6;
    }else if((PINB & (1<<4))==0){ // 4 center
     61c:	1c 9b       	sbis	0x03, 4	; 3
     61e:	0d c0       	rjmp	.+26     	; 0x63a <readJoystick+0x26>
        return 4;
    }else if((PINE & (1<<2))==0){ // 2 left
     620:	62 9b       	sbis	0x0c, 2	; 12
     622:	0e c0       	rjmp	.+28     	; 0x640 <readJoystick+0x2c>
        return 2;
    }else if((PINE & (1<<3))==0){ // 3 right
     624:	63 9b       	sbis	0x0c, 3	; 12
     626:	0f c0       	rjmp	.+30     	; 0x646 <readJoystick+0x32>
        return 3;
    }else{
        return 0;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	08 95       	ret
    writeChar( num % 10 + '0', pp);
}

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
        return 7;
     62e:	87 e0       	ldi	r24, 0x07	; 7
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	08 95       	ret
    }else if((PINB & (1<<6))==0){ // 6 up
        return 6;
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	08 95       	ret
    }else if((PINB & (1<<4))==0){ // 4 center
        return 4;
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	08 95       	ret
    }else if((PINE & (1<<2))==0){ // 2 left
        return 2;
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	08 95       	ret
    }else if((PINE & (1<<3))==0){ // 3 right
        return 3;
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	90 e0       	ldi	r25, 0x00	; 0
    }else{
        return 0;
    }
}
     64a:	08 95       	ret

0000064c <hold>:

void hold(guiObj* self){
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	ec 01       	movw	r28, r24
    if(self->preValue == readJoystick()){
     65e:	0e 89       	ldd	r16, Y+22	; 0x16
     660:	1f 89       	ldd	r17, Y+23	; 0x17
     662:	0e 94 0a 03 	call	0x614	; 0x614 <readJoystick>
     666:	08 17       	cp	r16, r24
     668:	19 07       	cpc	r17, r25
     66a:	29 f5       	brne	.+74     	; 0x6b6 <hold+0x6a>
        self->hold = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	99 8f       	std	Y+25, r25	; 0x19
     672:	88 8f       	std	Y+24, r24	; 0x18
        ASYNC(self,updateGui, NULL);
     674:	c1 2c       	mov	r12, r1
     676:	d1 2c       	mov	r13, r1
     678:	0f 2e       	mov	r0, r31
     67a:	f6 e6       	ldi	r31, 0x66	; 102
     67c:	ef 2e       	mov	r14, r31
     67e:	f3 e0       	ldi	r31, 0x03	; 3
     680:	ff 2e       	mov	r15, r31
     682:	f0 2d       	mov	r31, r0
     684:	8e 01       	movw	r16, r28
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	a9 01       	movw	r20, r18
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	cb 01       	movw	r24, r22
     692:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
        AFTER(MSEC(100),self,hold,NULL);
     696:	0f 2e       	mov	r0, r31
     698:	f6 e2       	ldi	r31, 0x26	; 38
     69a:	ef 2e       	mov	r14, r31
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	ff 2e       	mov	r15, r31
     6a0:	f0 2d       	mov	r31, r0
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	a9 01       	movw	r20, r18
     6a8:	65 e3       	ldi	r22, 0x35	; 53
     6aa:	7c e0       	ldi	r23, 0x0C	; 12
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <hold+0x6e>
    }else{
        self->hold = 0;
     6b6:	19 8e       	std	Y+25, r1	; 0x19
     6b8:	18 8e       	std	Y+24, r1	; 0x18
    }
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	08 95       	ret

000006cc <updateGui>:


void updateGui(guiObj* self){
     6cc:	cf 92       	push	r12
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	ec 01       	movw	r28, r24

    int value = readJoystick();
     6de:	0e 94 0a 03 	call	0x614	; 0x614 <readJoystick>
    self->preValue = value;
     6e2:	9f 8b       	std	Y+23, r25	; 0x17
     6e4:	8e 8b       	std	Y+22, r24	; 0x16
    if(self->debounce >= 1){
     6e6:	2a 8d       	ldd	r18, Y+26	; 0x1a
     6e8:	3b 8d       	ldd	r19, Y+27	; 0x1b
     6ea:	12 16       	cp	r1, r18
     6ec:	13 06       	cpc	r1, r19
     6ee:	0c f4       	brge	.+2      	; 0x6f2 <updateGui+0x26>
     6f0:	b8 c1       	rjmp	.+880    	; 0xa62 <updateGui+0x396>
        value = 0;
    }
    switch (value)
     6f2:	84 30       	cpi	r24, 0x04	; 4
     6f4:	91 05       	cpc	r25, r1
     6f6:	09 f4       	brne	.+2      	; 0x6fa <updateGui+0x2e>
     6f8:	06 c1       	rjmp	.+524    	; 0x906 <updateGui+0x23a>
     6fa:	44 f4       	brge	.+16     	; 0x70c <updateGui+0x40>
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	91 05       	cpc	r25, r1
     700:	09 f4       	brne	.+2      	; 0x704 <updateGui+0x38>
     702:	e5 c0       	rjmp	.+458    	; 0x8ce <updateGui+0x202>
     704:	03 97       	sbiw	r24, 0x03	; 3
     706:	09 f4       	brne	.+2      	; 0x70a <updateGui+0x3e>
     708:	ef c0       	rjmp	.+478    	; 0x8e8 <updateGui+0x21c>
     70a:	ab c1       	rjmp	.+854    	; 0xa62 <updateGui+0x396>
     70c:	86 30       	cpi	r24, 0x06	; 6
     70e:	91 05       	cpc	r25, r1
     710:	09 f4       	brne	.+2      	; 0x714 <updateGui+0x48>
     712:	6f c0       	rjmp	.+222    	; 0x7f2 <updateGui+0x126>
     714:	07 97       	sbiw	r24, 0x07	; 7
     716:	09 f0       	breq	.+2      	; 0x71a <updateGui+0x4e>
     718:	a4 c1       	rjmp	.+840    	; 0xa62 <updateGui+0x396>
    {
    case 7:  // down
        if(self->pos==0 && self->freq1 > 0){
     71a:	88 85       	ldd	r24, Y+8	; 0x08
     71c:	99 85       	ldd	r25, Y+9	; 0x09
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	31 f5       	brne	.+76     	; 0x76e <updateGui+0xa2>
     722:	cc 84       	ldd	r12, Y+12	; 0x0c
     724:	dd 84       	ldd	r13, Y+13	; 0x0d
     726:	1c 14       	cp	r1, r12
     728:	1d 04       	cpc	r1, r13
     72a:	0c f0       	brlt	.+2      	; 0x72e <updateGui+0x62>
     72c:	46 c0       	rjmp	.+140    	; 0x7ba <updateGui+0xee>
            self->freq1--;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	c8 1a       	sub	r12, r24
     732:	d1 08       	sbc	r13, r1
     734:	dd 86       	std	Y+13, r13	; 0x0d
     736:	cc 86       	std	Y+12, r12	; 0x0c
            ASYNC(self->pulse1 , setFreq ,self->freq1);
     738:	0c 81       	ldd	r16, Y+4	; 0x04
     73a:	1d 81       	ldd	r17, Y+5	; 0x05
     73c:	0f 2e       	mov	r0, r31
     73e:	f1 e3       	ldi	r31, 0x31	; 49
     740:	ef 2e       	mov	r14, r31
     742:	f6 e0       	ldi	r31, 0x06	; 6
     744:	ff 2e       	mov	r15, r31
     746:	f0 2d       	mov	r31, r0
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	a9 01       	movw	r20, r18
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	cb 01       	movw	r24, r22
     754:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
            printAt(self->freq1,self->pos);
     758:	48 85       	ldd	r20, Y+8	; 0x08
     75a:	59 85       	ldd	r21, Y+9	; 0x09
     75c:	6c 85       	ldd	r22, Y+12	; 0x0c
     75e:	7d 85       	ldd	r23, Y+13	; 0x0d
     760:	07 2e       	mov	r0, r23
     762:	00 0c       	add	r0, r0
     764:	88 0b       	sbc	r24, r24
     766:	99 0b       	sbc	r25, r25
     768:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     76c:	26 c0       	rjmp	.+76     	; 0x7ba <updateGui+0xee>
        }else if(self->pos==4 && self->freq2 > 0){
     76e:	04 97       	sbiw	r24, 0x04	; 4
     770:	21 f5       	brne	.+72     	; 0x7ba <updateGui+0xee>
     772:	ce 84       	ldd	r12, Y+14	; 0x0e
     774:	df 84       	ldd	r13, Y+15	; 0x0f
     776:	1c 14       	cp	r1, r12
     778:	1d 04       	cpc	r1, r13
     77a:	fc f4       	brge	.+62     	; 0x7ba <updateGui+0xee>
            self->freq2--;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	c8 1a       	sub	r12, r24
     780:	d1 08       	sbc	r13, r1
     782:	df 86       	std	Y+15, r13	; 0x0f
     784:	ce 86       	std	Y+14, r12	; 0x0e
            ASYNC(self->pulse2 , setFreq ,self->freq2);
     786:	0e 81       	ldd	r16, Y+6	; 0x06
     788:	1f 81       	ldd	r17, Y+7	; 0x07
     78a:	0f 2e       	mov	r0, r31
     78c:	f1 e3       	ldi	r31, 0x31	; 49
     78e:	ef 2e       	mov	r14, r31
     790:	f6 e0       	ldi	r31, 0x06	; 6
     792:	ff 2e       	mov	r15, r31
     794:	f0 2d       	mov	r31, r0
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	a9 01       	movw	r20, r18
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	cb 01       	movw	r24, r22
     7a2:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
            printAt(self->freq2,self->pos);
     7a6:	48 85       	ldd	r20, Y+8	; 0x08
     7a8:	59 85       	ldd	r21, Y+9	; 0x09
     7aa:	6e 85       	ldd	r22, Y+14	; 0x0e
     7ac:	7f 85       	ldd	r23, Y+15	; 0x0f
     7ae:	07 2e       	mov	r0, r23
     7b0:	00 0c       	add	r0, r0
     7b2:	88 0b       	sbc	r24, r24
     7b4:	99 0b       	sbc	r25, r25
     7b6:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        }
        self->debounce += 2;
     7ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7be:	02 96       	adiw	r24, 0x02	; 2
     7c0:	9b 8f       	std	Y+27, r25	; 0x1b
     7c2:	8a 8f       	std	Y+26, r24	; 0x1a
        if(self->hold == 0){      
     7c4:	88 8d       	ldd	r24, Y+24	; 0x18
     7c6:	99 8d       	ldd	r25, Y+25	; 0x19
     7c8:	89 2b       	or	r24, r25
     7ca:	09 f0       	breq	.+2      	; 0x7ce <updateGui+0x102>
     7cc:	54 c1       	rjmp	.+680    	; 0xa76 <updateGui+0x3aa>
            ASYNC(self, hold, NULL);   // starts hold cycle
     7ce:	c1 2c       	mov	r12, r1
     7d0:	d1 2c       	mov	r13, r1
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f6 e2       	ldi	r31, 0x26	; 38
     7d6:	ef 2e       	mov	r14, r31
     7d8:	f3 e0       	ldi	r31, 0x03	; 3
     7da:	ff 2e       	mov	r15, r31
     7dc:	f0 2d       	mov	r31, r0
     7de:	8e 01       	movw	r16, r28
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	a9 01       	movw	r20, r18
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	cb 01       	movw	r24, r22
     7ec:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
     7f0:	42 c1       	rjmp	.+644    	; 0xa76 <updateGui+0x3aa>
        }
        
        break;
    case 6:   //up
        if(self->pos==0 && self->freq1 < 99){
     7f2:	88 85       	ldd	r24, Y+8	; 0x08
     7f4:	99 85       	ldd	r25, Y+9	; 0x09
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	39 f5       	brne	.+78     	; 0x848 <updateGui+0x17c>
     7fa:	cc 84       	ldd	r12, Y+12	; 0x0c
     7fc:	dd 84       	ldd	r13, Y+13	; 0x0d
     7fe:	83 e6       	ldi	r24, 0x63	; 99
     800:	c8 16       	cp	r12, r24
     802:	d1 04       	cpc	r13, r1
     804:	0c f0       	brlt	.+2      	; 0x808 <updateGui+0x13c>
     806:	47 c0       	rjmp	.+142    	; 0x896 <updateGui+0x1ca>
            self->freq1++;
     808:	8f ef       	ldi	r24, 0xFF	; 255
     80a:	c8 1a       	sub	r12, r24
     80c:	d8 0a       	sbc	r13, r24
     80e:	dd 86       	std	Y+13, r13	; 0x0d
     810:	cc 86       	std	Y+12, r12	; 0x0c
            ASYNC(self->pulse1 , setFreq ,self->freq1);
     812:	0c 81       	ldd	r16, Y+4	; 0x04
     814:	1d 81       	ldd	r17, Y+5	; 0x05
     816:	0f 2e       	mov	r0, r31
     818:	f1 e3       	ldi	r31, 0x31	; 49
     81a:	ef 2e       	mov	r14, r31
     81c:	f6 e0       	ldi	r31, 0x06	; 6
     81e:	ff 2e       	mov	r15, r31
     820:	f0 2d       	mov	r31, r0
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	a9 01       	movw	r20, r18
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	cb 01       	movw	r24, r22
     82e:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
            printAt(self->freq1,self->pos);
     832:	48 85       	ldd	r20, Y+8	; 0x08
     834:	59 85       	ldd	r21, Y+9	; 0x09
     836:	6c 85       	ldd	r22, Y+12	; 0x0c
     838:	7d 85       	ldd	r23, Y+13	; 0x0d
     83a:	07 2e       	mov	r0, r23
     83c:	00 0c       	add	r0, r0
     83e:	88 0b       	sbc	r24, r24
     840:	99 0b       	sbc	r25, r25
     842:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     846:	27 c0       	rjmp	.+78     	; 0x896 <updateGui+0x1ca>
        }else if(self->pos==4 && self->freq2 < 99){
     848:	04 97       	sbiw	r24, 0x04	; 4
     84a:	29 f5       	brne	.+74     	; 0x896 <updateGui+0x1ca>
     84c:	ce 84       	ldd	r12, Y+14	; 0x0e
     84e:	df 84       	ldd	r13, Y+15	; 0x0f
     850:	83 e6       	ldi	r24, 0x63	; 99
     852:	c8 16       	cp	r12, r24
     854:	d1 04       	cpc	r13, r1
     856:	fc f4       	brge	.+62     	; 0x896 <updateGui+0x1ca>
            self->freq2++;
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	c8 1a       	sub	r12, r24
     85c:	d8 0a       	sbc	r13, r24
     85e:	df 86       	std	Y+15, r13	; 0x0f
     860:	ce 86       	std	Y+14, r12	; 0x0e
            ASYNC(self->pulse2 , setFreq ,self->freq2);
     862:	0e 81       	ldd	r16, Y+6	; 0x06
     864:	1f 81       	ldd	r17, Y+7	; 0x07
     866:	0f 2e       	mov	r0, r31
     868:	f1 e3       	ldi	r31, 0x31	; 49
     86a:	ef 2e       	mov	r14, r31
     86c:	f6 e0       	ldi	r31, 0x06	; 6
     86e:	ff 2e       	mov	r15, r31
     870:	f0 2d       	mov	r31, r0
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	a9 01       	movw	r20, r18
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	cb 01       	movw	r24, r22
     87e:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
            printAt(self->freq2,self->pos);
     882:	48 85       	ldd	r20, Y+8	; 0x08
     884:	59 85       	ldd	r21, Y+9	; 0x09
     886:	6e 85       	ldd	r22, Y+14	; 0x0e
     888:	7f 85       	ldd	r23, Y+15	; 0x0f
     88a:	07 2e       	mov	r0, r23
     88c:	00 0c       	add	r0, r0
     88e:	88 0b       	sbc	r24, r24
     890:	99 0b       	sbc	r25, r25
     892:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        }
        self->debounce += 2;
     896:	8a 8d       	ldd	r24, Y+26	; 0x1a
     898:	9b 8d       	ldd	r25, Y+27	; 0x1b
     89a:	02 96       	adiw	r24, 0x02	; 2
     89c:	9b 8f       	std	Y+27, r25	; 0x1b
     89e:	8a 8f       	std	Y+26, r24	; 0x1a
        if(self->hold == 0){
     8a0:	88 8d       	ldd	r24, Y+24	; 0x18
     8a2:	99 8d       	ldd	r25, Y+25	; 0x19
     8a4:	89 2b       	or	r24, r25
     8a6:	09 f0       	breq	.+2      	; 0x8aa <updateGui+0x1de>
     8a8:	e6 c0       	rjmp	.+460    	; 0xa76 <updateGui+0x3aa>
            ASYNC(self, hold, NULL);   // starts hold cycle
     8aa:	c1 2c       	mov	r12, r1
     8ac:	d1 2c       	mov	r13, r1
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f6 e2       	ldi	r31, 0x26	; 38
     8b2:	ef 2e       	mov	r14, r31
     8b4:	f3 e0       	ldi	r31, 0x03	; 3
     8b6:	ff 2e       	mov	r15, r31
     8b8:	f0 2d       	mov	r31, r0
     8ba:	8e 01       	movw	r16, r28
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	a9 01       	movw	r20, r18
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	cb 01       	movw	r24, r22
     8c8:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
     8cc:	d4 c0       	rjmp	.+424    	; 0xa76 <updateGui+0x3aa>
        }
        break;
    case 2:  // left
        self->pos = 0;
     8ce:	19 86       	std	Y+9, r1	; 0x09
     8d0:	18 86       	std	Y+8, r1	; 0x08
        LCDDR3 = 0;
     8d2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
        LCDDR18 = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
        self->debounce += 2;
     8dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8de:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8e0:	02 96       	adiw	r24, 0x02	; 2
     8e2:	9b 8f       	std	Y+27, r25	; 0x1b
     8e4:	8a 8f       	std	Y+26, r24	; 0x1a
        break;
     8e6:	c7 c0       	rjmp	.+398    	; 0xa76 <updateGui+0x3aa>
    case 3:   // right
        self->pos = 4;
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	99 87       	std	Y+9, r25	; 0x09
     8ee:	88 87       	std	Y+8, r24	; 0x08
        LCDDR3 = 1;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
        LCDDR18 = 0;
     8f6:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
        self->debounce += 2;
     8fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fe:	02 96       	adiw	r24, 0x02	; 2
     900:	9b 8f       	std	Y+27, r25	; 0x1b
     902:	8a 8f       	std	Y+26, r24	; 0x1a
        break;
     904:	b8 c0       	rjmp	.+368    	; 0xa76 <updateGui+0x3aa>
    case 4:   // center
        if(self->pos == 0){
     906:	88 85       	ldd	r24, Y+8	; 0x08
     908:	99 85       	ldd	r25, Y+9	; 0x09
     90a:	00 97       	sbiw	r24, 0x00	; 0
     90c:	09 f0       	breq	.+2      	; 0x910 <updateGui+0x244>
     90e:	4f c0       	rjmp	.+158    	; 0x9ae <updateGui+0x2e2>
            if(self->freq1 != 0){
     910:	cc 84       	ldd	r12, Y+12	; 0x0c
     912:	dd 84       	ldd	r13, Y+13	; 0x0d
     914:	c1 14       	cp	r12, r1
     916:	d1 04       	cpc	r13, r1
     918:	49 f1       	breq	.+82     	; 0x96c <updateGui+0x2a0>
                ASYNC(self->pulse1,saveFreq, self->freq1); 
     91a:	0c 81       	ldd	r16, Y+4	; 0x04
     91c:	1d 81       	ldd	r17, Y+5	; 0x05
     91e:	0f 2e       	mov	r0, r31
     920:	f5 e3       	ldi	r31, 0x35	; 53
     922:	ef 2e       	mov	r14, r31
     924:	f6 e0       	ldi	r31, 0x06	; 6
     926:	ff 2e       	mov	r15, r31
     928:	f0 2d       	mov	r31, r0
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	a9 01       	movw	r20, r18
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	cb 01       	movw	r24, r22
     936:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
                self->savedFreq1 = self->freq1;
     93a:	8c 85       	ldd	r24, Y+12	; 0x0c
     93c:	9d 85       	ldd	r25, Y+13	; 0x0d
     93e:	99 8b       	std	Y+17, r25	; 0x11
     940:	88 8b       	std	Y+16, r24	; 0x10
                ASYNC(self->pulse1,setFreq, 0);
     942:	0c 81       	ldd	r16, Y+4	; 0x04
     944:	1d 81       	ldd	r17, Y+5	; 0x05
     946:	c1 2c       	mov	r12, r1
     948:	d1 2c       	mov	r13, r1
     94a:	0f 2e       	mov	r0, r31
     94c:	f1 e3       	ldi	r31, 0x31	; 49
     94e:	ef 2e       	mov	r14, r31
     950:	f6 e0       	ldi	r31, 0x06	; 6
     952:	ff 2e       	mov	r15, r31
     954:	f0 2d       	mov	r31, r0
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	a9 01       	movw	r20, r18
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	cb 01       	movw	r24, r22
     962:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
                self->freq1 = 0;
     966:	1d 86       	std	Y+13, r1	; 0x0d
     968:	1c 86       	std	Y+12, r1	; 0x0c
     96a:	16 c0       	rjmp	.+44     	; 0x998 <updateGui+0x2cc>
            }else{
                ASYNC(self->pulse1, setSaveFreq, NULL);
     96c:	0c 81       	ldd	r16, Y+4	; 0x04
     96e:	1d 81       	ldd	r17, Y+5	; 0x05
     970:	c1 2c       	mov	r12, r1
     972:	d1 2c       	mov	r13, r1
     974:	0f 2e       	mov	r0, r31
     976:	f9 e3       	ldi	r31, 0x39	; 57
     978:	ef 2e       	mov	r14, r31
     97a:	f6 e0       	ldi	r31, 0x06	; 6
     97c:	ff 2e       	mov	r15, r31
     97e:	f0 2d       	mov	r31, r0
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	a9 01       	movw	r20, r18
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	cb 01       	movw	r24, r22
     98c:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
                self->freq1 = self->savedFreq1;
     990:	88 89       	ldd	r24, Y+16	; 0x10
     992:	99 89       	ldd	r25, Y+17	; 0x11
     994:	9d 87       	std	Y+13, r25	; 0x0d
     996:	8c 87       	std	Y+12, r24	; 0x0c
                
            }
            printAt(self->freq1,self->pos);
     998:	48 85       	ldd	r20, Y+8	; 0x08
     99a:	59 85       	ldd	r21, Y+9	; 0x09
     99c:	6c 85       	ldd	r22, Y+12	; 0x0c
     99e:	7d 85       	ldd	r23, Y+13	; 0x0d
     9a0:	07 2e       	mov	r0, r23
     9a2:	00 0c       	add	r0, r0
     9a4:	88 0b       	sbc	r24, r24
     9a6:	99 0b       	sbc	r25, r25
     9a8:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     9ac:	51 c0       	rjmp	.+162    	; 0xa50 <updateGui+0x384>
        }else if(self->pos == 4){
     9ae:	04 97       	sbiw	r24, 0x04	; 4
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <updateGui+0x2e8>
     9b2:	4e c0       	rjmp	.+156    	; 0xa50 <updateGui+0x384>
            if(self->freq2 != 0){
     9b4:	ce 84       	ldd	r12, Y+14	; 0x0e
     9b6:	df 84       	ldd	r13, Y+15	; 0x0f
     9b8:	c1 14       	cp	r12, r1
     9ba:	d1 04       	cpc	r13, r1
     9bc:	49 f1       	breq	.+82     	; 0xa10 <updateGui+0x344>
                ASYNC(self->pulse2,saveFreq, self->freq2); 
     9be:	0e 81       	ldd	r16, Y+6	; 0x06
     9c0:	1f 81       	ldd	r17, Y+7	; 0x07
     9c2:	0f 2e       	mov	r0, r31
     9c4:	f5 e3       	ldi	r31, 0x35	; 53
     9c6:	ef 2e       	mov	r14, r31
     9c8:	f6 e0       	ldi	r31, 0x06	; 6
     9ca:	ff 2e       	mov	r15, r31
     9cc:	f0 2d       	mov	r31, r0
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	a9 01       	movw	r20, r18
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	cb 01       	movw	r24, r22
     9da:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
                self->savedFreq2 = self->freq2;
     9de:	8e 85       	ldd	r24, Y+14	; 0x0e
     9e0:	9f 85       	ldd	r25, Y+15	; 0x0f
     9e2:	9b 8b       	std	Y+19, r25	; 0x13
     9e4:	8a 8b       	std	Y+18, r24	; 0x12
                ASYNC(self->pulse2,setFreq, 0);
     9e6:	0e 81       	ldd	r16, Y+6	; 0x06
     9e8:	1f 81       	ldd	r17, Y+7	; 0x07
     9ea:	c1 2c       	mov	r12, r1
     9ec:	d1 2c       	mov	r13, r1
     9ee:	0f 2e       	mov	r0, r31
     9f0:	f1 e3       	ldi	r31, 0x31	; 49
     9f2:	ef 2e       	mov	r14, r31
     9f4:	f6 e0       	ldi	r31, 0x06	; 6
     9f6:	ff 2e       	mov	r15, r31
     9f8:	f0 2d       	mov	r31, r0
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	a9 01       	movw	r20, r18
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	cb 01       	movw	r24, r22
     a06:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
                self->freq2 = 0;
     a0a:	1f 86       	std	Y+15, r1	; 0x0f
     a0c:	1e 86       	std	Y+14, r1	; 0x0e
     a0e:	16 c0       	rjmp	.+44     	; 0xa3c <updateGui+0x370>
            }else{
                ASYNC(self->pulse2, setSaveFreq, NULL);
     a10:	0e 81       	ldd	r16, Y+6	; 0x06
     a12:	1f 81       	ldd	r17, Y+7	; 0x07
     a14:	c1 2c       	mov	r12, r1
     a16:	d1 2c       	mov	r13, r1
     a18:	0f 2e       	mov	r0, r31
     a1a:	f9 e3       	ldi	r31, 0x39	; 57
     a1c:	ef 2e       	mov	r14, r31
     a1e:	f6 e0       	ldi	r31, 0x06	; 6
     a20:	ff 2e       	mov	r15, r31
     a22:	f0 2d       	mov	r31, r0
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	a9 01       	movw	r20, r18
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	cb 01       	movw	r24, r22
     a30:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
                self->freq2 = self->savedFreq2;
     a34:	8a 89       	ldd	r24, Y+18	; 0x12
     a36:	9b 89       	ldd	r25, Y+19	; 0x13
     a38:	9f 87       	std	Y+15, r25	; 0x0f
     a3a:	8e 87       	std	Y+14, r24	; 0x0e
            }
            printAt(self->freq2,self->pos);
     a3c:	48 85       	ldd	r20, Y+8	; 0x08
     a3e:	59 85       	ldd	r21, Y+9	; 0x09
     a40:	6e 85       	ldd	r22, Y+14	; 0x0e
     a42:	7f 85       	ldd	r23, Y+15	; 0x0f
     a44:	07 2e       	mov	r0, r23
     a46:	00 0c       	add	r0, r0
     a48:	88 0b       	sbc	r24, r24
     a4a:	99 0b       	sbc	r25, r25
     a4c:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        }
        printAt(4,2);
     a50:	42 e0       	ldi	r20, 0x02	; 2
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	64 e0       	ldi	r22, 0x04	; 4
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        break;
     a60:	0a c0       	rjmp	.+20     	; 0xa76 <updateGui+0x3aa>
    default:
       
        self->debounce = 0;
     a62:	1b 8e       	std	Y+27, r1	; 0x1b
     a64:	1a 8e       	std	Y+26, r1	; 0x1a
        
        printAt(2,2);
     a66:	42 e0       	ldi	r20, 0x02	; 2
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        break;
    }
    
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	08 95       	ret

00000a88 <interupts>:

/*void unlock(mainObj* self){
    self->lock = 0;
}*/

void interupts(mainObj* self){
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
    ASYNC(self->gui, updateGui, NULL);
     a94:	fc 01       	movw	r30, r24
     a96:	02 85       	ldd	r16, Z+10	; 0x0a
     a98:	13 85       	ldd	r17, Z+11	; 0x0b
     a9a:	c1 2c       	mov	r12, r1
     a9c:	d1 2c       	mov	r13, r1
     a9e:	0f 2e       	mov	r0, r31
     aa0:	f6 e6       	ldi	r31, 0x66	; 102
     aa2:	ef 2e       	mov	r14, r31
     aa4:	f3 e0       	ldi	r31, 0x03	; 3
     aa6:	ff 2e       	mov	r15, r31
     aa8:	f0 2d       	mov	r31, r0
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	a9 01       	movw	r20, r18
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	cb 01       	movw	r24, r22
     ab6:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
}
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	08 95       	ret

00000ac8 <run>:


void run(mainObj* self){
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	ec 01       	movw	r28, r24
    INSTALL(self, interupts, IRQ_PCINT0);
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	64 e4       	ldi	r22, 0x44	; 68
     ade:	75 e0       	ldi	r23, 0x05	; 5
     ae0:	0e 94 4d 12 	call	0x249a	; 0x249a <install>
    INSTALL(self, interupts, IRQ_PCINT1);
     ae4:	42 e0       	ldi	r20, 0x02	; 2
     ae6:	64 e4       	ldi	r22, 0x44	; 68
     ae8:	75 e0       	ldi	r23, 0x05	; 5
     aea:	ce 01       	movw	r24, r28
     aec:	0e 94 4d 12 	call	0x249a	; 0x249a <install>


    ASYNC(self->pulse1, cycle, NULL);
     af0:	0e 81       	ldd	r16, Y+6	; 0x06
     af2:	1f 81       	ldd	r17, Y+7	; 0x07
     af4:	c1 2c       	mov	r12, r1
     af6:	d1 2c       	mov	r13, r1
     af8:	0f 2e       	mov	r0, r31
     afa:	fb ec       	ldi	r31, 0xCB	; 203
     afc:	ef 2e       	mov	r14, r31
     afe:	f5 e0       	ldi	r31, 0x05	; 5
     b00:	ff 2e       	mov	r15, r31
     b02:	f0 2d       	mov	r31, r0
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	a9 01       	movw	r20, r18
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	cb 01       	movw	r24, r22
     b10:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
    ASYNC(self->pulse2, cycle, NULL);
     b14:	08 85       	ldd	r16, Y+8	; 0x08
     b16:	19 85       	ldd	r17, Y+9	; 0x09
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	a9 01       	movw	r20, r18
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	cb 01       	movw	r24, r22
     b24:	0e 94 41 10 	call	0x2082	; 0x2082 <async>


}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	08 95       	ret

00000b3a <main>:

int main(void)
{
    Gui__init();
     b3a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Gui__init>




    //SYNC(&pulse,cycle, 4);
    return TINYTIMBER(&mainObject, run, NULL);
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	64 e6       	ldi	r22, 0x64	; 100
     b44:	75 e0       	ldi	r23, 0x05	; 5
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	0e 94 67 12 	call	0x24ce	; 0x24ce <tinytimber>
	
    while (1) 
    {

    }
}
     b4e:	08 95       	ret

00000b50 <write>:

#include "portWriter.h"
#include <avr/io.h>

int write(portWriter* self, int arg){
    if(PORTE &(1<<arg)){
     b50:	8e b1       	in	r24, 0x0e	; 14
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	06 2e       	mov	r0, r22
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <write+0xc>
     b58:	95 95       	asr	r25
     b5a:	87 95       	ror	r24
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <write+0x8>
     b60:	80 ff       	sbrs	r24, 0
     b62:	0c c0       	rjmp	.+24     	; 0xb7c <write+0x2c>
        PORTE &= ~(1<<arg);
     b64:	2e b1       	in	r18, 0x0e	; 14
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <write+0x20>
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	6a 95       	dec	r22
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <write+0x1c>
     b74:	80 95       	com	r24
     b76:	82 23       	and	r24, r18
     b78:	8e b9       	out	0x0e, r24	; 14
     b7a:	0a c0       	rjmp	.+20     	; 0xb90 <write+0x40>
    }else{
        PORTE |= (1<<arg);
     b7c:	2e b1       	in	r18, 0x0e	; 14
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <write+0x38>
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	6a 95       	dec	r22
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <write+0x34>
     b8c:	82 2b       	or	r24, r18
     b8e:	8e b9       	out	0x0e, r24	; 14
    }

    return 0;
    
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	08 95       	ret

00000b96 <cycle>:
void decFreq(pulseGenerator* self){
    self->freq--;
}
int getFreq(pulseGenerator* self){
    return self->freq;
}
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ec 01       	movw	r28, r24
     ba8:	88 85       	ldd	r24, Y+8	; 0x08
     baa:	99 85       	ldd	r25, Y+9	; 0x09
     bac:	89 2b       	or	r24, r25
     bae:	f1 f1       	breq	.+124    	; 0xc2c <cycle+0x96>
     bb0:	ce 80       	ldd	r12, Y+6	; 0x06
     bb2:	df 80       	ldd	r13, Y+7	; 0x07
     bb4:	0c 81       	ldd	r16, Y+4	; 0x04
     bb6:	1d 81       	ldd	r17, Y+5	; 0x05
     bb8:	0f 2e       	mov	r0, r31
     bba:	f8 ea       	ldi	r31, 0xA8	; 168
     bbc:	ef 2e       	mov	r14, r31
     bbe:	f5 e0       	ldi	r31, 0x05	; 5
     bc0:	ff 2e       	mov	r15, r31
     bc2:	f0 2d       	mov	r31, r0
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	a9 01       	movw	r20, r18
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	cb 01       	movw	r24, r22
     bd0:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
     bd4:	68 85       	ldd	r22, Y+8	; 0x08
     bd6:	79 85       	ldd	r23, Y+9	; 0x09
     bd8:	84 ef       	ldi	r24, 0xF4	; 244
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 83 12 	call	0x2506	; 0x2506 <__divmodhi4>
     be0:	2d e7       	ldi	r18, 0x7D	; 125
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	db 01       	movw	r26, r22
     be6:	0e 94 bc 12 	call	0x2578	; 0x2578 <__usmulhisi3>
     bea:	8b 01       	movw	r16, r22
     bec:	9c 01       	movw	r18, r24
     bee:	99 23       	and	r25, r25
     bf0:	24 f4       	brge	.+8      	; 0xbfa <cycle+0x64>
     bf2:	0d 5f       	subi	r16, 0xFD	; 253
     bf4:	1f 4f       	sbci	r17, 0xFF	; 255
     bf6:	2f 4f       	sbci	r18, 0xFF	; 255
     bf8:	3f 4f       	sbci	r19, 0xFF	; 255
     bfa:	c9 01       	movw	r24, r18
     bfc:	b8 01       	movw	r22, r16
     bfe:	95 95       	asr	r25
     c00:	87 95       	ror	r24
     c02:	77 95       	ror	r23
     c04:	67 95       	ror	r22
     c06:	95 95       	asr	r25
     c08:	87 95       	ror	r24
     c0a:	77 95       	ror	r23
     c0c:	67 95       	ror	r22
     c0e:	c1 2c       	mov	r12, r1
     c10:	d1 2c       	mov	r13, r1
     c12:	0f 2e       	mov	r0, r31
     c14:	fb ec       	ldi	r31, 0xCB	; 203
     c16:	ef 2e       	mov	r14, r31
     c18:	f5 e0       	ldi	r31, 0x05	; 5
     c1a:	ff 2e       	mov	r15, r31
     c1c:	f0 2d       	mov	r31, r0
     c1e:	8e 01       	movw	r16, r28
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	a9 01       	movw	r20, r18
     c26:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
     c2a:	12 c0       	rjmp	.+36     	; 0xc50 <cycle+0xba>
     c2c:	c1 2c       	mov	r12, r1
     c2e:	d1 2c       	mov	r13, r1
     c30:	0f 2e       	mov	r0, r31
     c32:	fb ec       	ldi	r31, 0xCB	; 203
     c34:	ef 2e       	mov	r14, r31
     c36:	f5 e0       	ldi	r31, 0x05	; 5
     c38:	ff 2e       	mov	r15, r31
     c3a:	f0 2d       	mov	r31, r0
     c3c:	8e 01       	movw	r16, r28
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	a9 01       	movw	r20, r18
     c44:	69 e0       	ldi	r22, 0x09	; 9
     c46:	7d e3       	ldi	r23, 0x3D	; 61
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	08 95       	ret

00000c62 <setFreq>:
void setFreq(pulseGenerator* self, int freq){
    self->freq = freq;
     c62:	fc 01       	movw	r30, r24
     c64:	71 87       	std	Z+9, r23	; 0x09
     c66:	60 87       	std	Z+8, r22	; 0x08
     c68:	08 95       	ret

00000c6a <saveFreq>:
}
void saveFreq(pulseGenerator* self, int freq){
    self->savedFreq = freq;
     c6a:	fc 01       	movw	r30, r24
     c6c:	73 87       	std	Z+11, r23	; 0x0b
     c6e:	62 87       	std	Z+10, r22	; 0x0a
     c70:	08 95       	ret

00000c72 <setSaveFreq>:
}
void setSaveFreq(pulseGenerator* self){
    self->freq = self->savedFreq;
     c72:	fc 01       	movw	r30, r24
     c74:	22 85       	ldd	r18, Z+10	; 0x0a
     c76:	33 85       	ldd	r19, Z+11	; 0x0b
     c78:	31 87       	std	Z+9, r19	; 0x09
     c7a:	20 87       	std	Z+8, r18	; 0x08
     c7c:	08 95       	ret

00000c7e <initialize>:
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	00 d0       	rcall	.+0      	; 0xc84 <initialize+0x6>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <initialize+0x8>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	81 e4       	ldi	r24, 0x41	; 65
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	21 e2       	ldi	r18, 0x21	; 33
     c90:	33 e0       	ldi	r19, 0x03	; 3
     c92:	fc 01       	movw	r30, r24
     c94:	70 97       	sbiw	r30, 0x10	; 16
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
     c9a:	40 96       	adiw	r24, 0x10	; 16
     c9c:	82 17       	cp	r24, r18
     c9e:	93 07       	cpc	r25, r19
     ca0:	c1 f7       	brne	.-16     	; 0xc92 <initialize+0x14>
     ca2:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <messages+0xe1>
     ca6:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <messages+0xe0>
     caa:	ec e7       	ldi	r30, 0x7C	; 124
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	89 e9       	ldi	r24, 0x99	; 153
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
     cb6:	86 eb       	ldi	r24, 0xB6	; 182
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	96 8f       	std	Z+30, r25	; 0x1e
     cbc:	85 8f       	std	Z+29, r24	; 0x1d
     cbe:	a3 ed       	ldi	r26, 0xD3	; 211
     cc0:	b1 e0       	ldi	r27, 0x01	; 1
     cc2:	b3 af       	std	Z+59, r27	; 0x3b
     cc4:	a2 af       	std	Z+58, r26	; 0x3a
     cc6:	1d 92       	st	X+, r1
     cc8:	1c 92       	st	X, r1
     cca:	fa 83       	std	Y+2, r31	; 0x02
     ccc:	e9 83       	std	Y+1, r30	; 0x01
     cce:	ed e7       	ldi	r30, 0x7D	; 125
     cd0:	f3 e0       	ldi	r31, 0x03	; 3
     cd2:	fc 83       	std	Y+4, r31	; 0x04
     cd4:	eb 83       	std	Y+3, r30	; 0x03
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	06 96       	adiw	r24, 0x06	; 6
     cdc:	0e 94 08 13 	call	0x2610	; 0x2610 <setjmp>
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	e9 81       	ldd	r30, Y+1	; 0x01
     ce6:	fa 81       	ldd	r31, Y+2	; 0x02
     ce8:	97 8b       	std	Z+23, r25	; 0x17
     cea:	86 8b       	std	Z+22, r24	; 0x16
     cec:	91 8f       	std	Z+25, r25	; 0x19
     cee:	80 8f       	std	Z+24, r24	; 0x18
     cf0:	8f ed       	ldi	r24, 0xDF	; 223
     cf2:	91 e1       	ldi	r25, 0x11	; 17
     cf4:	94 8f       	std	Z+28, r25	; 0x1c
     cf6:	83 8f       	std	Z+27, r24	; 0x1b
     cf8:	15 82       	std	Z+5, r1	; 0x05
     cfa:	14 82       	std	Z+4, r1	; 0x04
     cfc:	7d 96       	adiw	r30, 0x1d	; 29
     cfe:	fa 83       	std	Y+2, r31	; 0x02
     d00:	e9 83       	std	Y+1, r30	; 0x01
     d02:	eb 81       	ldd	r30, Y+3	; 0x03
     d04:	fc 81       	ldd	r31, Y+4	; 0x04
     d06:	e0 5a       	subi	r30, 0xA0	; 160
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	fc 83       	std	Y+4, r31	; 0x04
     d0c:	eb 83       	std	Y+3, r30	; 0x03
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	80 5f       	subi	r24, 0xF0	; 240
     d14:	91 40       	sbci	r25, 0x01	; 1
     d16:	f9 f6       	brne	.-66     	; 0xcd6 <initialize+0x58>
     d18:	e4 e1       	ldi	r30, 0x14	; 20
     d1a:	f2 e0       	ldi	r31, 0x02	; 2
     d1c:	11 82       	std	Z+1, r1	; 0x01
     d1e:	10 82       	st	Z, r1
     d20:	15 82       	std	Z+5, r1	; 0x05
     d22:	14 82       	std	Z+4, r1	; 0x04
     d24:	13 82       	std	Z+3, r1	; 0x03
     d26:	12 82       	std	Z+2, r1	; 0x02
     d28:	e1 e6       	ldi	r30, 0x61	; 97
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 e8       	ldi	r24, 0x80	; 128
     d2e:	80 83       	st	Z, r24
     d30:	10 82       	st	Z, r1
     d32:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d36:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <dispatch>:
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	00 d0       	rcall	.+0      	; 0xd5a <dispatch+0x6>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <current>
     d66:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <current+0x1>
     d6a:	06 96       	adiw	r24, 0x06	; 6
     d6c:	0e 94 08 13 	call	0x2610	; 0x2610 <setjmp>
     d70:	89 2b       	or	r24, r25
     d72:	59 f4       	brne	.+22     	; 0xd8a <dispatch+0x36>
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <current+0x1>
     d7c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <current>
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	06 96       	adiw	r24, 0x06	; 6
     d86:	0e 94 28 13 	call	0x2650	; 0x2650 <longjmp>
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <schedule>:
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <msgQ>
     da0:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <msgQ+0x1>
     da4:	30 97       	sbiw	r30, 0x00	; 0
     da6:	61 f1       	breq	.+88     	; 0xe00 <schedule+0x6c>
     da8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <threadPool>
     dac:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <threadPool+0x1>
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	31 f1       	breq	.+76     	; 0xe00 <schedule+0x6c>
     db4:	c0 91 44 01 	lds	r28, 0x0144	; 0x800144 <activeStack>
     db8:	d0 91 45 01 	lds	r29, 0x0145	; 0x800145 <activeStack+0x1>
     dbc:	aa 81       	ldd	r26, Y+2	; 0x02
     dbe:	bb 81       	ldd	r27, Y+3	; 0x03
     dc0:	10 97       	sbiw	r26, 0x00	; 0
     dc2:	79 f0       	breq	.+30     	; 0xde2 <schedule+0x4e>
     dc4:	46 81       	ldd	r20, Z+6	; 0x06
     dc6:	57 81       	ldd	r21, Z+7	; 0x07
     dc8:	60 85       	ldd	r22, Z+8	; 0x08
     dca:	71 85       	ldd	r23, Z+9	; 0x09
     dcc:	16 96       	adiw	r26, 0x06	; 6
     dce:	0d 91       	ld	r16, X+
     dd0:	1d 91       	ld	r17, X+
     dd2:	2d 91       	ld	r18, X+
     dd4:	3c 91       	ld	r19, X
     dd6:	19 97       	sbiw	r26, 0x09	; 9
     dd8:	40 1b       	sub	r20, r16
     dda:	51 0b       	sbc	r21, r17
     ddc:	62 0b       	sbc	r22, r18
     dde:	73 0b       	sbc	r23, r19
     de0:	7a f4       	brpl	.+30     	; 0xe00 <schedule+0x6c>
     de2:	fc 01       	movw	r30, r24
     de4:	20 81       	ld	r18, Z
     de6:	31 81       	ldd	r19, Z+1	; 0x01
     de8:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <threadPool+0x1>
     dec:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <threadPool>
     df0:	d1 83       	std	Z+1, r29	; 0x01
     df2:	c0 83       	st	Z, r28
     df4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <activeStack+0x1>
     df8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <activeStack>
     dfc:	0e 94 aa 06 	call	0xd54	; 0xd54 <dispatch>
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <__vector_1>:
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
     e30:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
     e34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e3c:	c9 01       	movw	r24, r18
     e3e:	03 2e       	mov	r0, r19
     e40:	00 0c       	add	r0, r0
     e42:	aa 0b       	sbc	r26, r26
     e44:	bb 0b       	sbc	r27, r27
     e46:	dc 01       	movw	r26, r24
     e48:	99 27       	eor	r25, r25
     e4a:	88 27       	eor	r24, r24
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	84 2b       	or	r24, r20
     e52:	95 2b       	or	r25, r21
     e54:	a6 2b       	or	r26, r22
     e56:	b7 2b       	or	r27, r23
     e58:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
     e5c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
     e60:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
     e64:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
     e68:	b0 9b       	sbis	0x16, 0	; 22
     e6a:	1b c0       	rjmp	.+54     	; 0xea2 <__vector_1+0x98>
     e6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e74:	c9 01       	movw	r24, r18
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	09 2e       	mov	r0, r25
     e7a:	00 0c       	add	r0, r0
     e7c:	aa 0b       	sbc	r26, r26
     e7e:	bb 0b       	sbc	r27, r27
     e80:	dc 01       	movw	r26, r24
     e82:	99 27       	eor	r25, r25
     e84:	88 27       	eor	r24, r24
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	84 2b       	or	r24, r20
     e8c:	95 2b       	or	r25, r21
     e8e:	a6 2b       	or	r26, r22
     e90:	b7 2b       	or	r27, r23
     e92:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
     e96:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
     e9a:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
     e9e:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
     ea2:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable>
     ea6:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x1>
     eaa:	30 97       	sbiw	r30, 0x00	; 0
     eac:	39 f0       	breq	.+14     	; 0xebc <__vector_1+0xb2>
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable>
     eb6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x1>
     eba:	09 95       	icall
     ebc:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <__vector_2>:
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
     f08:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
     f0c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f10:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f14:	c9 01       	movw	r24, r18
     f16:	03 2e       	mov	r0, r19
     f18:	00 0c       	add	r0, r0
     f1a:	aa 0b       	sbc	r26, r26
     f1c:	bb 0b       	sbc	r27, r27
     f1e:	dc 01       	movw	r26, r24
     f20:	99 27       	eor	r25, r25
     f22:	88 27       	eor	r24, r24
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	84 2b       	or	r24, r20
     f2a:	95 2b       	or	r25, r21
     f2c:	a6 2b       	or	r26, r22
     f2e:	b7 2b       	or	r27, r23
     f30:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
     f34:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
     f38:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
     f3c:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
     f40:	b0 9b       	sbis	0x16, 0	; 22
     f42:	1b c0       	rjmp	.+54     	; 0xf7a <__vector_2+0x98>
     f44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f4c:	c9 01       	movw	r24, r18
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	09 2e       	mov	r0, r25
     f52:	00 0c       	add	r0, r0
     f54:	aa 0b       	sbc	r26, r26
     f56:	bb 0b       	sbc	r27, r27
     f58:	dc 01       	movw	r26, r24
     f5a:	99 27       	eor	r25, r25
     f5c:	88 27       	eor	r24, r24
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	84 2b       	or	r24, r20
     f64:	95 2b       	or	r25, r21
     f66:	a6 2b       	or	r26, r22
     f68:	b7 2b       	or	r27, r23
     f6a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
     f6e:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
     f72:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
     f76:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
     f7a:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x2>
     f7e:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x3>
     f82:	30 97       	sbiw	r30, 0x00	; 0
     f84:	39 f0       	breq	.+14     	; 0xf94 <__vector_2+0xb2>
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x2>
     f8e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x3>
     f92:	09 95       	icall
     f94:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_3>:
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
     fdc:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
     fe0:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
     fe4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fe8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fec:	c9 01       	movw	r24, r18
     fee:	03 2e       	mov	r0, r19
     ff0:	00 0c       	add	r0, r0
     ff2:	aa 0b       	sbc	r26, r26
     ff4:	bb 0b       	sbc	r27, r27
     ff6:	dc 01       	movw	r26, r24
     ff8:	99 27       	eor	r25, r25
     ffa:	88 27       	eor	r24, r24
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	84 2b       	or	r24, r20
    1002:	95 2b       	or	r25, r21
    1004:	a6 2b       	or	r26, r22
    1006:	b7 2b       	or	r27, r23
    1008:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    100c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1010:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1014:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1018:	b0 9b       	sbis	0x16, 0	; 22
    101a:	1b c0       	rjmp	.+54     	; 0x1052 <__vector_3+0x98>
    101c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1020:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1024:	c9 01       	movw	r24, r18
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	09 2e       	mov	r0, r25
    102a:	00 0c       	add	r0, r0
    102c:	aa 0b       	sbc	r26, r26
    102e:	bb 0b       	sbc	r27, r27
    1030:	dc 01       	movw	r26, r24
    1032:	99 27       	eor	r25, r25
    1034:	88 27       	eor	r24, r24
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	84 2b       	or	r24, r20
    103c:	95 2b       	or	r25, r21
    103e:	a6 2b       	or	r26, r22
    1040:	b7 2b       	or	r27, r23
    1042:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1046:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    104a:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    104e:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1052:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x4>
    1056:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x5>
    105a:	30 97       	sbiw	r30, 0x00	; 0
    105c:	39 f0       	breq	.+14     	; 0x106c <__vector_3+0xb2>
    105e:	62 e0       	ldi	r22, 0x02	; 2
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x4>
    1066:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x5>
    106a:	09 95       	icall
    106c:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_4>:
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    10b8:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    10bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10c4:	c9 01       	movw	r24, r18
    10c6:	03 2e       	mov	r0, r19
    10c8:	00 0c       	add	r0, r0
    10ca:	aa 0b       	sbc	r26, r26
    10cc:	bb 0b       	sbc	r27, r27
    10ce:	dc 01       	movw	r26, r24
    10d0:	99 27       	eor	r25, r25
    10d2:	88 27       	eor	r24, r24
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	84 2b       	or	r24, r20
    10da:	95 2b       	or	r25, r21
    10dc:	a6 2b       	or	r26, r22
    10de:	b7 2b       	or	r27, r23
    10e0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    10e4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    10e8:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    10ec:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    10f0:	b0 9b       	sbis	0x16, 0	; 22
    10f2:	1b c0       	rjmp	.+54     	; 0x112a <__vector_4+0x98>
    10f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10fc:	c9 01       	movw	r24, r18
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	09 2e       	mov	r0, r25
    1102:	00 0c       	add	r0, r0
    1104:	aa 0b       	sbc	r26, r26
    1106:	bb 0b       	sbc	r27, r27
    1108:	dc 01       	movw	r26, r24
    110a:	99 27       	eor	r25, r25
    110c:	88 27       	eor	r24, r24
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	84 2b       	or	r24, r20
    1114:	95 2b       	or	r25, r21
    1116:	a6 2b       	or	r26, r22
    1118:	b7 2b       	or	r27, r23
    111a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    111e:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1122:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1126:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    112a:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x6>
    112e:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x7>
    1132:	30 97       	sbiw	r30, 0x00	; 0
    1134:	39 f0       	breq	.+14     	; 0x1144 <__vector_4+0xb2>
    1136:	63 e0       	ldi	r22, 0x03	; 3
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x6>
    113e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x7>
    1142:	09 95       	icall
    1144:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	0f 90       	pop	r0
    1166:	1f 90       	pop	r1
    1168:	18 95       	reti

0000116a <__vector_5>:
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	2f 93       	push	r18
    1176:	3f 93       	push	r19
    1178:	4f 93       	push	r20
    117a:	5f 93       	push	r21
    117c:	6f 93       	push	r22
    117e:	7f 93       	push	r23
    1180:	8f 93       	push	r24
    1182:	9f 93       	push	r25
    1184:	af 93       	push	r26
    1186:	bf 93       	push	r27
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
    118c:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1190:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    1194:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1198:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    119c:	c9 01       	movw	r24, r18
    119e:	03 2e       	mov	r0, r19
    11a0:	00 0c       	add	r0, r0
    11a2:	aa 0b       	sbc	r26, r26
    11a4:	bb 0b       	sbc	r27, r27
    11a6:	dc 01       	movw	r26, r24
    11a8:	99 27       	eor	r25, r25
    11aa:	88 27       	eor	r24, r24
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	84 2b       	or	r24, r20
    11b2:	95 2b       	or	r25, r21
    11b4:	a6 2b       	or	r26, r22
    11b6:	b7 2b       	or	r27, r23
    11b8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    11bc:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    11c0:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    11c4:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    11c8:	b0 9b       	sbis	0x16, 0	; 22
    11ca:	1b c0       	rjmp	.+54     	; 0x1202 <__vector_5+0x98>
    11cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11d4:	c9 01       	movw	r24, r18
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	09 2e       	mov	r0, r25
    11da:	00 0c       	add	r0, r0
    11dc:	aa 0b       	sbc	r26, r26
    11de:	bb 0b       	sbc	r27, r27
    11e0:	dc 01       	movw	r26, r24
    11e2:	99 27       	eor	r25, r25
    11e4:	88 27       	eor	r24, r24
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	84 2b       	or	r24, r20
    11ec:	95 2b       	or	r25, r21
    11ee:	a6 2b       	or	r26, r22
    11f0:	b7 2b       	or	r27, r23
    11f2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    11f6:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    11fa:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    11fe:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1202:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x8>
    1206:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x9>
    120a:	30 97       	sbiw	r30, 0x00	; 0
    120c:	39 f0       	breq	.+14     	; 0x121c <__vector_5+0xb2>
    120e:	64 e0       	ldi	r22, 0x04	; 4
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x8>
    1216:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x9>
    121a:	09 95       	icall
    121c:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	0f 90       	pop	r0
    123e:	1f 90       	pop	r1
    1240:	18 95       	reti

00001242 <__vector_10>:
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	0f 92       	push	r0
    124a:	11 24       	eor	r1, r1
    124c:	2f 93       	push	r18
    124e:	3f 93       	push	r19
    1250:	4f 93       	push	r20
    1252:	5f 93       	push	r21
    1254:	6f 93       	push	r22
    1256:	7f 93       	push	r23
    1258:	8f 93       	push	r24
    125a:	9f 93       	push	r25
    125c:	af 93       	push	r26
    125e:	bf 93       	push	r27
    1260:	ef 93       	push	r30
    1262:	ff 93       	push	r31
    1264:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1268:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    126c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1270:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1274:	c9 01       	movw	r24, r18
    1276:	03 2e       	mov	r0, r19
    1278:	00 0c       	add	r0, r0
    127a:	aa 0b       	sbc	r26, r26
    127c:	bb 0b       	sbc	r27, r27
    127e:	dc 01       	movw	r26, r24
    1280:	99 27       	eor	r25, r25
    1282:	88 27       	eor	r24, r24
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	84 2b       	or	r24, r20
    128a:	95 2b       	or	r25, r21
    128c:	a6 2b       	or	r26, r22
    128e:	b7 2b       	or	r27, r23
    1290:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1294:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1298:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    129c:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    12a0:	b0 9b       	sbis	0x16, 0	; 22
    12a2:	1b c0       	rjmp	.+54     	; 0x12da <__vector_10+0x98>
    12a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ac:	c9 01       	movw	r24, r18
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	09 2e       	mov	r0, r25
    12b2:	00 0c       	add	r0, r0
    12b4:	aa 0b       	sbc	r26, r26
    12b6:	bb 0b       	sbc	r27, r27
    12b8:	dc 01       	movw	r26, r24
    12ba:	99 27       	eor	r25, r25
    12bc:	88 27       	eor	r24, r24
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	84 2b       	or	r24, r20
    12c4:	95 2b       	or	r25, r21
    12c6:	a6 2b       	or	r26, r22
    12c8:	b7 2b       	or	r27, r23
    12ca:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    12ce:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    12d2:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    12d6:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    12da:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0xa>
    12de:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0xb>
    12e2:	30 97       	sbiw	r30, 0x00	; 0
    12e4:	39 f0       	breq	.+14     	; 0x12f4 <__vector_10+0xb2>
    12e6:	65 e0       	ldi	r22, 0x05	; 5
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0xa>
    12ee:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0xb>
    12f2:	09 95       	icall
    12f4:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    12f8:	ff 91       	pop	r31
    12fa:	ef 91       	pop	r30
    12fc:	bf 91       	pop	r27
    12fe:	af 91       	pop	r26
    1300:	9f 91       	pop	r25
    1302:	8f 91       	pop	r24
    1304:	7f 91       	pop	r23
    1306:	6f 91       	pop	r22
    1308:	5f 91       	pop	r21
    130a:	4f 91       	pop	r20
    130c:	3f 91       	pop	r19
    130e:	2f 91       	pop	r18
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_11>:
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	7f 93       	push	r23
    1330:	8f 93       	push	r24
    1332:	9f 93       	push	r25
    1334:	af 93       	push	r26
    1336:	bf 93       	push	r27
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
    133c:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1340:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    1344:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1348:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    134c:	c9 01       	movw	r24, r18
    134e:	03 2e       	mov	r0, r19
    1350:	00 0c       	add	r0, r0
    1352:	aa 0b       	sbc	r26, r26
    1354:	bb 0b       	sbc	r27, r27
    1356:	dc 01       	movw	r26, r24
    1358:	99 27       	eor	r25, r25
    135a:	88 27       	eor	r24, r24
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	84 2b       	or	r24, r20
    1362:	95 2b       	or	r25, r21
    1364:	a6 2b       	or	r26, r22
    1366:	b7 2b       	or	r27, r23
    1368:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    136c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1370:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1374:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1378:	b0 9b       	sbis	0x16, 0	; 22
    137a:	1b c0       	rjmp	.+54     	; 0x13b2 <__vector_11+0x98>
    137c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1380:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1384:	c9 01       	movw	r24, r18
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	09 2e       	mov	r0, r25
    138a:	00 0c       	add	r0, r0
    138c:	aa 0b       	sbc	r26, r26
    138e:	bb 0b       	sbc	r27, r27
    1390:	dc 01       	movw	r26, r24
    1392:	99 27       	eor	r25, r25
    1394:	88 27       	eor	r24, r24
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	84 2b       	or	r24, r20
    139c:	95 2b       	or	r25, r21
    139e:	a6 2b       	or	r26, r22
    13a0:	b7 2b       	or	r27, r23
    13a2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    13a6:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    13aa:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    13ae:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    13b2:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0xc>
    13b6:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0xd>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	39 f0       	breq	.+14     	; 0x13cc <__vector_11+0xb2>
    13be:	66 e0       	ldi	r22, 0x06	; 6
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0xc>
    13c6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0xd>
    13ca:	09 95       	icall
    13cc:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	7f 91       	pop	r23
    13de:	6f 91       	pop	r22
    13e0:	5f 91       	pop	r21
    13e2:	4f 91       	pop	r20
    13e4:	3f 91       	pop	r19
    13e6:	2f 91       	pop	r18
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	18 95       	reti

000013f2 <__vector_12>:
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
    1414:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1418:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    141c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1420:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1424:	c9 01       	movw	r24, r18
    1426:	03 2e       	mov	r0, r19
    1428:	00 0c       	add	r0, r0
    142a:	aa 0b       	sbc	r26, r26
    142c:	bb 0b       	sbc	r27, r27
    142e:	dc 01       	movw	r26, r24
    1430:	99 27       	eor	r25, r25
    1432:	88 27       	eor	r24, r24
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	84 2b       	or	r24, r20
    143a:	95 2b       	or	r25, r21
    143c:	a6 2b       	or	r26, r22
    143e:	b7 2b       	or	r27, r23
    1440:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1444:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1448:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    144c:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1450:	b0 9b       	sbis	0x16, 0	; 22
    1452:	1b c0       	rjmp	.+54     	; 0x148a <__vector_12+0x98>
    1454:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1458:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    145c:	c9 01       	movw	r24, r18
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	09 2e       	mov	r0, r25
    1462:	00 0c       	add	r0, r0
    1464:	aa 0b       	sbc	r26, r26
    1466:	bb 0b       	sbc	r27, r27
    1468:	dc 01       	movw	r26, r24
    146a:	99 27       	eor	r25, r25
    146c:	88 27       	eor	r24, r24
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	84 2b       	or	r24, r20
    1474:	95 2b       	or	r25, r21
    1476:	a6 2b       	or	r26, r22
    1478:	b7 2b       	or	r27, r23
    147a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    147e:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1482:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1486:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    148a:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0xe>
    148e:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0xf>
    1492:	30 97       	sbiw	r30, 0x00	; 0
    1494:	39 f0       	breq	.+14     	; 0x14a4 <__vector_12+0xb2>
    1496:	67 e0       	ldi	r22, 0x07	; 7
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0xe>
    149e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0xf>
    14a2:	09 95       	icall
    14a4:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    14a8:	ff 91       	pop	r31
    14aa:	ef 91       	pop	r30
    14ac:	bf 91       	pop	r27
    14ae:	af 91       	pop	r26
    14b0:	9f 91       	pop	r25
    14b2:	8f 91       	pop	r24
    14b4:	7f 91       	pop	r23
    14b6:	6f 91       	pop	r22
    14b8:	5f 91       	pop	r21
    14ba:	4f 91       	pop	r20
    14bc:	3f 91       	pop	r19
    14be:	2f 91       	pop	r18
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <__vector_13>:
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
    14d4:	2f 93       	push	r18
    14d6:	3f 93       	push	r19
    14d8:	4f 93       	push	r20
    14da:	5f 93       	push	r21
    14dc:	6f 93       	push	r22
    14de:	7f 93       	push	r23
    14e0:	8f 93       	push	r24
    14e2:	9f 93       	push	r25
    14e4:	af 93       	push	r26
    14e6:	bf 93       	push	r27
    14e8:	ef 93       	push	r30
    14ea:	ff 93       	push	r31
    14ec:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    14f0:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    14f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14fc:	c9 01       	movw	r24, r18
    14fe:	03 2e       	mov	r0, r19
    1500:	00 0c       	add	r0, r0
    1502:	aa 0b       	sbc	r26, r26
    1504:	bb 0b       	sbc	r27, r27
    1506:	dc 01       	movw	r26, r24
    1508:	99 27       	eor	r25, r25
    150a:	88 27       	eor	r24, r24
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	84 2b       	or	r24, r20
    1512:	95 2b       	or	r25, r21
    1514:	a6 2b       	or	r26, r22
    1516:	b7 2b       	or	r27, r23
    1518:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    151c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1520:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1524:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1528:	b0 9b       	sbis	0x16, 0	; 22
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <__vector_13+0x98>
    152c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1530:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1534:	c9 01       	movw	r24, r18
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	09 2e       	mov	r0, r25
    153a:	00 0c       	add	r0, r0
    153c:	aa 0b       	sbc	r26, r26
    153e:	bb 0b       	sbc	r27, r27
    1540:	dc 01       	movw	r26, r24
    1542:	99 27       	eor	r25, r25
    1544:	88 27       	eor	r24, r24
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	84 2b       	or	r24, r20
    154c:	95 2b       	or	r25, r21
    154e:	a6 2b       	or	r26, r22
    1550:	b7 2b       	or	r27, r23
    1552:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1556:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    155a:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    155e:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1562:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x10>
    1566:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x11>
    156a:	30 97       	sbiw	r30, 0x00	; 0
    156c:	39 f0       	breq	.+14     	; 0x157c <__vector_13+0xb2>
    156e:	68 e0       	ldi	r22, 0x08	; 8
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x10>
    1576:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x11>
    157a:	09 95       	icall
    157c:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_14>:
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
    15c4:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    15c8:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    15cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15d4:	c9 01       	movw	r24, r18
    15d6:	03 2e       	mov	r0, r19
    15d8:	00 0c       	add	r0, r0
    15da:	aa 0b       	sbc	r26, r26
    15dc:	bb 0b       	sbc	r27, r27
    15de:	dc 01       	movw	r26, r24
    15e0:	99 27       	eor	r25, r25
    15e2:	88 27       	eor	r24, r24
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	84 2b       	or	r24, r20
    15ea:	95 2b       	or	r25, r21
    15ec:	a6 2b       	or	r26, r22
    15ee:	b7 2b       	or	r27, r23
    15f0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    15f4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    15f8:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    15fc:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1600:	b0 9b       	sbis	0x16, 0	; 22
    1602:	1b c0       	rjmp	.+54     	; 0x163a <__vector_14+0x98>
    1604:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1608:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    160c:	c9 01       	movw	r24, r18
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	09 2e       	mov	r0, r25
    1612:	00 0c       	add	r0, r0
    1614:	aa 0b       	sbc	r26, r26
    1616:	bb 0b       	sbc	r27, r27
    1618:	dc 01       	movw	r26, r24
    161a:	99 27       	eor	r25, r25
    161c:	88 27       	eor	r24, r24
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	84 2b       	or	r24, r20
    1624:	95 2b       	or	r25, r21
    1626:	a6 2b       	or	r26, r22
    1628:	b7 2b       	or	r27, r23
    162a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    162e:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1632:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1636:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    163a:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x12>
    163e:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x13>
    1642:	30 97       	sbiw	r30, 0x00	; 0
    1644:	39 f0       	breq	.+14     	; 0x1654 <__vector_14+0xb2>
    1646:	69 e0       	ldi	r22, 0x09	; 9
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x12>
    164e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x13>
    1652:	09 95       	icall
    1654:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <__vector_15>:
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    16a0:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    16a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16ac:	c9 01       	movw	r24, r18
    16ae:	03 2e       	mov	r0, r19
    16b0:	00 0c       	add	r0, r0
    16b2:	aa 0b       	sbc	r26, r26
    16b4:	bb 0b       	sbc	r27, r27
    16b6:	dc 01       	movw	r26, r24
    16b8:	99 27       	eor	r25, r25
    16ba:	88 27       	eor	r24, r24
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	84 2b       	or	r24, r20
    16c2:	95 2b       	or	r25, r21
    16c4:	a6 2b       	or	r26, r22
    16c6:	b7 2b       	or	r27, r23
    16c8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    16cc:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    16d0:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    16d4:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    16d8:	b0 9b       	sbis	0x16, 0	; 22
    16da:	1b c0       	rjmp	.+54     	; 0x1712 <__vector_15+0x98>
    16dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e4:	c9 01       	movw	r24, r18
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	09 2e       	mov	r0, r25
    16ea:	00 0c       	add	r0, r0
    16ec:	aa 0b       	sbc	r26, r26
    16ee:	bb 0b       	sbc	r27, r27
    16f0:	dc 01       	movw	r26, r24
    16f2:	99 27       	eor	r25, r25
    16f4:	88 27       	eor	r24, r24
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	84 2b       	or	r24, r20
    16fc:	95 2b       	or	r25, r21
    16fe:	a6 2b       	or	r26, r22
    1700:	b7 2b       	or	r27, r23
    1702:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1706:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    170a:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    170e:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1712:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x14>
    1716:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x15>
    171a:	30 97       	sbiw	r30, 0x00	; 0
    171c:	39 f0       	breq	.+14     	; 0x172c <__vector_15+0xb2>
    171e:	6a e0       	ldi	r22, 0x0A	; 10
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x14>
    1726:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x15>
    172a:	09 95       	icall
    172c:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	bf 91       	pop	r27
    1736:	af 91       	pop	r26
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	7f 91       	pop	r23
    173e:	6f 91       	pop	r22
    1740:	5f 91       	pop	r21
    1742:	4f 91       	pop	r20
    1744:	3f 91       	pop	r19
    1746:	2f 91       	pop	r18
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <__vector_16>:
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	2f 93       	push	r18
    175e:	3f 93       	push	r19
    1760:	4f 93       	push	r20
    1762:	5f 93       	push	r21
    1764:	6f 93       	push	r22
    1766:	7f 93       	push	r23
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	af 93       	push	r26
    176e:	bf 93       	push	r27
    1770:	ef 93       	push	r30
    1772:	ff 93       	push	r31
    1774:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1778:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    177c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1780:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1784:	c9 01       	movw	r24, r18
    1786:	03 2e       	mov	r0, r19
    1788:	00 0c       	add	r0, r0
    178a:	aa 0b       	sbc	r26, r26
    178c:	bb 0b       	sbc	r27, r27
    178e:	dc 01       	movw	r26, r24
    1790:	99 27       	eor	r25, r25
    1792:	88 27       	eor	r24, r24
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	84 2b       	or	r24, r20
    179a:	95 2b       	or	r25, r21
    179c:	a6 2b       	or	r26, r22
    179e:	b7 2b       	or	r27, r23
    17a0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    17a4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    17a8:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    17ac:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    17b0:	b0 9b       	sbis	0x16, 0	; 22
    17b2:	1b c0       	rjmp	.+54     	; 0x17ea <__vector_16+0x98>
    17b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17bc:	c9 01       	movw	r24, r18
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	09 2e       	mov	r0, r25
    17c2:	00 0c       	add	r0, r0
    17c4:	aa 0b       	sbc	r26, r26
    17c6:	bb 0b       	sbc	r27, r27
    17c8:	dc 01       	movw	r26, r24
    17ca:	99 27       	eor	r25, r25
    17cc:	88 27       	eor	r24, r24
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	84 2b       	or	r24, r20
    17d4:	95 2b       	or	r25, r21
    17d6:	a6 2b       	or	r26, r22
    17d8:	b7 2b       	or	r27, r23
    17da:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    17de:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    17e2:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    17e6:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    17ea:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x16>
    17ee:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x17>
    17f2:	30 97       	sbiw	r30, 0x00	; 0
    17f4:	39 f0       	breq	.+14     	; 0x1804 <__vector_16+0xb2>
    17f6:	6b e0       	ldi	r22, 0x0B	; 11
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x16>
    17fe:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x17>
    1802:	09 95       	icall
    1804:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <__vector_17>:
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	2f 93       	push	r18
    1836:	3f 93       	push	r19
    1838:	4f 93       	push	r20
    183a:	5f 93       	push	r21
    183c:	6f 93       	push	r22
    183e:	7f 93       	push	r23
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
    184c:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1850:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    1854:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1858:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    185c:	c9 01       	movw	r24, r18
    185e:	03 2e       	mov	r0, r19
    1860:	00 0c       	add	r0, r0
    1862:	aa 0b       	sbc	r26, r26
    1864:	bb 0b       	sbc	r27, r27
    1866:	dc 01       	movw	r26, r24
    1868:	99 27       	eor	r25, r25
    186a:	88 27       	eor	r24, r24
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	84 2b       	or	r24, r20
    1872:	95 2b       	or	r25, r21
    1874:	a6 2b       	or	r26, r22
    1876:	b7 2b       	or	r27, r23
    1878:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    187c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1880:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1884:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1888:	b0 9b       	sbis	0x16, 0	; 22
    188a:	1b c0       	rjmp	.+54     	; 0x18c2 <__vector_17+0x98>
    188c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1890:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1894:	c9 01       	movw	r24, r18
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	09 2e       	mov	r0, r25
    189a:	00 0c       	add	r0, r0
    189c:	aa 0b       	sbc	r26, r26
    189e:	bb 0b       	sbc	r27, r27
    18a0:	dc 01       	movw	r26, r24
    18a2:	99 27       	eor	r25, r25
    18a4:	88 27       	eor	r24, r24
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	84 2b       	or	r24, r20
    18ac:	95 2b       	or	r25, r21
    18ae:	a6 2b       	or	r26, r22
    18b0:	b7 2b       	or	r27, r23
    18b2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    18b6:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    18ba:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    18be:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    18c2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x18>
    18c6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x19>
    18ca:	30 97       	sbiw	r30, 0x00	; 0
    18cc:	39 f0       	breq	.+14     	; 0x18dc <__vector_17+0xb2>
    18ce:	6c e0       	ldi	r22, 0x0C	; 12
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x18>
    18d6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x19>
    18da:	09 95       	icall
    18dc:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    18e0:	ff 91       	pop	r31
    18e2:	ef 91       	pop	r30
    18e4:	bf 91       	pop	r27
    18e6:	af 91       	pop	r26
    18e8:	9f 91       	pop	r25
    18ea:	8f 91       	pop	r24
    18ec:	7f 91       	pop	r23
    18ee:	6f 91       	pop	r22
    18f0:	5f 91       	pop	r21
    18f2:	4f 91       	pop	r20
    18f4:	3f 91       	pop	r19
    18f6:	2f 91       	pop	r18
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	0f 90       	pop	r0
    18fe:	1f 90       	pop	r1
    1900:	18 95       	reti

00001902 <__vector_18>:
    1902:	1f 92       	push	r1
    1904:	0f 92       	push	r0
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	0f 92       	push	r0
    190a:	11 24       	eor	r1, r1
    190c:	2f 93       	push	r18
    190e:	3f 93       	push	r19
    1910:	4f 93       	push	r20
    1912:	5f 93       	push	r21
    1914:	6f 93       	push	r22
    1916:	7f 93       	push	r23
    1918:	8f 93       	push	r24
    191a:	9f 93       	push	r25
    191c:	af 93       	push	r26
    191e:	bf 93       	push	r27
    1920:	ef 93       	push	r30
    1922:	ff 93       	push	r31
    1924:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1928:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    192c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1930:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1934:	c9 01       	movw	r24, r18
    1936:	03 2e       	mov	r0, r19
    1938:	00 0c       	add	r0, r0
    193a:	aa 0b       	sbc	r26, r26
    193c:	bb 0b       	sbc	r27, r27
    193e:	dc 01       	movw	r26, r24
    1940:	99 27       	eor	r25, r25
    1942:	88 27       	eor	r24, r24
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	84 2b       	or	r24, r20
    194a:	95 2b       	or	r25, r21
    194c:	a6 2b       	or	r26, r22
    194e:	b7 2b       	or	r27, r23
    1950:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1954:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1958:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    195c:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1960:	b0 9b       	sbis	0x16, 0	; 22
    1962:	1b c0       	rjmp	.+54     	; 0x199a <__vector_18+0x98>
    1964:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1968:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    196c:	c9 01       	movw	r24, r18
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	09 2e       	mov	r0, r25
    1972:	00 0c       	add	r0, r0
    1974:	aa 0b       	sbc	r26, r26
    1976:	bb 0b       	sbc	r27, r27
    1978:	dc 01       	movw	r26, r24
    197a:	99 27       	eor	r25, r25
    197c:	88 27       	eor	r24, r24
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	84 2b       	or	r24, r20
    1984:	95 2b       	or	r25, r21
    1986:	a6 2b       	or	r26, r22
    1988:	b7 2b       	or	r27, r23
    198a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    198e:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1992:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1996:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    199a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x1a>
    199e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x1b>
    19a2:	30 97       	sbiw	r30, 0x00	; 0
    19a4:	39 f0       	breq	.+14     	; 0x19b4 <__vector_18+0xb2>
    19a6:	6d e0       	ldi	r22, 0x0D	; 13
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x1a>
    19ae:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x1b>
    19b2:	09 95       	icall
    19b4:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    19b8:	ff 91       	pop	r31
    19ba:	ef 91       	pop	r30
    19bc:	bf 91       	pop	r27
    19be:	af 91       	pop	r26
    19c0:	9f 91       	pop	r25
    19c2:	8f 91       	pop	r24
    19c4:	7f 91       	pop	r23
    19c6:	6f 91       	pop	r22
    19c8:	5f 91       	pop	r21
    19ca:	4f 91       	pop	r20
    19cc:	3f 91       	pop	r19
    19ce:	2f 91       	pop	r18
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0f 90       	pop	r0
    19d6:	1f 90       	pop	r1
    19d8:	18 95       	reti

000019da <__vector_19>:
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
    19fc:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1a00:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    1a04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a0c:	c9 01       	movw	r24, r18
    1a0e:	03 2e       	mov	r0, r19
    1a10:	00 0c       	add	r0, r0
    1a12:	aa 0b       	sbc	r26, r26
    1a14:	bb 0b       	sbc	r27, r27
    1a16:	dc 01       	movw	r26, r24
    1a18:	99 27       	eor	r25, r25
    1a1a:	88 27       	eor	r24, r24
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	84 2b       	or	r24, r20
    1a22:	95 2b       	or	r25, r21
    1a24:	a6 2b       	or	r26, r22
    1a26:	b7 2b       	or	r27, r23
    1a28:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1a2c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1a30:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1a34:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1a38:	b0 9b       	sbis	0x16, 0	; 22
    1a3a:	1b c0       	rjmp	.+54     	; 0x1a72 <__vector_19+0x98>
    1a3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a44:	c9 01       	movw	r24, r18
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	09 2e       	mov	r0, r25
    1a4a:	00 0c       	add	r0, r0
    1a4c:	aa 0b       	sbc	r26, r26
    1a4e:	bb 0b       	sbc	r27, r27
    1a50:	dc 01       	movw	r26, r24
    1a52:	99 27       	eor	r25, r25
    1a54:	88 27       	eor	r24, r24
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	84 2b       	or	r24, r20
    1a5c:	95 2b       	or	r25, r21
    1a5e:	a6 2b       	or	r26, r22
    1a60:	b7 2b       	or	r27, r23
    1a62:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1a66:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1a6a:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1a6e:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1a72:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x1c>
    1a76:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x1d>
    1a7a:	30 97       	sbiw	r30, 0x00	; 0
    1a7c:	39 f0       	breq	.+14     	; 0x1a8c <__vector_19+0xb2>
    1a7e:	6e e0       	ldi	r22, 0x0E	; 14
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x1c>
    1a86:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x1d>
    1a8a:	09 95       	icall
    1a8c:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <__vector_20>:
    1ab2:	1f 92       	push	r1
    1ab4:	0f 92       	push	r0
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	0f 92       	push	r0
    1aba:	11 24       	eor	r1, r1
    1abc:	2f 93       	push	r18
    1abe:	3f 93       	push	r19
    1ac0:	4f 93       	push	r20
    1ac2:	5f 93       	push	r21
    1ac4:	6f 93       	push	r22
    1ac6:	7f 93       	push	r23
    1ac8:	8f 93       	push	r24
    1aca:	9f 93       	push	r25
    1acc:	af 93       	push	r26
    1ace:	bf 93       	push	r27
    1ad0:	ef 93       	push	r30
    1ad2:	ff 93       	push	r31
    1ad4:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1ad8:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    1adc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ae0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ae4:	c9 01       	movw	r24, r18
    1ae6:	03 2e       	mov	r0, r19
    1ae8:	00 0c       	add	r0, r0
    1aea:	aa 0b       	sbc	r26, r26
    1aec:	bb 0b       	sbc	r27, r27
    1aee:	dc 01       	movw	r26, r24
    1af0:	99 27       	eor	r25, r25
    1af2:	88 27       	eor	r24, r24
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	84 2b       	or	r24, r20
    1afa:	95 2b       	or	r25, r21
    1afc:	a6 2b       	or	r26, r22
    1afe:	b7 2b       	or	r27, r23
    1b00:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1b04:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1b08:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1b0c:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1b10:	b0 9b       	sbis	0x16, 0	; 22
    1b12:	1b c0       	rjmp	.+54     	; 0x1b4a <__vector_20+0x98>
    1b14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b1c:	c9 01       	movw	r24, r18
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	09 2e       	mov	r0, r25
    1b22:	00 0c       	add	r0, r0
    1b24:	aa 0b       	sbc	r26, r26
    1b26:	bb 0b       	sbc	r27, r27
    1b28:	dc 01       	movw	r26, r24
    1b2a:	99 27       	eor	r25, r25
    1b2c:	88 27       	eor	r24, r24
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	84 2b       	or	r24, r20
    1b34:	95 2b       	or	r25, r21
    1b36:	a6 2b       	or	r26, r22
    1b38:	b7 2b       	or	r27, r23
    1b3a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1b3e:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1b42:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1b46:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1b4a:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x1e>
    1b4e:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x1f>
    1b52:	30 97       	sbiw	r30, 0x00	; 0
    1b54:	39 f0       	breq	.+14     	; 0x1b64 <__vector_20+0xb2>
    1b56:	6f e0       	ldi	r22, 0x0F	; 15
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x1e>
    1b5e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x1f>
    1b62:	09 95       	icall
    1b64:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1b68:	ff 91       	pop	r31
    1b6a:	ef 91       	pop	r30
    1b6c:	bf 91       	pop	r27
    1b6e:	af 91       	pop	r26
    1b70:	9f 91       	pop	r25
    1b72:	8f 91       	pop	r24
    1b74:	7f 91       	pop	r23
    1b76:	6f 91       	pop	r22
    1b78:	5f 91       	pop	r21
    1b7a:	4f 91       	pop	r20
    1b7c:	3f 91       	pop	r19
    1b7e:	2f 91       	pop	r18
    1b80:	0f 90       	pop	r0
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	0f 90       	pop	r0
    1b86:	1f 90       	pop	r1
    1b88:	18 95       	reti

00001b8a <__vector_21>:
    1b8a:	1f 92       	push	r1
    1b8c:	0f 92       	push	r0
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	0f 92       	push	r0
    1b92:	11 24       	eor	r1, r1
    1b94:	2f 93       	push	r18
    1b96:	3f 93       	push	r19
    1b98:	4f 93       	push	r20
    1b9a:	5f 93       	push	r21
    1b9c:	6f 93       	push	r22
    1b9e:	7f 93       	push	r23
    1ba0:	8f 93       	push	r24
    1ba2:	9f 93       	push	r25
    1ba4:	af 93       	push	r26
    1ba6:	bf 93       	push	r27
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
    1bac:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1bb0:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    1bb4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bb8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bbc:	c9 01       	movw	r24, r18
    1bbe:	03 2e       	mov	r0, r19
    1bc0:	00 0c       	add	r0, r0
    1bc2:	aa 0b       	sbc	r26, r26
    1bc4:	bb 0b       	sbc	r27, r27
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	99 27       	eor	r25, r25
    1bca:	88 27       	eor	r24, r24
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	84 2b       	or	r24, r20
    1bd2:	95 2b       	or	r25, r21
    1bd4:	a6 2b       	or	r26, r22
    1bd6:	b7 2b       	or	r27, r23
    1bd8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1bdc:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1be0:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1be4:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1be8:	b0 9b       	sbis	0x16, 0	; 22
    1bea:	1b c0       	rjmp	.+54     	; 0x1c22 <__vector_21+0x98>
    1bec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bf0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bf4:	c9 01       	movw	r24, r18
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	09 2e       	mov	r0, r25
    1bfa:	00 0c       	add	r0, r0
    1bfc:	aa 0b       	sbc	r26, r26
    1bfe:	bb 0b       	sbc	r27, r27
    1c00:	dc 01       	movw	r26, r24
    1c02:	99 27       	eor	r25, r25
    1c04:	88 27       	eor	r24, r24
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	84 2b       	or	r24, r20
    1c0c:	95 2b       	or	r25, r21
    1c0e:	a6 2b       	or	r26, r22
    1c10:	b7 2b       	or	r27, r23
    1c12:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1c16:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1c1a:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1c1e:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1c22:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x20>
    1c26:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x21>
    1c2a:	30 97       	sbiw	r30, 0x00	; 0
    1c2c:	39 f0       	breq	.+14     	; 0x1c3c <__vector_21+0xb2>
    1c2e:	60 e1       	ldi	r22, 0x10	; 16
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x20>
    1c36:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x21>
    1c3a:	09 95       	icall
    1c3c:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1c40:	ff 91       	pop	r31
    1c42:	ef 91       	pop	r30
    1c44:	bf 91       	pop	r27
    1c46:	af 91       	pop	r26
    1c48:	9f 91       	pop	r25
    1c4a:	8f 91       	pop	r24
    1c4c:	7f 91       	pop	r23
    1c4e:	6f 91       	pop	r22
    1c50:	5f 91       	pop	r21
    1c52:	4f 91       	pop	r20
    1c54:	3f 91       	pop	r19
    1c56:	2f 91       	pop	r18
    1c58:	0f 90       	pop	r0
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	0f 90       	pop	r0
    1c5e:	1f 90       	pop	r1
    1c60:	18 95       	reti

00001c62 <__vector_22>:
    1c62:	1f 92       	push	r1
    1c64:	0f 92       	push	r0
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	0f 92       	push	r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	2f 93       	push	r18
    1c6e:	3f 93       	push	r19
    1c70:	4f 93       	push	r20
    1c72:	5f 93       	push	r21
    1c74:	6f 93       	push	r22
    1c76:	7f 93       	push	r23
    1c78:	8f 93       	push	r24
    1c7a:	9f 93       	push	r25
    1c7c:	af 93       	push	r26
    1c7e:	bf 93       	push	r27
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31
    1c84:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    1c88:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    1c8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c94:	c9 01       	movw	r24, r18
    1c96:	03 2e       	mov	r0, r19
    1c98:	00 0c       	add	r0, r0
    1c9a:	aa 0b       	sbc	r26, r26
    1c9c:	bb 0b       	sbc	r27, r27
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	99 27       	eor	r25, r25
    1ca2:	88 27       	eor	r24, r24
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	84 2b       	or	r24, r20
    1caa:	95 2b       	or	r25, r21
    1cac:	a6 2b       	or	r26, r22
    1cae:	b7 2b       	or	r27, r23
    1cb0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1cb4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1cb8:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1cbc:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1cc0:	b0 9b       	sbis	0x16, 0	; 22
    1cc2:	1b c0       	rjmp	.+54     	; 0x1cfa <__vector_22+0x98>
    1cc4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cc8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ccc:	c9 01       	movw	r24, r18
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	09 2e       	mov	r0, r25
    1cd2:	00 0c       	add	r0, r0
    1cd4:	aa 0b       	sbc	r26, r26
    1cd6:	bb 0b       	sbc	r27, r27
    1cd8:	dc 01       	movw	r26, r24
    1cda:	99 27       	eor	r25, r25
    1cdc:	88 27       	eor	r24, r24
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	84 2b       	or	r24, r20
    1ce4:	95 2b       	or	r25, r21
    1ce6:	a6 2b       	or	r26, r22
    1ce8:	b7 2b       	or	r27, r23
    1cea:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timestamp>
    1cee:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timestamp+0x1>
    1cf2:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <timestamp+0x2>
    1cf6:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <timestamp+0x3>
    1cfa:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x22>
    1cfe:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x23>
    1d02:	30 97       	sbiw	r30, 0x00	; 0
    1d04:	39 f0       	breq	.+14     	; 0x1d14 <__vector_22+0xb2>
    1d06:	61 e1       	ldi	r22, 0x11	; 17
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x22>
    1d0e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x23>
    1d12:	09 95       	icall
    1d14:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    1d18:	ff 91       	pop	r31
    1d1a:	ef 91       	pop	r30
    1d1c:	bf 91       	pop	r27
    1d1e:	af 91       	pop	r26
    1d20:	9f 91       	pop	r25
    1d22:	8f 91       	pop	r24
    1d24:	7f 91       	pop	r23
    1d26:	6f 91       	pop	r22
    1d28:	5f 91       	pop	r21
    1d2a:	4f 91       	pop	r20
    1d2c:	3f 91       	pop	r19
    1d2e:	2f 91       	pop	r18
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	0f 90       	pop	r0
    1d36:	1f 90       	pop	r1
    1d38:	18 95       	reti

00001d3a <enqueueByDeadline>:
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	7b 01       	movw	r14, r22
    1d48:	eb 01       	movw	r28, r22
    1d4a:	a8 81       	ld	r26, Y
    1d4c:	b9 81       	ldd	r27, Y+1	; 0x01
    1d4e:	10 97       	sbiw	r26, 0x00	; 0
    1d50:	61 f1       	breq	.+88     	; 0x1daa <enqueueByDeadline+0x70>
    1d52:	fc 01       	movw	r30, r24
    1d54:	06 81       	ldd	r16, Z+6	; 0x06
    1d56:	17 81       	ldd	r17, Z+7	; 0x07
    1d58:	20 85       	ldd	r18, Z+8	; 0x08
    1d5a:	31 85       	ldd	r19, Z+9	; 0x09
    1d5c:	16 96       	adiw	r26, 0x06	; 6
    1d5e:	4d 91       	ld	r20, X+
    1d60:	5d 91       	ld	r21, X+
    1d62:	6d 91       	ld	r22, X+
    1d64:	7c 91       	ld	r23, X
    1d66:	19 97       	sbiw	r26, 0x09	; 9
    1d68:	04 17       	cp	r16, r20
    1d6a:	15 07       	cpc	r17, r21
    1d6c:	26 07       	cpc	r18, r22
    1d6e:	37 07       	cpc	r19, r23
    1d70:	14 f4       	brge	.+4      	; 0x1d76 <enqueueByDeadline+0x3c>
    1d72:	1b c0       	rjmp	.+54     	; 0x1daa <enqueueByDeadline+0x70>
    1d74:	df 01       	movw	r26, r30
    1d76:	ed 91       	ld	r30, X+
    1d78:	fc 91       	ld	r31, X
    1d7a:	11 97       	sbiw	r26, 0x01	; 1
    1d7c:	30 97       	sbiw	r30, 0x00	; 0
    1d7e:	49 f0       	breq	.+18     	; 0x1d92 <enqueueByDeadline+0x58>
    1d80:	46 81       	ldd	r20, Z+6	; 0x06
    1d82:	57 81       	ldd	r21, Z+7	; 0x07
    1d84:	60 85       	ldd	r22, Z+8	; 0x08
    1d86:	71 85       	ldd	r23, Z+9	; 0x09
    1d88:	04 17       	cp	r16, r20
    1d8a:	15 07       	cpc	r17, r21
    1d8c:	26 07       	cpc	r18, r22
    1d8e:	37 07       	cpc	r19, r23
    1d90:	8c f7       	brge	.-30     	; 0x1d74 <enqueueByDeadline+0x3a>
    1d92:	ec 01       	movw	r28, r24
    1d94:	f9 83       	std	Y+1, r31	; 0x01
    1d96:	e8 83       	st	Y, r30
    1d98:	10 97       	sbiw	r26, 0x00	; 0
    1d9a:	21 f4       	brne	.+8      	; 0x1da4 <enqueueByDeadline+0x6a>
    1d9c:	f7 01       	movw	r30, r14
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
    1da2:	07 c0       	rjmp	.+14     	; 0x1db2 <enqueueByDeadline+0x78>
    1da4:	8d 93       	st	X+, r24
    1da6:	9c 93       	st	X, r25
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <enqueueByDeadline+0x78>
    1daa:	ec 01       	movw	r28, r24
    1dac:	b9 83       	std	Y+1, r27	; 0x01
    1dae:	a8 83       	st	Y, r26
    1db0:	f5 cf       	rjmp	.-22     	; 0x1d9c <enqueueByDeadline+0x62>
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	08 95       	ret

00001dc0 <enqueueByBaseline>:
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	7b 01       	movw	r14, r22
    1dce:	eb 01       	movw	r28, r22
    1dd0:	a8 81       	ld	r26, Y
    1dd2:	b9 81       	ldd	r27, Y+1	; 0x01
    1dd4:	10 97       	sbiw	r26, 0x00	; 0
    1dd6:	61 f1       	breq	.+88     	; 0x1e30 <enqueueByBaseline+0x70>
    1dd8:	fc 01       	movw	r30, r24
    1dda:	02 81       	ldd	r16, Z+2	; 0x02
    1ddc:	13 81       	ldd	r17, Z+3	; 0x03
    1dde:	24 81       	ldd	r18, Z+4	; 0x04
    1de0:	35 81       	ldd	r19, Z+5	; 0x05
    1de2:	12 96       	adiw	r26, 0x02	; 2
    1de4:	4d 91       	ld	r20, X+
    1de6:	5d 91       	ld	r21, X+
    1de8:	6d 91       	ld	r22, X+
    1dea:	7c 91       	ld	r23, X
    1dec:	15 97       	sbiw	r26, 0x05	; 5
    1dee:	04 17       	cp	r16, r20
    1df0:	15 07       	cpc	r17, r21
    1df2:	26 07       	cpc	r18, r22
    1df4:	37 07       	cpc	r19, r23
    1df6:	14 f4       	brge	.+4      	; 0x1dfc <enqueueByBaseline+0x3c>
    1df8:	1b c0       	rjmp	.+54     	; 0x1e30 <enqueueByBaseline+0x70>
    1dfa:	df 01       	movw	r26, r30
    1dfc:	ed 91       	ld	r30, X+
    1dfe:	fc 91       	ld	r31, X
    1e00:	11 97       	sbiw	r26, 0x01	; 1
    1e02:	30 97       	sbiw	r30, 0x00	; 0
    1e04:	49 f0       	breq	.+18     	; 0x1e18 <enqueueByBaseline+0x58>
    1e06:	42 81       	ldd	r20, Z+2	; 0x02
    1e08:	53 81       	ldd	r21, Z+3	; 0x03
    1e0a:	64 81       	ldd	r22, Z+4	; 0x04
    1e0c:	75 81       	ldd	r23, Z+5	; 0x05
    1e0e:	04 17       	cp	r16, r20
    1e10:	15 07       	cpc	r17, r21
    1e12:	26 07       	cpc	r18, r22
    1e14:	37 07       	cpc	r19, r23
    1e16:	8c f7       	brge	.-30     	; 0x1dfa <enqueueByBaseline+0x3a>
    1e18:	ec 01       	movw	r28, r24
    1e1a:	f9 83       	std	Y+1, r31	; 0x01
    1e1c:	e8 83       	st	Y, r30
    1e1e:	10 97       	sbiw	r26, 0x00	; 0
    1e20:	21 f4       	brne	.+8      	; 0x1e2a <enqueueByBaseline+0x6a>
    1e22:	f7 01       	movw	r30, r14
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
    1e28:	07 c0       	rjmp	.+14     	; 0x1e38 <enqueueByBaseline+0x78>
    1e2a:	8d 93       	st	X+, r24
    1e2c:	9c 93       	st	X, r25
    1e2e:	04 c0       	rjmp	.+8      	; 0x1e38 <enqueueByBaseline+0x78>
    1e30:	ec 01       	movw	r28, r24
    1e32:	b9 83       	std	Y+1, r27	; 0x01
    1e34:	a8 83       	st	Y, r26
    1e36:	f5 cf       	rjmp	.-22     	; 0x1e22 <enqueueByBaseline+0x62>
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	08 95       	ret

00001e46 <dequeue>:
    1e46:	dc 01       	movw	r26, r24
    1e48:	ed 91       	ld	r30, X+
    1e4a:	fc 91       	ld	r31, X
    1e4c:	11 97       	sbiw	r26, 0x01	; 1
    1e4e:	30 97       	sbiw	r30, 0x00	; 0
    1e50:	59 f4       	brne	.+22     	; 0x1e68 <dequeue+0x22>
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1e58:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1e5c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	83 bf       	out	0x33, r24	; 51
    1e64:	88 95       	sleep
    1e66:	fd cf       	rjmp	.-6      	; 0x1e62 <dequeue+0x1c>
    1e68:	20 81       	ld	r18, Z
    1e6a:	31 81       	ldd	r19, Z+1	; 0x01
    1e6c:	2d 93       	st	X+, r18
    1e6e:	3c 93       	st	X, r19
    1e70:	cf 01       	movw	r24, r30
    1e72:	08 95       	ret

00001e74 <__vector_9>:
    1e74:	1f 92       	push	r1
    1e76:	0f 92       	push	r0
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	0f 92       	push	r0
    1e7c:	11 24       	eor	r1, r1
    1e7e:	2f 93       	push	r18
    1e80:	3f 93       	push	r19
    1e82:	4f 93       	push	r20
    1e84:	5f 93       	push	r21
    1e86:	6f 93       	push	r22
    1e88:	7f 93       	push	r23
    1e8a:	8f 93       	push	r24
    1e8c:	9f 93       	push	r25
    1e8e:	ef 93       	push	r30
    1e90:	ff 93       	push	r31
    1e92:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <overflows>
    1e96:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <overflows+0x1>
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <overflows+0x1>
    1ea0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <overflows>
    1ea4:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <timerQ>
    1ea8:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <timerQ+0x1>
    1eac:	30 97       	sbiw	r30, 0x00	; 0
    1eae:	01 f1       	breq	.+64     	; 0x1ef0 <__vector_9+0x7c>
    1eb0:	42 81       	ldd	r20, Z+2	; 0x02
    1eb2:	53 81       	ldd	r21, Z+3	; 0x03
    1eb4:	64 81       	ldd	r22, Z+4	; 0x04
    1eb6:	75 81       	ldd	r23, Z+5	; 0x05
    1eb8:	86 17       	cp	r24, r22
    1eba:	97 07       	cpc	r25, r23
    1ebc:	c9 f4       	brne	.+50     	; 0x1ef0 <__vector_9+0x7c>
    1ebe:	ca 01       	movw	r24, r20
    1ec0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ec4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ec8:	42 1b       	sub	r20, r18
    1eca:	53 0b       	sbc	r21, r19
    1ecc:	41 30       	cpi	r20, 0x01	; 1
    1ece:	51 05       	cpc	r21, r1
    1ed0:	29 f4       	brne	.+10     	; 0x1edc <__vector_9+0x68>
    1ed2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ed6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ee0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ee4:	ef e6       	ldi	r30, 0x6F	; 111
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	82 60       	ori	r24, 0x02	; 2
    1eec:	80 83       	st	Z, r24
    1eee:	05 c0       	rjmp	.+10     	; 0x1efa <__vector_9+0x86>
    1ef0:	ef e6       	ldi	r30, 0x6F	; 111
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8d 7f       	andi	r24, 0xFD	; 253
    1ef8:	80 83       	st	Z, r24
    1efa:	ff 91       	pop	r31
    1efc:	ef 91       	pop	r30
    1efe:	9f 91       	pop	r25
    1f00:	8f 91       	pop	r24
    1f02:	7f 91       	pop	r23
    1f04:	6f 91       	pop	r22
    1f06:	5f 91       	pop	r21
    1f08:	4f 91       	pop	r20
    1f0a:	3f 91       	pop	r19
    1f0c:	2f 91       	pop	r18
    1f0e:	0f 90       	pop	r0
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	0f 90       	pop	r0
    1f14:	1f 90       	pop	r1
    1f16:	18 95       	reti

00001f18 <__vector_7>:
    1f18:	1f 92       	push	r1
    1f1a:	0f 92       	push	r0
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	0f 92       	push	r0
    1f20:	11 24       	eor	r1, r1
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	2f 93       	push	r18
    1f2c:	3f 93       	push	r19
    1f2e:	4f 93       	push	r20
    1f30:	5f 93       	push	r21
    1f32:	6f 93       	push	r22
    1f34:	7f 93       	push	r23
    1f36:	8f 93       	push	r24
    1f38:	9f 93       	push	r25
    1f3a:	af 93       	push	r26
    1f3c:	bf 93       	push	r27
    1f3e:	ef 93       	push	r30
    1f40:	ff 93       	push	r31
    1f42:	c0 90 4e 01 	lds	r12, 0x014E	; 0x80014e <overflows>
    1f46:	d0 90 4f 01 	lds	r13, 0x014F	; 0x80014f <overflows+0x1>
    1f4a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f4e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f52:	b0 99       	sbic	0x16, 0	; 22
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <__vector_7+0x5c>
    1f56:	0d 2c       	mov	r0, r13
    1f58:	00 0c       	add	r0, r0
    1f5a:	ee 08       	sbc	r14, r14
    1f5c:	ff 08       	sbc	r15, r15
    1f5e:	d6 01       	movw	r26, r12
    1f60:	99 27       	eor	r25, r25
    1f62:	88 27       	eor	r24, r24
    1f64:	69 01       	movw	r12, r18
    1f66:	e1 2c       	mov	r14, r1
    1f68:	f1 2c       	mov	r15, r1
    1f6a:	c8 2a       	or	r12, r24
    1f6c:	d9 2a       	or	r13, r25
    1f6e:	ea 2a       	or	r14, r26
    1f70:	fb 2a       	or	r15, r27
    1f72:	15 c0       	rjmp	.+42     	; 0x1f9e <__vector_7+0x86>
    1f74:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f78:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f7c:	8f ef       	ldi	r24, 0xFF	; 255
    1f7e:	c8 1a       	sub	r12, r24
    1f80:	d8 0a       	sbc	r13, r24
    1f82:	0d 2c       	mov	r0, r13
    1f84:	00 0c       	add	r0, r0
    1f86:	ee 08       	sbc	r14, r14
    1f88:	ff 08       	sbc	r15, r15
    1f8a:	d6 01       	movw	r26, r12
    1f8c:	99 27       	eor	r25, r25
    1f8e:	88 27       	eor	r24, r24
    1f90:	69 01       	movw	r12, r18
    1f92:	e1 2c       	mov	r14, r1
    1f94:	f1 2c       	mov	r15, r1
    1f96:	c8 2a       	or	r12, r24
    1f98:	d9 2a       	or	r13, r25
    1f9a:	ea 2a       	or	r14, r26
    1f9c:	fb 2a       	or	r15, r27
    1f9e:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <timerQ>
    1fa2:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <timerQ+0x1>
    1fa6:	30 97       	sbiw	r30, 0x00	; 0
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <__vector_7+0x94>
    1faa:	42 c0       	rjmp	.+132    	; 0x2030 <__vector_7+0x118>
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	a4 81       	ldd	r26, Z+4	; 0x04
    1fb2:	b5 81       	ldd	r27, Z+5	; 0x05
    1fb4:	8c 19       	sub	r24, r12
    1fb6:	9d 09       	sbc	r25, r13
    1fb8:	ae 09       	sbc	r26, r14
    1fba:	bf 09       	sbc	r27, r15
    1fbc:	18 16       	cp	r1, r24
    1fbe:	19 06       	cpc	r1, r25
    1fc0:	1a 06       	cpc	r1, r26
    1fc2:	1b 06       	cpc	r1, r27
    1fc4:	ec f1       	brlt	.+122    	; 0x2040 <__vector_7+0x128>
    1fc6:	84 e5       	ldi	r24, 0x54	; 84
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <dequeue>
    1fce:	66 e5       	ldi	r22, 0x56	; 86
    1fd0:	71 e0       	ldi	r23, 0x01	; 1
    1fd2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <enqueueByDeadline>
    1fd6:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <timerQ>
    1fda:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <timerQ+0x1>
    1fde:	30 97       	sbiw	r30, 0x00	; 0
    1fe0:	39 f1       	breq	.+78     	; 0x2030 <__vector_7+0x118>
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	a4 81       	ldd	r26, Z+4	; 0x04
    1fe8:	b5 81       	ldd	r27, Z+5	; 0x05
    1fea:	8c 19       	sub	r24, r12
    1fec:	9d 09       	sbc	r25, r13
    1fee:	ae 09       	sbc	r26, r14
    1ff0:	bf 09       	sbc	r27, r15
    1ff2:	18 16       	cp	r1, r24
    1ff4:	19 06       	cpc	r1, r25
    1ff6:	1a 06       	cpc	r1, r26
    1ff8:	1b 06       	cpc	r1, r27
    1ffa:	2c f7       	brge	.-54     	; 0x1fc6 <__vector_7+0xae>
    1ffc:	21 c0       	rjmp	.+66     	; 0x2040 <__vector_7+0x128>
    1ffe:	9c 01       	movw	r18, r24
    2000:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2004:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2008:	84 1b       	sub	r24, r20
    200a:	95 0b       	sbc	r25, r21
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	31 f4       	brne	.+12     	; 0x201c <__vector_7+0x104>
    2010:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2014:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2018:	2f 5f       	subi	r18, 0xFF	; 255
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    2020:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    2024:	ef e6       	ldi	r30, 0x6F	; 111
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	82 60       	ori	r24, 0x02	; 2
    202c:	80 83       	st	Z, r24
    202e:	05 c0       	rjmp	.+10     	; 0x203a <__vector_7+0x122>
    2030:	ef e6       	ldi	r30, 0x6F	; 111
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8d 7f       	andi	r24, 0xFD	; 253
    2038:	80 83       	st	Z, r24
    203a:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    203e:	0c c0       	rjmp	.+24     	; 0x2058 <__vector_7+0x140>
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	a4 81       	ldd	r26, Z+4	; 0x04
    2046:	b5 81       	ldd	r27, Z+5	; 0x05
    2048:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    204c:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    2050:	2a 17       	cp	r18, r26
    2052:	3b 07       	cpc	r19, r27
    2054:	69 f7       	brne	.-38     	; 0x2030 <__vector_7+0x118>
    2056:	d3 cf       	rjmp	.-90     	; 0x1ffe <__vector_7+0xe6>
    2058:	ff 91       	pop	r31
    205a:	ef 91       	pop	r30
    205c:	bf 91       	pop	r27
    205e:	af 91       	pop	r26
    2060:	9f 91       	pop	r25
    2062:	8f 91       	pop	r24
    2064:	7f 91       	pop	r23
    2066:	6f 91       	pop	r22
    2068:	5f 91       	pop	r21
    206a:	4f 91       	pop	r20
    206c:	3f 91       	pop	r19
    206e:	2f 91       	pop	r18
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	0f 90       	pop	r0
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	0f 90       	pop	r0
    207e:	1f 90       	pop	r1
    2080:	18 95       	reti

00002082 <async>:
    2082:	3f 92       	push	r3
    2084:	4f 92       	push	r4
    2086:	5f 92       	push	r5
    2088:	6f 92       	push	r6
    208a:	7f 92       	push	r7
    208c:	8f 92       	push	r8
    208e:	9f 92       	push	r9
    2090:	af 92       	push	r10
    2092:	bf 92       	push	r11
    2094:	cf 92       	push	r12
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	2b 01       	movw	r4, r22
    20a6:	3c 01       	movw	r6, r24
    20a8:	49 01       	movw	r8, r18
    20aa:	5a 01       	movw	r10, r20
    20ac:	8f b7       	in	r24, 0x3f	; 63
    20ae:	80 78       	andi	r24, 0x80	; 128
    20b0:	38 2e       	mov	r3, r24
    20b2:	f8 94       	cli
    20b4:	88 e4       	ldi	r24, 0x48	; 72
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <dequeue>
    20bc:	ec 01       	movw	r28, r24
    20be:	1b 87       	std	Y+11, r17	; 0x0b
    20c0:	0a 87       	std	Y+10, r16	; 0x0a
    20c2:	fd 86       	std	Y+13, r15	; 0x0d
    20c4:	ec 86       	std	Y+12, r14	; 0x0c
    20c6:	df 86       	std	Y+15, r13	; 0x0f
    20c8:	ce 86       	std	Y+14, r12	; 0x0e
    20ca:	33 20       	and	r3, r3
    20cc:	61 f0       	breq	.+24     	; 0x20e6 <async+0x64>
    20ce:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <current>
    20d2:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <current+0x1>
    20d6:	02 80       	ldd	r0, Z+2	; 0x02
    20d8:	f3 81       	ldd	r31, Z+3	; 0x03
    20da:	e0 2d       	mov	r30, r0
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	a4 81       	ldd	r26, Z+4	; 0x04
    20e2:	b5 81       	ldd	r27, Z+5	; 0x05
    20e4:	08 c0       	rjmp	.+16     	; 0x20f6 <async+0x74>
    20e6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <timestamp>
    20ea:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <timestamp+0x1>
    20ee:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <timestamp+0x2>
    20f2:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <timestamp+0x3>
    20f6:	48 0e       	add	r4, r24
    20f8:	59 1e       	adc	r5, r25
    20fa:	6a 1e       	adc	r6, r26
    20fc:	7b 1e       	adc	r7, r27
    20fe:	4a 82       	std	Y+2, r4	; 0x02
    2100:	5b 82       	std	Y+3, r5	; 0x03
    2102:	6c 82       	std	Y+4, r6	; 0x04
    2104:	7d 82       	std	Y+5, r7	; 0x05
    2106:	18 14       	cp	r1, r8
    2108:	19 04       	cpc	r1, r9
    210a:	1a 04       	cpc	r1, r10
    210c:	1b 04       	cpc	r1, r11
    210e:	44 f0       	brlt	.+16     	; 0x2120 <async+0x9e>
    2110:	0f 2e       	mov	r0, r31
    2112:	88 24       	eor	r8, r8
    2114:	8a 94       	dec	r8
    2116:	98 2c       	mov	r9, r8
    2118:	a8 2c       	mov	r10, r8
    211a:	ff e7       	ldi	r31, 0x7F	; 127
    211c:	bf 2e       	mov	r11, r31
    211e:	f0 2d       	mov	r31, r0
    2120:	84 0c       	add	r8, r4
    2122:	95 1c       	adc	r9, r5
    2124:	a6 1c       	adc	r10, r6
    2126:	b7 1c       	adc	r11, r7
    2128:	8e 82       	std	Y+6, r8	; 0x06
    212a:	9f 82       	std	Y+7, r9	; 0x07
    212c:	a8 86       	std	Y+8, r10	; 0x08
    212e:	b9 86       	std	Y+9, r11	; 0x09
    2130:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <overflows>
    2134:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <overflows+0x1>
    2138:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    213c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2140:	b0 99       	sbic	0x16, 0	; 22
    2142:	0e c0       	rjmp	.+28     	; 0x2160 <async+0xde>
    2144:	09 2e       	mov	r0, r25
    2146:	00 0c       	add	r0, r0
    2148:	aa 0b       	sbc	r26, r26
    214a:	bb 0b       	sbc	r27, r27
    214c:	dc 01       	movw	r26, r24
    214e:	99 27       	eor	r25, r25
    2150:	88 27       	eor	r24, r24
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	84 2b       	or	r24, r20
    2158:	95 2b       	or	r25, r21
    215a:	a6 2b       	or	r26, r22
    215c:	b7 2b       	or	r27, r23
    215e:	13 c0       	rjmp	.+38     	; 0x2186 <async+0x104>
    2160:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2164:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	09 2e       	mov	r0, r25
    216c:	00 0c       	add	r0, r0
    216e:	aa 0b       	sbc	r26, r26
    2170:	bb 0b       	sbc	r27, r27
    2172:	dc 01       	movw	r26, r24
    2174:	99 27       	eor	r25, r25
    2176:	88 27       	eor	r24, r24
    2178:	a9 01       	movw	r20, r18
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	84 2b       	or	r24, r20
    2180:	95 2b       	or	r25, r21
    2182:	a6 2b       	or	r26, r22
    2184:	b7 2b       	or	r27, r23
    2186:	48 1a       	sub	r4, r24
    2188:	59 0a       	sbc	r5, r25
    218a:	6a 0a       	sbc	r6, r26
    218c:	7b 0a       	sbc	r7, r27
    218e:	14 14       	cp	r1, r4
    2190:	15 04       	cpc	r1, r5
    2192:	16 04       	cpc	r1, r6
    2194:	17 04       	cpc	r1, r7
    2196:	ac f5       	brge	.+106    	; 0x2202 <async+0x180>
    2198:	64 e5       	ldi	r22, 0x54	; 84
    219a:	71 e0       	ldi	r23, 0x01	; 1
    219c:	ce 01       	movw	r24, r28
    219e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <enqueueByBaseline>
    21a2:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <timerQ>
    21a6:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <timerQ+0x1>
    21aa:	30 97       	sbiw	r30, 0x00	; 0
    21ac:	21 f1       	breq	.+72     	; 0x21f6 <async+0x174>
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	a4 81       	ldd	r26, Z+4	; 0x04
    21b4:	b5 81       	ldd	r27, Z+5	; 0x05
    21b6:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <overflows>
    21ba:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <overflows+0x1>
    21be:	2a 17       	cp	r18, r26
    21c0:	3b 07       	cpc	r19, r27
    21c2:	c9 f4       	brne	.+50     	; 0x21f6 <async+0x174>
    21c4:	9c 01       	movw	r18, r24
    21c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    21ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    21ce:	84 1b       	sub	r24, r20
    21d0:	95 0b       	sbc	r25, r21
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	31 f4       	brne	.+12     	; 0x21e2 <async+0x160>
    21d6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    21da:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    21e6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    21ea:	ef e6       	ldi	r30, 0x6F	; 111
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	82 60       	ori	r24, 0x02	; 2
    21f2:	80 83       	st	Z, r24
    21f4:	41 c0       	rjmp	.+130    	; 0x2278 <async+0x1f6>
    21f6:	ef e6       	ldi	r30, 0x6F	; 111
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	8d 7f       	andi	r24, 0xFD	; 253
    21fe:	80 83       	st	Z, r24
    2200:	3b c0       	rjmp	.+118    	; 0x2278 <async+0x1f6>
    2202:	66 e5       	ldi	r22, 0x56	; 86
    2204:	71 e0       	ldi	r23, 0x01	; 1
    2206:	ce 01       	movw	r24, r28
    2208:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <enqueueByDeadline>
    220c:	33 20       	and	r3, r3
    220e:	b9 f1       	breq	.+110    	; 0x227e <async+0x1fc>
    2210:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <threadPool>
    2214:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <threadPool+0x1>
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	81 f1       	breq	.+96     	; 0x227c <async+0x1fa>
    221c:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <activeStack>
    2220:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <activeStack+0x1>
    2224:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <msgQ>
    2228:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <msgQ+0x1>
    222c:	02 81       	ldd	r16, Z+2	; 0x02
    222e:	13 81       	ldd	r17, Z+3	; 0x03
    2230:	d9 01       	movw	r26, r18
    2232:	16 96       	adiw	r26, 0x06	; 6
    2234:	4d 91       	ld	r20, X+
    2236:	5d 91       	ld	r21, X+
    2238:	6d 91       	ld	r22, X+
    223a:	7c 91       	ld	r23, X
    223c:	19 97       	sbiw	r26, 0x09	; 9
    223e:	d8 01       	movw	r26, r16
    2240:	16 96       	adiw	r26, 0x06	; 6
    2242:	0d 91       	ld	r16, X+
    2244:	1d 91       	ld	r17, X+
    2246:	2d 91       	ld	r18, X+
    2248:	3c 91       	ld	r19, X
    224a:	19 97       	sbiw	r26, 0x09	; 9
    224c:	40 1b       	sub	r20, r16
    224e:	51 0b       	sbc	r21, r17
    2250:	62 0b       	sbc	r22, r18
    2252:	73 0b       	sbc	r23, r19
    2254:	9a f4       	brpl	.+38     	; 0x227c <async+0x1fa>
    2256:	dc 01       	movw	r26, r24
    2258:	2d 91       	ld	r18, X+
    225a:	3c 91       	ld	r19, X
    225c:	11 97       	sbiw	r26, 0x01	; 1
    225e:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <threadPool+0x1>
    2262:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <threadPool>
    2266:	ed 93       	st	X+, r30
    2268:	fc 93       	st	X, r31
    226a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <activeStack+0x1>
    226e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <activeStack>
    2272:	0e 94 aa 06 	call	0xd54	; 0xd54 <dispatch>
    2276:	02 c0       	rjmp	.+4      	; 0x227c <async+0x1fa>
    2278:	33 20       	and	r3, r3
    227a:	09 f0       	breq	.+2      	; 0x227e <async+0x1fc>
    227c:	78 94       	sei
    227e:	ce 01       	movw	r24, r28
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	ff 90       	pop	r15
    228a:	ef 90       	pop	r14
    228c:	df 90       	pop	r13
    228e:	cf 90       	pop	r12
    2290:	bf 90       	pop	r11
    2292:	af 90       	pop	r10
    2294:	9f 90       	pop	r9
    2296:	8f 90       	pop	r8
    2298:	7f 90       	pop	r7
    229a:	6f 90       	pop	r6
    229c:	5f 90       	pop	r5
    229e:	4f 90       	pop	r4
    22a0:	3f 90       	pop	r3
    22a2:	08 95       	ret

000022a4 <sync>:
    22a4:	cf 92       	push	r12
    22a6:	df 92       	push	r13
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	ec 01       	movw	r28, r24
    22b6:	7b 01       	movw	r14, r22
    22b8:	6a 01       	movw	r12, r20
    22ba:	1f b7       	in	r17, 0x3f	; 63
    22bc:	10 78       	andi	r17, 0x80	; 128
    22be:	f8 94       	cli
    22c0:	a8 81       	ld	r26, Y
    22c2:	b9 81       	ldd	r27, Y+1	; 0x01
    22c4:	10 97       	sbiw	r26, 0x00	; 0
    22c6:	61 f1       	breq	.+88     	; 0x2320 <sync+0x7c>
    22c8:	14 96       	adiw	r26, 0x04	; 4
    22ca:	ed 91       	ld	r30, X+
    22cc:	fc 91       	ld	r31, X
    22ce:	15 97       	sbiw	r26, 0x05	; 5
    22d0:	30 97       	sbiw	r30, 0x00	; 0
    22d2:	41 f0       	breq	.+16     	; 0x22e4 <sync+0x40>
    22d4:	a0 81       	ld	r26, Z
    22d6:	b1 81       	ldd	r27, Z+1	; 0x01
    22d8:	14 96       	adiw	r26, 0x04	; 4
    22da:	ed 91       	ld	r30, X+
    22dc:	fc 91       	ld	r31, X
    22de:	15 97       	sbiw	r26, 0x05	; 5
    22e0:	30 97       	sbiw	r30, 0x00	; 0
    22e2:	c1 f7       	brne	.-16     	; 0x22d4 <sync+0x30>
    22e4:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <current>
    22e8:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <current+0x1>
    22ec:	2a 17       	cp	r18, r26
    22ee:	3b 07       	cpc	r19, r27
    22f0:	21 f0       	breq	.+8      	; 0x22fa <sync+0x56>
    22f2:	11 23       	and	r17, r17
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <sync+0x54>
    22f6:	3d c0       	rjmp	.+122    	; 0x2372 <sync+0xce>
    22f8:	07 c0       	rjmp	.+14     	; 0x2308 <sync+0x64>
    22fa:	11 23       	and	r17, r17
    22fc:	09 f4       	brne	.+2      	; 0x2300 <sync+0x5c>
    22fe:	3c c0       	rjmp	.+120    	; 0x2378 <sync+0xd4>
    2300:	78 94       	sei
    2302:	8f ef       	ldi	r24, 0xFF	; 255
    2304:	9f ef       	ldi	r25, 0xFF	; 255
    2306:	52 c0       	rjmp	.+164    	; 0x23ac <sync+0x108>
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	d1 f1       	breq	.+116    	; 0x2384 <sync+0xe0>
    2310:	fc 01       	movw	r30, r24
    2312:	15 82       	std	Z+5, r1	; 0x05
    2314:	14 82       	std	Z+4, r1	; 0x04
    2316:	36 c0       	rjmp	.+108    	; 0x2384 <sync+0xe0>
    2318:	78 94       	sei
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	46 c0       	rjmp	.+140    	; 0x23ac <sync+0x108>
    2320:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <current>
    2324:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <current+0x1>
    2328:	99 83       	std	Y+1, r25	; 0x01
    232a:	88 83       	st	Y, r24
    232c:	11 23       	and	r17, r17
    232e:	29 f0       	breq	.+10     	; 0x233a <sync+0x96>
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	09 f0       	breq	.+2      	; 0x233a <sync+0x96>
    2338:	78 94       	sei
    233a:	b6 01       	movw	r22, r12
    233c:	ce 01       	movw	r24, r28
    233e:	f7 01       	movw	r30, r14
    2340:	09 95       	icall
    2342:	f8 2e       	mov	r15, r24
    2344:	09 2f       	mov	r16, r25
    2346:	8f b7       	in	r24, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	19 82       	std	Y+1, r1	; 0x01
    234c:	18 82       	st	Y, r1
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	9b 81       	ldd	r25, Y+3	; 0x03
    2352:	82 30       	cpi	r24, 0x02	; 2
    2354:	91 05       	cpc	r25, r1
    2356:	38 f0       	brcs	.+14     	; 0x2366 <sync+0xc2>
    2358:	1b 82       	std	Y+3, r1	; 0x03
    235a:	1a 82       	std	Y+2, r1	; 0x02
    235c:	fc 01       	movw	r30, r24
    235e:	15 82       	std	Z+5, r1	; 0x05
    2360:	14 82       	std	Z+4, r1	; 0x04
    2362:	0e 94 aa 06 	call	0xd54	; 0xd54 <dispatch>
    2366:	11 23       	and	r17, r17
    2368:	51 f0       	breq	.+20     	; 0x237e <sync+0xda>
    236a:	78 94       	sei
    236c:	8f 2d       	mov	r24, r15
    236e:	90 2f       	mov	r25, r16
    2370:	1d c0       	rjmp	.+58     	; 0x23ac <sync+0x108>
    2372:	8f ef       	ldi	r24, 0xFF	; 255
    2374:	9f ef       	ldi	r25, 0xFF	; 255
    2376:	1a c0       	rjmp	.+52     	; 0x23ac <sync+0x108>
    2378:	8f ef       	ldi	r24, 0xFF	; 255
    237a:	9f ef       	ldi	r25, 0xFF	; 255
    237c:	17 c0       	rjmp	.+46     	; 0x23ac <sync+0x108>
    237e:	8f 2d       	mov	r24, r15
    2380:	90 2f       	mov	r25, r16
    2382:	14 c0       	rjmp	.+40     	; 0x23ac <sync+0x108>
    2384:	3b 83       	std	Y+3, r19	; 0x03
    2386:	2a 83       	std	Y+2, r18	; 0x02
    2388:	f9 01       	movw	r30, r18
    238a:	d5 83       	std	Z+5, r29	; 0x05
    238c:	c4 83       	std	Z+4, r28	; 0x04
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 aa 06 	call	0xd54	; 0xd54 <dispatch>
    2394:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <current>
    2398:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <current+0x1>
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	89 2b       	or	r24, r25
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <sync+0x102>
    23a4:	b9 cf       	rjmp	.-142    	; 0x2318 <sync+0x74>
    23a6:	f9 83       	std	Y+1, r31	; 0x01
    23a8:	e8 83       	st	Y, r30
    23aa:	c2 cf       	rjmp	.-124    	; 0x2330 <sync+0x8c>
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	df 90       	pop	r13
    23ba:	cf 90       	pop	r12
    23bc:	08 95       	ret

000023be <run>:
    23be:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <current>
    23c2:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <current+0x1>
    23c6:	86 e5       	ldi	r24, 0x56	; 86
    23c8:	91 e0       	ldi	r25, 0x01	; 1
    23ca:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <dequeue>
    23ce:	ec 01       	movw	r28, r24
    23d0:	d8 01       	movw	r26, r16
    23d2:	13 96       	adiw	r26, 0x03	; 3
    23d4:	9c 93       	st	X, r25
    23d6:	8e 93       	st	-X, r24
    23d8:	12 97       	sbiw	r26, 0x02	; 2
    23da:	78 94       	sei
    23dc:	4e 85       	ldd	r20, Y+14	; 0x0e
    23de:	5f 85       	ldd	r21, Y+15	; 0x0f
    23e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    23e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    23e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <sync>
    23ec:	8f b7       	in	r24, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <msgPool>
    23f4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <msgPool+0x1>
    23f8:	99 83       	std	Y+1, r25	; 0x01
    23fa:	88 83       	st	Y, r24
    23fc:	d0 93 49 01 	sts	0x0149, r29	; 0x800149 <msgPool+0x1>
    2400:	c0 93 48 01 	sts	0x0148, r28	; 0x800148 <msgPool>
    2404:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <activeStack>
    2408:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <activeStack+0x1>
    240c:	00 81       	ld	r16, Z
    240e:	11 81       	ldd	r17, Z+1	; 0x01
    2410:	e8 01       	movw	r28, r16
    2412:	2a 81       	ldd	r18, Y+2	; 0x02
    2414:	3b 81       	ldd	r19, Y+3	; 0x03
    2416:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <msgQ>
    241a:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <msgQ+0x1>
    241e:	10 97       	sbiw	r26, 0x00	; 0
    2420:	c1 f0       	breq	.+48     	; 0x2452 <run+0x94>
    2422:	21 15       	cp	r18, r1
    2424:	31 05       	cpc	r19, r1
    2426:	59 f2       	breq	.-106    	; 0x23be <run>
    2428:	16 96       	adiw	r26, 0x06	; 6
    242a:	8d 91       	ld	r24, X+
    242c:	9d 91       	ld	r25, X+
    242e:	0d 90       	ld	r0, X+
    2430:	bc 91       	ld	r27, X
    2432:	a0 2d       	mov	r26, r0
    2434:	e9 01       	movw	r28, r18
    2436:	4e 81       	ldd	r20, Y+6	; 0x06
    2438:	5f 81       	ldd	r21, Y+7	; 0x07
    243a:	68 85       	ldd	r22, Y+8	; 0x08
    243c:	79 85       	ldd	r23, Y+9	; 0x09
    243e:	84 1b       	sub	r24, r20
    2440:	95 0b       	sbc	r25, r21
    2442:	a6 0b       	sbc	r26, r22
    2444:	b7 0b       	sbc	r27, r23
    2446:	18 16       	cp	r1, r24
    2448:	19 06       	cpc	r1, r25
    244a:	1a 06       	cpc	r1, r26
    244c:	1b 06       	cpc	r1, r27
    244e:	0c f0       	brlt	.+2      	; 0x2452 <run+0x94>
    2450:	b6 cf       	rjmp	.-148    	; 0x23be <run>
    2452:	10 93 45 01 	sts	0x0145, r17	; 0x800145 <activeStack+0x1>
    2456:	00 93 44 01 	sts	0x0144, r16	; 0x800144 <activeStack>
    245a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <threadPool>
    245e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <threadPool+0x1>
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	f0 93 47 01 	sts	0x0147, r31	; 0x800147 <threadPool+0x1>
    246a:	e0 93 46 01 	sts	0x0146, r30	; 0x800146 <threadPool>
    246e:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <activeStack>
    2472:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <activeStack+0x1>
    2476:	14 96       	adiw	r26, 0x04	; 4
    2478:	ed 91       	ld	r30, X+
    247a:	fc 91       	ld	r31, X
    247c:	15 97       	sbiw	r26, 0x05	; 5
    247e:	30 97       	sbiw	r30, 0x00	; 0
    2480:	41 f0       	breq	.+16     	; 0x2492 <run+0xd4>
    2482:	a0 81       	ld	r26, Z
    2484:	b1 81       	ldd	r27, Z+1	; 0x01
    2486:	14 96       	adiw	r26, 0x04	; 4
    2488:	ed 91       	ld	r30, X+
    248a:	fc 91       	ld	r31, X
    248c:	15 97       	sbiw	r26, 0x05	; 5
    248e:	30 97       	sbiw	r30, 0x00	; 0
    2490:	c1 f7       	brne	.-16     	; 0x2482 <run+0xc4>
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 aa 06 	call	0xd54	; 0xd54 <dispatch>
    2498:	92 cf       	rjmp	.-220    	; 0x23be <run>

0000249a <install>:
    249a:	42 31       	cpi	r20, 0x12	; 18
    249c:	b8 f4       	brcc	.+46     	; 0x24cc <install+0x32>
    249e:	2f b7       	in	r18, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	44 0f       	add	r20, r20
    24a6:	55 1f       	adc	r21, r21
    24a8:	fa 01       	movw	r30, r20
    24aa:	e8 5a       	subi	r30, 0xA8	; 168
    24ac:	fe 4f       	sbci	r31, 0xFE	; 254
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	80 83       	st	Z, r24
    24b2:	fa 01       	movw	r30, r20
    24b4:	e0 51       	subi	r30, 0x10	; 16
    24b6:	fe 4f       	sbci	r31, 0xFE	; 254
    24b8:	71 83       	std	Z+1, r23	; 0x01
    24ba:	60 83       	st	Z, r22
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	fc 01       	movw	r30, r24
    24c2:	53 83       	std	Z+3, r21	; 0x03
    24c4:	42 83       	std	Z+2, r20	; 0x02
    24c6:	22 23       	and	r18, r18
    24c8:	0c f4       	brge	.+2      	; 0x24cc <install+0x32>
    24ca:	78 94       	sei
    24cc:	08 95       	ret

000024ce <tinytimber>:
    24ce:	8c 01       	movw	r16, r24
    24d0:	7b 01       	movw	r14, r22
    24d2:	6a 01       	movw	r12, r20
    24d4:	8f b7       	in	r24, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <initialize>
    24dc:	78 94       	sei
    24de:	e1 14       	cp	r14, r1
    24e0:	f1 04       	cpc	r15, r1
    24e2:	41 f0       	breq	.+16     	; 0x24f4 <tinytimber+0x26>
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	a9 01       	movw	r20, r18
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	cb 01       	movw	r24, r22
    24f0:	0e 94 41 10 	call	0x2082	; 0x2082 <async>
    24f4:	8f b7       	in	r24, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	0e 94 ca 06 	call	0xd94	; 0xd94 <schedule>
    24fc:	78 94       	sei
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	83 bf       	out	0x33, r24	; 51
    2502:	88 95       	sleep
    2504:	fd cf       	rjmp	.-6      	; 0x2500 <tinytimber+0x32>

00002506 <__divmodhi4>:
    2506:	97 fb       	bst	r25, 7
    2508:	07 2e       	mov	r0, r23
    250a:	16 f4       	brtc	.+4      	; 0x2510 <__divmodhi4+0xa>
    250c:	00 94       	com	r0
    250e:	07 d0       	rcall	.+14     	; 0x251e <__divmodhi4_neg1>
    2510:	77 fd       	sbrc	r23, 7
    2512:	09 d0       	rcall	.+18     	; 0x2526 <__divmodhi4_neg2>
    2514:	0e 94 c3 12 	call	0x2586	; 0x2586 <__udivmodhi4>
    2518:	07 fc       	sbrc	r0, 7
    251a:	05 d0       	rcall	.+10     	; 0x2526 <__divmodhi4_neg2>
    251c:	3e f4       	brtc	.+14     	; 0x252c <__divmodhi4_exit>

0000251e <__divmodhi4_neg1>:
    251e:	90 95       	com	r25
    2520:	81 95       	neg	r24
    2522:	9f 4f       	sbci	r25, 0xFF	; 255
    2524:	08 95       	ret

00002526 <__divmodhi4_neg2>:
    2526:	70 95       	com	r23
    2528:	61 95       	neg	r22
    252a:	7f 4f       	sbci	r23, 0xFF	; 255

0000252c <__divmodhi4_exit>:
    252c:	08 95       	ret

0000252e <__divmodsi4>:
    252e:	05 2e       	mov	r0, r21
    2530:	97 fb       	bst	r25, 7
    2532:	1e f4       	brtc	.+6      	; 0x253a <__divmodsi4+0xc>
    2534:	00 94       	com	r0
    2536:	0e 94 ae 12 	call	0x255c	; 0x255c <__negsi2>
    253a:	57 fd       	sbrc	r21, 7
    253c:	07 d0       	rcall	.+14     	; 0x254c <__divmodsi4_neg2>
    253e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__udivmodsi4>
    2542:	07 fc       	sbrc	r0, 7
    2544:	03 d0       	rcall	.+6      	; 0x254c <__divmodsi4_neg2>
    2546:	4e f4       	brtc	.+18     	; 0x255a <__divmodsi4_exit>
    2548:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__negsi2>

0000254c <__divmodsi4_neg2>:
    254c:	50 95       	com	r21
    254e:	40 95       	com	r20
    2550:	30 95       	com	r19
    2552:	21 95       	neg	r18
    2554:	3f 4f       	sbci	r19, 0xFF	; 255
    2556:	4f 4f       	sbci	r20, 0xFF	; 255
    2558:	5f 4f       	sbci	r21, 0xFF	; 255

0000255a <__divmodsi4_exit>:
    255a:	08 95       	ret

0000255c <__negsi2>:
    255c:	90 95       	com	r25
    255e:	80 95       	com	r24
    2560:	70 95       	com	r23
    2562:	61 95       	neg	r22
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	8f 4f       	sbci	r24, 0xFF	; 255
    2568:	9f 4f       	sbci	r25, 0xFF	; 255
    256a:	08 95       	ret

0000256c <__tablejump2__>:
    256c:	ee 0f       	add	r30, r30
    256e:	ff 1f       	adc	r31, r31
    2570:	05 90       	lpm	r0, Z+
    2572:	f4 91       	lpm	r31, Z
    2574:	e0 2d       	mov	r30, r0
    2576:	09 94       	ijmp

00002578 <__usmulhisi3>:
    2578:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__umulhisi3>

0000257c <__usmulhisi3_tail>:
    257c:	b7 ff       	sbrs	r27, 7
    257e:	08 95       	ret
    2580:	82 1b       	sub	r24, r18
    2582:	93 0b       	sbc	r25, r19
    2584:	08 95       	ret

00002586 <__udivmodhi4>:
    2586:	aa 1b       	sub	r26, r26
    2588:	bb 1b       	sub	r27, r27
    258a:	51 e1       	ldi	r21, 0x11	; 17
    258c:	07 c0       	rjmp	.+14     	; 0x259c <__udivmodhi4_ep>

0000258e <__udivmodhi4_loop>:
    258e:	aa 1f       	adc	r26, r26
    2590:	bb 1f       	adc	r27, r27
    2592:	a6 17       	cp	r26, r22
    2594:	b7 07       	cpc	r27, r23
    2596:	10 f0       	brcs	.+4      	; 0x259c <__udivmodhi4_ep>
    2598:	a6 1b       	sub	r26, r22
    259a:	b7 0b       	sbc	r27, r23

0000259c <__udivmodhi4_ep>:
    259c:	88 1f       	adc	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	5a 95       	dec	r21
    25a2:	a9 f7       	brne	.-22     	; 0x258e <__udivmodhi4_loop>
    25a4:	80 95       	com	r24
    25a6:	90 95       	com	r25
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	08 95       	ret

000025ae <__udivmodsi4>:
    25ae:	a1 e2       	ldi	r26, 0x21	; 33
    25b0:	1a 2e       	mov	r1, r26
    25b2:	aa 1b       	sub	r26, r26
    25b4:	bb 1b       	sub	r27, r27
    25b6:	fd 01       	movw	r30, r26
    25b8:	0d c0       	rjmp	.+26     	; 0x25d4 <__udivmodsi4_ep>

000025ba <__udivmodsi4_loop>:
    25ba:	aa 1f       	adc	r26, r26
    25bc:	bb 1f       	adc	r27, r27
    25be:	ee 1f       	adc	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	a2 17       	cp	r26, r18
    25c4:	b3 07       	cpc	r27, r19
    25c6:	e4 07       	cpc	r30, r20
    25c8:	f5 07       	cpc	r31, r21
    25ca:	20 f0       	brcs	.+8      	; 0x25d4 <__udivmodsi4_ep>
    25cc:	a2 1b       	sub	r26, r18
    25ce:	b3 0b       	sbc	r27, r19
    25d0:	e4 0b       	sbc	r30, r20
    25d2:	f5 0b       	sbc	r31, r21

000025d4 <__udivmodsi4_ep>:
    25d4:	66 1f       	adc	r22, r22
    25d6:	77 1f       	adc	r23, r23
    25d8:	88 1f       	adc	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	1a 94       	dec	r1
    25de:	69 f7       	brne	.-38     	; 0x25ba <__udivmodsi4_loop>
    25e0:	60 95       	com	r22
    25e2:	70 95       	com	r23
    25e4:	80 95       	com	r24
    25e6:	90 95       	com	r25
    25e8:	9b 01       	movw	r18, r22
    25ea:	ac 01       	movw	r20, r24
    25ec:	bd 01       	movw	r22, r26
    25ee:	cf 01       	movw	r24, r30
    25f0:	08 95       	ret

000025f2 <__umulhisi3>:
    25f2:	a2 9f       	mul	r26, r18
    25f4:	b0 01       	movw	r22, r0
    25f6:	b3 9f       	mul	r27, r19
    25f8:	c0 01       	movw	r24, r0
    25fa:	a3 9f       	mul	r26, r19
    25fc:	70 0d       	add	r23, r0
    25fe:	81 1d       	adc	r24, r1
    2600:	11 24       	eor	r1, r1
    2602:	91 1d       	adc	r25, r1
    2604:	b2 9f       	mul	r27, r18
    2606:	70 0d       	add	r23, r0
    2608:	81 1d       	adc	r24, r1
    260a:	11 24       	eor	r1, r1
    260c:	91 1d       	adc	r25, r1
    260e:	08 95       	ret

00002610 <setjmp>:
    2610:	dc 01       	movw	r26, r24
    2612:	2d 92       	st	X+, r2
    2614:	3d 92       	st	X+, r3
    2616:	4d 92       	st	X+, r4
    2618:	5d 92       	st	X+, r5
    261a:	6d 92       	st	X+, r6
    261c:	7d 92       	st	X+, r7
    261e:	8d 92       	st	X+, r8
    2620:	9d 92       	st	X+, r9
    2622:	ad 92       	st	X+, r10
    2624:	bd 92       	st	X+, r11
    2626:	cd 92       	st	X+, r12
    2628:	dd 92       	st	X+, r13
    262a:	ed 92       	st	X+, r14
    262c:	fd 92       	st	X+, r15
    262e:	0d 93       	st	X+, r16
    2630:	1d 93       	st	X+, r17
    2632:	cd 93       	st	X+, r28
    2634:	dd 93       	st	X+, r29
    2636:	ff 91       	pop	r31
    2638:	ef 91       	pop	r30
    263a:	8d b7       	in	r24, 0x3d	; 61
    263c:	8d 93       	st	X+, r24
    263e:	8e b7       	in	r24, 0x3e	; 62
    2640:	8d 93       	st	X+, r24
    2642:	8f b7       	in	r24, 0x3f	; 63
    2644:	8d 93       	st	X+, r24
    2646:	ed 93       	st	X+, r30
    2648:	fd 93       	st	X+, r31
    264a:	88 27       	eor	r24, r24
    264c:	99 27       	eor	r25, r25
    264e:	09 94       	ijmp

00002650 <longjmp>:
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	81 30       	cpi	r24, 0x01	; 1
    2656:	91 05       	cpc	r25, r1
    2658:	81 1d       	adc	r24, r1
    265a:	2d 90       	ld	r2, X+
    265c:	3d 90       	ld	r3, X+
    265e:	4d 90       	ld	r4, X+
    2660:	5d 90       	ld	r5, X+
    2662:	6d 90       	ld	r6, X+
    2664:	7d 90       	ld	r7, X+
    2666:	8d 90       	ld	r8, X+
    2668:	9d 90       	ld	r9, X+
    266a:	ad 90       	ld	r10, X+
    266c:	bd 90       	ld	r11, X+
    266e:	cd 90       	ld	r12, X+
    2670:	dd 90       	ld	r13, X+
    2672:	ed 90       	ld	r14, X+
    2674:	fd 90       	ld	r15, X+
    2676:	0d 91       	ld	r16, X+
    2678:	1d 91       	ld	r17, X+
    267a:	cd 91       	ld	r28, X+
    267c:	dd 91       	ld	r29, X+
    267e:	ed 91       	ld	r30, X+
    2680:	fd 91       	ld	r31, X+
    2682:	0d 90       	ld	r0, X+
    2684:	f8 94       	cli
    2686:	fe bf       	out	0x3e, r31	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	ed bf       	out	0x3d, r30	; 61
    268c:	ed 91       	ld	r30, X+
    268e:	fd 91       	ld	r31, X+
    2690:	09 94       	ijmp

00002692 <_exit>:
    2692:	f8 94       	cli

00002694 <__stop_program>:
    2694:	ff cf       	rjmp	.-2      	; 0x2694 <__stop_program>
