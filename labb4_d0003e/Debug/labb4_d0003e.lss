
labb4_d0003e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000023c4  00002458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000383  00800108  00800108  00002460  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029f9  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001017  00000000  00000000  00005109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001556  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  00007678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093b  00000000  00000000  00008258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000281f  00000000  00000000  00008b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000b3b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__vector_1>
       8:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_2>
       c:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__vector_3>
      10:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__vector_4>
      14:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__vector_9>
      28:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_10>
      2c:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__vector_11>
      30:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_12>
      34:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_13>
      38:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_14>
      3c:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__vector_15>
      40:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__vector_16>
      44:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_17>
      48:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__vector_18>
      4c:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__vector_19>
      50:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_20>
      54:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__vector_21>
      58:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__vector_22>
      5c:	a3 00       	.word	0x00a3	; ????
      5e:	85 00       	.word	0x0085	; ????
      60:	88 00       	.word	0x0088	; ????
      62:	8b 00       	.word	0x008b	; ????
      64:	8e 00       	.word	0x008e	; ????
      66:	91 00       	.word	0x0091	; ????
      68:	94 00       	.word	0x0094	; ????
      6a:	97 00       	.word	0x0097	; ????
      6c:	9a 00       	.word	0x009a	; ????
      6e:	9d 00       	.word	0x009d	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 ec       	ldi	r30, 0xC4	; 196
      84:	f3 e2       	ldi	r31, 0x23	; 35
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 30       	cpi	r26, 0x08	; 8
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a8 e0       	ldi	r26, 0x08	; 8
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 38       	cpi	r26, 0x8B	; 139
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <main>
      a6:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:

 }


void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b6:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      b8:	87 eb       	ldi	r24, 0xB7	; 183
      ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c4:	8f e0       	ldi	r24, 0x0F	; 15
      c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d0:	08 95       	ret

000000d2 <button_init>:
void button_init(void){


    
    // initialize button
    PORTB |= ((1 << 7)| (1 << 6 ) | (1 << 4));  // 7 down, 6 up, 4 center down 
      d2:	85 b1       	in	r24, 0x05	; 5
      d4:	80 6d       	ori	r24, 0xD0	; 208
      d6:	85 b9       	out	0x05, r24	; 5
	PORTE |= ( (1 << 2) | ( 1 << 3));           // 2 left, 3 right
      d8:	8e b1       	in	r24, 0x0e	; 14
      da:	8c 60       	ori	r24, 0x0C	; 12
      dc:	8e b9       	out	0x0e, r24	; 14


	// enable interupts for joystick
    EIMSK |= (1 << PCIE1) | (1 << PCIE0); //  PCIE1 enables PCINT15..8 interupts // PCIE0 enables PCINT7..0 interupts
      de:	8d b3       	in	r24, 0x1d	; 29
      e0:	80 6c       	ori	r24, 0xC0	; 192
      e2:	8d bb       	out	0x1d, r24	; 29
	//EIMSK |= (1 << PCINT15);

	PCMSK1 |= (1 << PCINT15)|(1 << PCINT14)|(1 << PCINT12); //enables those pins
      e4:	ec e6       	ldi	r30, 0x6C	; 108
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 6d       	ori	r24, 0xD0	; 208
      ec:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3)|(1 << PCINT2);
      ee:	eb e6       	ldi	r30, 0x6B	; 107
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	8c 60       	ori	r24, 0x0C	; 12
      f6:	80 83       	st	Z, r24
      f8:	08 95       	ret

000000fa <getValueArray>:


}

int getValueArray(int i){
    switch (i)
      fa:	8a 30       	cpi	r24, 0x0A	; 10
      fc:	91 05       	cpc	r25, r1
      fe:	00 f5       	brcc	.+64     	; 0x140 <getValueArray+0x46>
     100:	fc 01       	movw	r30, r24
     102:	e2 5d       	subi	r30, 0xD2	; 210
     104:	ff 4f       	sbci	r31, 0xFF	; 255
     106:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
     10a:	80 e8       	ldi	r24, 0x80	; 128
     10c:	90 e2       	ldi	r25, 0x20	; 32
     10e:	08 95       	ret
    
    case 2:
        return TwoValue;
     110:	81 e1       	ldi	r24, 0x11	; 17
     112:	9e e1       	ldi	r25, 0x1E	; 30
     114:	08 95       	ret

    case 3:
        return ThreeValue;
     116:	81 e1       	ldi	r24, 0x11	; 17
     118:	9b e1       	ldi	r25, 0x1B	; 27
     11a:	08 95       	ret
    
    case 4:
        return FourValue;
     11c:	80 e5       	ldi	r24, 0x50	; 80
     11e:	9b e0       	ldi	r25, 0x0B	; 11
     120:	08 95       	ret

    case 5:
        return FiveValue;
     122:	81 e4       	ldi	r24, 0x41	; 65
     124:	9b e1       	ldi	r25, 0x1B	; 27
     126:	08 95       	ret
    
    case 6:
        return SixValue;
     128:	81 e4       	ldi	r24, 0x41	; 65
     12a:	9f e1       	ldi	r25, 0x1F	; 31
     12c:	08 95       	ret
    
    case 7:
        return SevenValue;
     12e:	81 e1       	ldi	r24, 0x11	; 17
     130:	91 e0       	ldi	r25, 0x01	; 1
     132:	08 95       	ret
        
    case 8:
        return EightValue;
     134:	81 e5       	ldi	r24, 0x51	; 81
     136:	9f e1       	ldi	r25, 0x1F	; 31
     138:	08 95       	ret
    
    case 9:
        return NineValue;
     13a:	81 e5       	ldi	r24, 0x51	; 81
     13c:	9b e0       	ldi	r25, 0x0B	; 11
     13e:	08 95       	ret
    
    default: // 10
        return BlankValue;
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	08 95       	ret

int getValueArray(int i){
    switch (i)
    {
    case 0:
        return ZeroValue;
     146:	81 e5       	ldi	r24, 0x51	; 81
     148:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     14a:	08 95       	ret

0000014c <writeChar>:

void writeChar(char ch, int pos) {
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <writeChar+0xc>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
	

	volatile int i = 0;
     15c:	1a 82       	std	Y+2, r1	; 0x02
     15e:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     160:	66 30       	cpi	r22, 0x06	; 6
     162:	71 05       	cpc	r23, r1
     164:	08 f0       	brcs	.+2      	; 0x168 <writeChar+0x1c>
     166:	fe c1       	rjmp	.+1020   	; 0x564 <__stack+0x65>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     168:	90 ed       	ldi	r25, 0xD0	; 208
     16a:	98 0f       	add	r25, r24
     16c:	9a 30       	cpi	r25, 0x0A	; 10
     16e:	28 f0       	brcs	.+10     	; 0x17a <writeChar+0x2e>
		i=10;
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	9a 83       	std	Y+2, r25	; 0x02
     176:	89 83       	std	Y+1, r24	; 0x01
     178:	04 c0       	rjmp	.+8      	; 0x182 <writeChar+0x36>
	}else{
        i = ch - 48;
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	c0 97       	sbiw	r24, 0x30	; 48
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     182:	61 15       	cp	r22, r1
     184:	71 05       	cpc	r23, r1
     186:	09 f0       	breq	.+2      	; 0x18a <writeChar+0x3e>
     188:	4e c0       	rjmp	.+156    	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     18a:	0f 2e       	mov	r0, r31
     18c:	fc ee       	ldi	r31, 0xEC	; 236
     18e:	ef 2e       	mov	r14, r31
     190:	f1 2c       	mov	r15, r1
     192:	f0 2d       	mov	r31, r0
     194:	f7 01       	movw	r30, r14
     196:	10 81       	ld	r17, Z
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	9a 81       	ldd	r25, Y+2	; 0x02
     19c:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     1a0:	10 7f       	andi	r17, 0xF0	; 240
     1a2:	8f 70       	andi	r24, 0x0F	; 15
     1a4:	81 2b       	or	r24, r17
     1a6:	f7 01       	movw	r30, r14
     1a8:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     1aa:	0f 2e       	mov	r0, r31
     1ac:	f1 ef       	ldi	r31, 0xF1	; 241
     1ae:	ef 2e       	mov	r14, r31
     1b0:	f1 2c       	mov	r15, r1
     1b2:	f0 2d       	mov	r31, r0
     1b4:	f7 01       	movw	r30, r14
     1b6:	10 81       	ld	r17, Z
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     1c0:	80 7f       	andi	r24, 0xF0	; 240
     1c2:	99 27       	eor	r25, r25
     1c4:	95 95       	asr	r25
     1c6:	87 95       	ror	r24
     1c8:	95 95       	asr	r25
     1ca:	87 95       	ror	r24
     1cc:	95 95       	asr	r25
     1ce:	87 95       	ror	r24
     1d0:	95 95       	asr	r25
     1d2:	87 95       	ror	r24
     1d4:	10 7f       	andi	r17, 0xF0	; 240
     1d6:	81 2b       	or	r24, r17
     1d8:	f7 01       	movw	r30, r14
     1da:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1dc:	0f 2e       	mov	r0, r31
     1de:	f6 ef       	ldi	r31, 0xF6	; 246
     1e0:	ef 2e       	mov	r14, r31
     1e2:	f1 2c       	mov	r15, r1
     1e4:	f0 2d       	mov	r31, r0
     1e6:	f7 01       	movw	r30, r14
     1e8:	10 81       	ld	r17, Z
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
     1ee:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     1f2:	88 27       	eor	r24, r24
     1f4:	9f 70       	andi	r25, 0x0F	; 15
     1f6:	10 7f       	andi	r17, 0xF0	; 240
     1f8:	19 2b       	or	r17, r25
     1fa:	f7 01       	movw	r30, r14
     1fc:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     1fe:	0f 2e       	mov	r0, r31
     200:	fb ef       	ldi	r31, 0xFB	; 251
     202:	ef 2e       	mov	r14, r31
     204:	f1 2c       	mov	r15, r1
     206:	f0 2d       	mov	r31, r0
     208:	f7 01       	movw	r30, r14
     20a:	10 81       	ld	r17, Z
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9a 81       	ldd	r25, Y+2	; 0x02
     210:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     214:	10 7f       	andi	r17, 0xF0	; 240
     216:	95 95       	asr	r25
     218:	95 95       	asr	r25
     21a:	95 95       	asr	r25
     21c:	95 95       	asr	r25
     21e:	91 2b       	or	r25, r17
     220:	f7 01       	movw	r30, r14
     222:	90 83       	st	Z, r25
     224:	9f c1       	rjmp	.+830    	; 0x564 <__stack+0x65>
		
	} else if(pos==1){
     226:	61 30       	cpi	r22, 0x01	; 1
     228:	71 05       	cpc	r23, r1
     22a:	09 f0       	breq	.+2      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
     22c:	50 c0       	rjmp	.+160    	; 0x2ce <__EEPROM_REGION_LENGTH__+0xce>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     22e:	0f 2e       	mov	r0, r31
     230:	fc ee       	ldi	r31, 0xEC	; 236
     232:	ef 2e       	mov	r14, r31
     234:	f1 2c       	mov	r15, r1
     236:	f0 2d       	mov	r31, r0
     238:	f7 01       	movw	r30, r14
     23a:	10 81       	ld	r17, Z
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	9a 81       	ldd	r25, Y+2	; 0x02
     240:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     244:	1f 70       	andi	r17, 0x0F	; 15
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	81 2b       	or	r24, r17
     254:	f7 01       	movw	r30, r14
     256:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     258:	0f 2e       	mov	r0, r31
     25a:	f1 ef       	ldi	r31, 0xF1	; 241
     25c:	ef 2e       	mov	r14, r31
     25e:	f1 2c       	mov	r15, r1
     260:	f0 2d       	mov	r31, r0
     262:	f7 01       	movw	r30, r14
     264:	10 81       	ld	r17, Z
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	9a 81       	ldd	r25, Y+2	; 0x02
     26a:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     26e:	1f 70       	andi	r17, 0x0F	; 15
     270:	80 7f       	andi	r24, 0xF0	; 240
     272:	81 2b       	or	r24, r17
     274:	f7 01       	movw	r30, r14
     276:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     278:	0f 2e       	mov	r0, r31
     27a:	f6 ef       	ldi	r31, 0xF6	; 246
     27c:	ef 2e       	mov	r14, r31
     27e:	f1 2c       	mov	r15, r1
     280:	f0 2d       	mov	r31, r0
     282:	f7 01       	movw	r30, r14
     284:	10 81       	ld	r17, Z
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	9a 81       	ldd	r25, Y+2	; 0x02
     28a:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     28e:	88 27       	eor	r24, r24
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	1f 70       	andi	r17, 0x0F	; 15
     2a4:	81 2b       	or	r24, r17
     2a6:	f7 01       	movw	r30, r14
     2a8:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     2aa:	0f 2e       	mov	r0, r31
     2ac:	fb ef       	ldi	r31, 0xFB	; 251
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f1 2c       	mov	r15, r1
     2b2:	f0 2d       	mov	r31, r0
     2b4:	f7 01       	movw	r30, r14
     2b6:	10 81       	ld	r17, Z
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	9a 81       	ldd	r25, Y+2	; 0x02
     2bc:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     2c0:	88 27       	eor	r24, r24
     2c2:	90 7f       	andi	r25, 0xF0	; 240
     2c4:	1f 70       	andi	r17, 0x0F	; 15
     2c6:	19 2b       	or	r17, r25
     2c8:	f7 01       	movw	r30, r14
     2ca:	10 83       	st	Z, r17
     2cc:	4b c1       	rjmp	.+662    	; 0x564 <__stack+0x65>
	} else if(pos==2){
     2ce:	62 30       	cpi	r22, 0x02	; 2
     2d0:	71 05       	cpc	r23, r1
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <__EEPROM_REGION_LENGTH__+0xd6>
     2d4:	4e c0       	rjmp	.+156    	; 0x372 <__EEPROM_REGION_LENGTH__+0x172>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2d6:	0f 2e       	mov	r0, r31
     2d8:	fd ee       	ldi	r31, 0xED	; 237
     2da:	ef 2e       	mov	r14, r31
     2dc:	f1 2c       	mov	r15, r1
     2de:	f0 2d       	mov	r31, r0
     2e0:	f7 01       	movw	r30, r14
     2e2:	10 81       	ld	r17, Z
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     2ec:	10 7f       	andi	r17, 0xF0	; 240
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	81 2b       	or	r24, r17
     2f2:	f7 01       	movw	r30, r14
     2f4:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     2f6:	0f 2e       	mov	r0, r31
     2f8:	f2 ef       	ldi	r31, 0xF2	; 242
     2fa:	ef 2e       	mov	r14, r31
     2fc:	f1 2c       	mov	r15, r1
     2fe:	f0 2d       	mov	r31, r0
     300:	f7 01       	movw	r30, r14
     302:	10 81       	ld	r17, Z
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     30c:	80 7f       	andi	r24, 0xF0	; 240
     30e:	99 27       	eor	r25, r25
     310:	95 95       	asr	r25
     312:	87 95       	ror	r24
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	95 95       	asr	r25
     31a:	87 95       	ror	r24
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	10 7f       	andi	r17, 0xF0	; 240
     322:	81 2b       	or	r24, r17
     324:	f7 01       	movw	r30, r14
     326:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     328:	0f 2e       	mov	r0, r31
     32a:	f7 ef       	ldi	r31, 0xF7	; 247
     32c:	ef 2e       	mov	r14, r31
     32e:	f1 2c       	mov	r15, r1
     330:	f0 2d       	mov	r31, r0
     332:	f7 01       	movw	r30, r14
     334:	10 81       	ld	r17, Z
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     33e:	88 27       	eor	r24, r24
     340:	9f 70       	andi	r25, 0x0F	; 15
     342:	10 7f       	andi	r17, 0xF0	; 240
     344:	19 2b       	or	r17, r25
     346:	f7 01       	movw	r30, r14
     348:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     34a:	0f 2e       	mov	r0, r31
     34c:	fc ef       	ldi	r31, 0xFC	; 252
     34e:	ef 2e       	mov	r14, r31
     350:	f1 2c       	mov	r15, r1
     352:	f0 2d       	mov	r31, r0
     354:	f7 01       	movw	r30, r14
     356:	10 81       	ld	r17, Z
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     360:	10 7f       	andi	r17, 0xF0	; 240
     362:	95 95       	asr	r25
     364:	95 95       	asr	r25
     366:	95 95       	asr	r25
     368:	95 95       	asr	r25
     36a:	91 2b       	or	r25, r17
     36c:	f7 01       	movw	r30, r14
     36e:	90 83       	st	Z, r25
     370:	f9 c0       	rjmp	.+498    	; 0x564 <__stack+0x65>
		
	} else if(pos==3){
     372:	63 30       	cpi	r22, 0x03	; 3
     374:	71 05       	cpc	r23, r1
     376:	09 f0       	breq	.+2      	; 0x37a <__EEPROM_REGION_LENGTH__+0x17a>
     378:	50 c0       	rjmp	.+160    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     37a:	0f 2e       	mov	r0, r31
     37c:	fd ee       	ldi	r31, 0xED	; 237
     37e:	ef 2e       	mov	r14, r31
     380:	f1 2c       	mov	r15, r1
     382:	f0 2d       	mov	r31, r0
     384:	f7 01       	movw	r30, r14
     386:	10 81       	ld	r17, Z
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     390:	1f 70       	andi	r17, 0x0F	; 15
     392:	82 95       	swap	r24
     394:	92 95       	swap	r25
     396:	90 7f       	andi	r25, 0xF0	; 240
     398:	98 27       	eor	r25, r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	98 27       	eor	r25, r24
     39e:	81 2b       	or	r24, r17
     3a0:	f7 01       	movw	r30, r14
     3a2:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     3a4:	0f 2e       	mov	r0, r31
     3a6:	f2 ef       	ldi	r31, 0xF2	; 242
     3a8:	ef 2e       	mov	r14, r31
     3aa:	f1 2c       	mov	r15, r1
     3ac:	f0 2d       	mov	r31, r0
     3ae:	f7 01       	movw	r30, r14
     3b0:	10 81       	ld	r17, Z
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	9a 81       	ldd	r25, Y+2	; 0x02
     3b6:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     3ba:	1f 70       	andi	r17, 0x0F	; 15
     3bc:	80 7f       	andi	r24, 0xF0	; 240
     3be:	81 2b       	or	r24, r17
     3c0:	f7 01       	movw	r30, r14
     3c2:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     3c4:	0f 2e       	mov	r0, r31
     3c6:	f7 ef       	ldi	r31, 0xF7	; 247
     3c8:	ef 2e       	mov	r14, r31
     3ca:	f1 2c       	mov	r15, r1
     3cc:	f0 2d       	mov	r31, r0
     3ce:	f7 01       	movw	r30, r14
     3d0:	10 81       	ld	r17, Z
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     3da:	88 27       	eor	r24, r24
     3dc:	9f 70       	andi	r25, 0x0F	; 15
     3de:	95 95       	asr	r25
     3e0:	87 95       	ror	r24
     3e2:	95 95       	asr	r25
     3e4:	87 95       	ror	r24
     3e6:	95 95       	asr	r25
     3e8:	87 95       	ror	r24
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	1f 70       	andi	r17, 0x0F	; 15
     3f0:	81 2b       	or	r24, r17
     3f2:	f7 01       	movw	r30, r14
     3f4:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     3f6:	0f 2e       	mov	r0, r31
     3f8:	fc ef       	ldi	r31, 0xFC	; 252
     3fa:	ef 2e       	mov	r14, r31
     3fc:	f1 2c       	mov	r15, r1
     3fe:	f0 2d       	mov	r31, r0
     400:	f7 01       	movw	r30, r14
     402:	10 81       	ld	r17, Z
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     40c:	88 27       	eor	r24, r24
     40e:	90 7f       	andi	r25, 0xF0	; 240
     410:	1f 70       	andi	r17, 0x0F	; 15
     412:	19 2b       	or	r17, r25
     414:	f7 01       	movw	r30, r14
     416:	10 83       	st	Z, r17
     418:	a5 c0       	rjmp	.+330    	; 0x564 <__stack+0x65>
		
	} else if(pos==4){
     41a:	64 30       	cpi	r22, 0x04	; 4
     41c:	71 05       	cpc	r23, r1
     41e:	09 f0       	breq	.+2      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
     420:	4e c0       	rjmp	.+156    	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     422:	0f 2e       	mov	r0, r31
     424:	fe ee       	ldi	r31, 0xEE	; 238
     426:	ef 2e       	mov	r14, r31
     428:	f1 2c       	mov	r15, r1
     42a:	f0 2d       	mov	r31, r0
     42c:	f7 01       	movw	r30, r14
     42e:	10 81       	ld	r17, Z
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     438:	10 7f       	andi	r17, 0xF0	; 240
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	81 2b       	or	r24, r17
     43e:	f7 01       	movw	r30, r14
     440:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     442:	0f 2e       	mov	r0, r31
     444:	f3 ef       	ldi	r31, 0xF3	; 243
     446:	ef 2e       	mov	r14, r31
     448:	f1 2c       	mov	r15, r1
     44a:	f0 2d       	mov	r31, r0
     44c:	f7 01       	movw	r30, r14
     44e:	10 81       	ld	r17, Z
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     458:	80 7f       	andi	r24, 0xF0	; 240
     45a:	99 27       	eor	r25, r25
     45c:	95 95       	asr	r25
     45e:	87 95       	ror	r24
     460:	95 95       	asr	r25
     462:	87 95       	ror	r24
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	10 7f       	andi	r17, 0xF0	; 240
     46e:	81 2b       	or	r24, r17
     470:	f7 01       	movw	r30, r14
     472:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     474:	0f 2e       	mov	r0, r31
     476:	f8 ef       	ldi	r31, 0xF8	; 248
     478:	ef 2e       	mov	r14, r31
     47a:	f1 2c       	mov	r15, r1
     47c:	f0 2d       	mov	r31, r0
     47e:	f7 01       	movw	r30, r14
     480:	10 81       	ld	r17, Z
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     48a:	88 27       	eor	r24, r24
     48c:	9f 70       	andi	r25, 0x0F	; 15
     48e:	10 7f       	andi	r17, 0xF0	; 240
     490:	19 2b       	or	r17, r25
     492:	f7 01       	movw	r30, r14
     494:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     496:	0f 2e       	mov	r0, r31
     498:	fd ef       	ldi	r31, 0xFD	; 253
     49a:	ef 2e       	mov	r14, r31
     49c:	f1 2c       	mov	r15, r1
     49e:	f0 2d       	mov	r31, r0
     4a0:	f7 01       	movw	r30, r14
     4a2:	10 81       	ld	r17, Z
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	9a 81       	ldd	r25, Y+2	; 0x02
     4a8:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     4ac:	10 7f       	andi	r17, 0xF0	; 240
     4ae:	95 95       	asr	r25
     4b0:	95 95       	asr	r25
     4b2:	95 95       	asr	r25
     4b4:	95 95       	asr	r25
     4b6:	91 2b       	or	r25, r17
     4b8:	f7 01       	movw	r30, r14
     4ba:	90 83       	st	Z, r25
     4bc:	53 c0       	rjmp	.+166    	; 0x564 <__stack+0x65>
		
	} else if(pos==5){
     4be:	65 30       	cpi	r22, 0x05	; 5
     4c0:	71 05       	cpc	r23, r1
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__DATA_REGION_LENGTH__+0xc6>
     4c4:	4f c0       	rjmp	.+158    	; 0x564 <__stack+0x65>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     4c6:	0f 2e       	mov	r0, r31
     4c8:	fe ee       	ldi	r31, 0xEE	; 238
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 2c       	mov	r15, r1
     4ce:	f0 2d       	mov	r31, r0
     4d0:	f7 01       	movw	r30, r14
     4d2:	10 81       	ld	r17, Z
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     4dc:	1f 70       	andi	r17, 0x0F	; 15
     4de:	82 95       	swap	r24
     4e0:	92 95       	swap	r25
     4e2:	90 7f       	andi	r25, 0xF0	; 240
     4e4:	98 27       	eor	r25, r24
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	98 27       	eor	r25, r24
     4ea:	81 2b       	or	r24, r17
     4ec:	f7 01       	movw	r30, r14
     4ee:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4f0:	0f 2e       	mov	r0, r31
     4f2:	f3 ef       	ldi	r31, 0xF3	; 243
     4f4:	ef 2e       	mov	r14, r31
     4f6:	f1 2c       	mov	r15, r1
     4f8:	f0 2d       	mov	r31, r0
     4fa:	f7 01       	movw	r30, r14
     4fc:	10 81       	ld	r17, Z
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	9a 81       	ldd	r25, Y+2	; 0x02
     502:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     506:	1f 70       	andi	r17, 0x0F	; 15
     508:	80 7f       	andi	r24, 0xF0	; 240
     50a:	81 2b       	or	r24, r17
     50c:	f7 01       	movw	r30, r14
     50e:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     510:	0f 2e       	mov	r0, r31
     512:	f8 ef       	ldi	r31, 0xF8	; 248
     514:	ef 2e       	mov	r14, r31
     516:	f1 2c       	mov	r15, r1
     518:	f0 2d       	mov	r31, r0
     51a:	f7 01       	movw	r30, r14
     51c:	10 81       	ld	r17, Z
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     526:	88 27       	eor	r24, r24
     528:	9f 70       	andi	r25, 0x0F	; 15
     52a:	95 95       	asr	r25
     52c:	87 95       	ror	r24
     52e:	95 95       	asr	r25
     530:	87 95       	ror	r24
     532:	95 95       	asr	r25
     534:	87 95       	ror	r24
     536:	95 95       	asr	r25
     538:	87 95       	ror	r24
     53a:	1f 70       	andi	r17, 0x0F	; 15
     53c:	81 2b       	or	r24, r17
     53e:	f7 01       	movw	r30, r14
     540:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     542:	0f 2e       	mov	r0, r31
     544:	fd ef       	ldi	r31, 0xFD	; 253
     546:	ef 2e       	mov	r14, r31
     548:	f1 2c       	mov	r15, r1
     54a:	f0 2d       	mov	r31, r0
     54c:	f7 01       	movw	r30, r14
     54e:	10 81       	ld	r17, Z
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	9a 81       	ldd	r25, Y+2	; 0x02
     554:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     558:	88 27       	eor	r24, r24
     55a:	90 7f       	andi	r25, 0xF0	; 240
     55c:	1f 70       	andi	r17, 0x0F	; 15
     55e:	19 2b       	or	r17, r25
     560:	f7 01       	movw	r30, r14
     562:	10 83       	st	Z, r17
		
	}
	

}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	08 95       	ret

00000574 <printAt>:

void printAt(long num, int pos) {
     574:	8f 92       	push	r8
     576:	9f 92       	push	r9
     578:	af 92       	push	r10
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	4b 01       	movw	r8, r22
     58a:	5c 01       	movw	r10, r24
     58c:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     58e:	24 e6       	ldi	r18, 0x64	; 100
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	0e 94 2e 11 	call	0x225c	; 0x225c <__divmodsi4>
     59a:	0f 2e       	mov	r0, r31
     59c:	fa e0       	ldi	r31, 0x0A	; 10
     59e:	cf 2e       	mov	r12, r31
     5a0:	d1 2c       	mov	r13, r1
     5a2:	e1 2c       	mov	r14, r1
     5a4:	f1 2c       	mov	r15, r1
     5a6:	f0 2d       	mov	r31, r0
     5a8:	a7 01       	movw	r20, r14
     5aa:	96 01       	movw	r18, r12
     5ac:	0e 94 2e 11 	call	0x225c	; 0x225c <__divmodsi4>
     5b0:	be 01       	movw	r22, r28
     5b2:	80 e3       	ldi	r24, 0x30	; 48
     5b4:	82 0f       	add	r24, r18
     5b6:	0e 94 a6 00 	call	0x14c	; 0x14c <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     5ba:	21 96       	adiw	r28, 0x01	; 1
     5bc:	c5 01       	movw	r24, r10
     5be:	b4 01       	movw	r22, r8
     5c0:	a7 01       	movw	r20, r14
     5c2:	96 01       	movw	r18, r12
     5c4:	0e 94 2e 11 	call	0x225c	; 0x225c <__divmodsi4>
     5c8:	86 2f       	mov	r24, r22
     5ca:	be 01       	movw	r22, r28
     5cc:	80 5d       	subi	r24, 0xD0	; 208
     5ce:	0e 94 a6 00 	call	0x14c	; 0x14c <writeChar>
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	bf 90       	pop	r11
     5e0:	af 90       	pop	r10
     5e2:	9f 90       	pop	r9
     5e4:	8f 90       	pop	r8
     5e6:	08 95       	ret

000005e8 <Gui__init>:
#include <stdio.h>




void Gui__init(guiObj* self, pulseGenerator* pulse1, pulseGenerator* pulse2) {
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	ec 01       	movw	r28, r24

    self->pulse1 = pulse1;
     5ee:	7d 83       	std	Y+5, r23	; 0x05
     5f0:	6c 83       	std	Y+4, r22	; 0x04
    self->currentPulse = pulse1;
     5f2:	79 87       	std	Y+9, r23	; 0x09
     5f4:	68 87       	std	Y+8, r22	; 0x08
    self->pulse2 = pulse2;
     5f6:	5f 83       	std	Y+7, r21	; 0x07
     5f8:	4e 83       	std	Y+6, r20	; 0x06
    self->pos = 0;
     5fa:	1d 86       	std	Y+13, r1	; 0x0d
     5fc:	1c 86       	std	Y+12, r1	; 0x0c
    self->prevValue = 0;
     5fe:	1f 86       	std	Y+15, r1	; 0x0f
     600:	1e 86       	std	Y+14, r1	; 0x0e

    if (!self->initialized)
     602:	8a 85       	ldd	r24, Y+10	; 0x0a
     604:	9b 85       	ldd	r25, Y+11	; 0x0b
     606:	89 2b       	or	r24, r25
     608:	41 f4       	brne	.+16     	; 0x61a <Gui__init+0x32>
    {
        LCD_Init();
     60a:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
        button_init();
     60e:	0e 94 69 00 	call	0xd2	; 0xd2 <button_init>
        self->initialized = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	9b 87       	std	Y+11, r25	; 0x0b
     618:	8a 87       	std	Y+10, r24	; 0x0a
    }

    printAt(self->pulse1->freq,0);
     61a:	ec 81       	ldd	r30, Y+4	; 0x04
     61c:	fd 81       	ldd	r31, Y+5	; 0x05
     61e:	64 85       	ldd	r22, Z+12	; 0x0c
     620:	75 85       	ldd	r23, Z+13	; 0x0d
     622:	07 2e       	mov	r0, r23
     624:	00 0c       	add	r0, r0
     626:	88 0b       	sbc	r24, r24
     628:	99 0b       	sbc	r25, r25
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
    printAt(self->pulse2->freq,4);
     632:	ee 81       	ldd	r30, Y+6	; 0x06
     634:	ff 81       	ldd	r31, Y+7	; 0x07
     636:	64 85       	ldd	r22, Z+12	; 0x0c
     638:	75 85       	ldd	r23, Z+13	; 0x0d
     63a:	07 2e       	mov	r0, r23
     63c:	00 0c       	add	r0, r0
     63e:	88 0b       	sbc	r24, r24
     640:	99 0b       	sbc	r25, r25
     642:	44 e0       	ldi	r20, 0x04	; 4
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>

    
    

 }
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <readJoystick>:
    pp++;
    writeChar( num % 10 + '0', pp);
}

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
     650:	1f 9b       	sbis	0x03, 7	; 3
     652:	0b c0       	rjmp	.+22     	; 0x66a <readJoystick+0x1a>
        return 7;
    }else if((PINB & (1<<6))==0){ // 6 up
     654:	1e 9b       	sbis	0x03, 6	; 3
     656:	0c c0       	rjmp	.+24     	; 0x670 <readJoystick+0x20>
        return 6;
    }else if((PINB & (1<<4))==0){ // 4 center
     658:	1c 9b       	sbis	0x03, 4	; 3
     65a:	0d c0       	rjmp	.+26     	; 0x676 <readJoystick+0x26>
        return 4;
    }else if((PINE & (1<<2))==0){ // 2 left
     65c:	62 9b       	sbis	0x0c, 2	; 12
     65e:	0e c0       	rjmp	.+28     	; 0x67c <readJoystick+0x2c>
        return 2;
    }else if((PINE & (1<<3))==0){ // 3 right
     660:	63 9b       	sbis	0x0c, 3	; 12
     662:	0f c0       	rjmp	.+30     	; 0x682 <readJoystick+0x32>
        return 3;
    }else{
        return 0;
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	08 95       	ret
    writeChar( num % 10 + '0', pp);
}

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
        return 7;
     66a:	87 e0       	ldi	r24, 0x07	; 7
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 95       	ret
    }else if((PINB & (1<<6))==0){ // 6 up
        return 6;
     670:	86 e0       	ldi	r24, 0x06	; 6
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	08 95       	ret
    }else if((PINB & (1<<4))==0){ // 4 center
        return 4;
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	08 95       	ret
    }else if((PINE & (1<<2))==0){ // 2 left
        return 2;
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	08 95       	ret
    }else if((PINE & (1<<3))==0){ // 3 right
        return 3;
     682:	83 e0       	ldi	r24, 0x03	; 3
     684:	90 e0       	ldi	r25, 0x00	; 0
    }else{
        return 0;
    }
}
     686:	08 95       	ret

00000688 <updateGui>:
void hold(guiObj* self){
    AFTER(MSEC(500),self,updateGui,NULL);
}


void updateGui(guiObj* self){
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	00 d0       	rcall	.+0      	; 0x696 <updateGui+0xe>
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	8c 01       	movw	r16, r24

    
    
volatile int value = readJoystick();
     69c:	0e 94 28 03 	call	0x650	; 0x650 <readJoystick>
     6a0:	9a 83       	std	Y+2, r25	; 0x02
     6a2:	89 83       	std	Y+1, r24	; 0x01
    if(value==7){
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	07 97       	sbiw	r24, 0x07	; 7
     6aa:	21 f5       	brne	.+72     	; 0x6f4 <updateGui+0x6c>
        //SYNC(&self->currentPulse , &decFreq ,NULL);
        self->currentPulse->freq--;                                   // Problably not allowed
     6ac:	d8 01       	movw	r26, r16
     6ae:	18 96       	adiw	r26, 0x08	; 8
     6b0:	ed 91       	ld	r30, X+
     6b2:	fc 91       	ld	r31, X
     6b4:	19 97       	sbiw	r26, 0x09	; 9
     6b6:	84 85       	ldd	r24, Z+12	; 0x0c
     6b8:	95 85       	ldd	r25, Z+13	; 0x0d
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	95 87       	std	Z+13, r25	; 0x0d
     6be:	84 87       	std	Z+12, r24	; 0x0c
        printAt(getFreq(self->currentPulse),self->pos);
     6c0:	1c 96       	adiw	r26, 0x0c	; 12
     6c2:	ed 90       	ld	r14, X+
     6c4:	fc 90       	ld	r15, X
     6c6:	1d 97       	sbiw	r26, 0x0d	; 13
     6c8:	18 96       	adiw	r26, 0x08	; 8
     6ca:	8d 91       	ld	r24, X+
     6cc:	9c 91       	ld	r25, X
     6ce:	19 97       	sbiw	r26, 0x09	; 9
     6d0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <getFreq>
     6d4:	bc 01       	movw	r22, r24
     6d6:	99 0f       	add	r25, r25
     6d8:	88 0b       	sbc	r24, r24
     6da:	99 0b       	sbc	r25, r25
     6dc:	a7 01       	movw	r20, r14
     6de:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        printAt(37,2);
     6e2:	42 e0       	ldi	r20, 0x02	; 2
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	65 e2       	ldi	r22, 0x25	; 37
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     6f2:	5f c0       	rjmp	.+190    	; 0x7b2 <updateGui+0x12a>
    }else if(value==2){ //left
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	02 97       	sbiw	r24, 0x02	; 2
     6fa:	81 f4       	brne	.+32     	; 0x71c <updateGui+0x94>
        self->currentPulse = self->pulse1;
     6fc:	f8 01       	movw	r30, r16
     6fe:	84 81       	ldd	r24, Z+4	; 0x04
     700:	95 81       	ldd	r25, Z+5	; 0x05
     702:	91 87       	std	Z+9, r25	; 0x09
     704:	80 87       	std	Z+8, r24	; 0x08
        self->pos = 0;
     706:	15 86       	std	Z+13, r1	; 0x0d
     708:	14 86       	std	Z+12, r1	; 0x0c
        printAt(32,2);
     70a:	42 e0       	ldi	r20, 0x02	; 2
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	60 e2       	ldi	r22, 0x20	; 32
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     71a:	4b c0       	rjmp	.+150    	; 0x7b2 <updateGui+0x12a>
    }else if(value==3){ //right
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	9a 81       	ldd	r25, Y+2	; 0x02
     720:	03 97       	sbiw	r24, 0x03	; 3
     722:	c1 f4       	brne	.+48     	; 0x754 <updateGui+0xcc>
        self->currentPulse = self->pulse2;
     724:	d8 01       	movw	r26, r16
     726:	16 96       	adiw	r26, 0x06	; 6
     728:	8d 91       	ld	r24, X+
     72a:	9c 91       	ld	r25, X
     72c:	17 97       	sbiw	r26, 0x07	; 7
     72e:	19 96       	adiw	r26, 0x09	; 9
     730:	9c 93       	st	X, r25
     732:	8e 93       	st	-X, r24
     734:	18 97       	sbiw	r26, 0x08	; 8
        self->pos = 4;
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	1d 96       	adiw	r26, 0x0d	; 13
     73c:	9c 93       	st	X, r25
     73e:	8e 93       	st	-X, r24
     740:	1c 97       	sbiw	r26, 0x0c	; 12
        printAt(33,2);
     742:	42 e0       	ldi	r20, 0x02	; 2
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	61 e2       	ldi	r22, 0x21	; 33
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     752:	2f c0       	rjmp	.+94     	; 0x7b2 <updateGui+0x12a>
    }else if(value==6){ //upp
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	06 97       	sbiw	r24, 0x06	; 6
     75a:	f9 f4       	brne	.+62     	; 0x79a <updateGui+0x112>
        SYNC(&self->currentPulse ,incFreq ,NULL);    
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	6a ec       	ldi	r22, 0xCA	; 202
     762:	74 e0       	ldi	r23, 0x04	; 4
     764:	c8 01       	movw	r24, r16
     766:	08 96       	adiw	r24, 0x08	; 8
     768:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sync>
        printAt(getFreq(self->currentPulse),self->pos);
     76c:	f8 01       	movw	r30, r16
     76e:	e4 84       	ldd	r14, Z+12	; 0x0c
     770:	f5 84       	ldd	r15, Z+13	; 0x0d
     772:	80 85       	ldd	r24, Z+8	; 0x08
     774:	91 85       	ldd	r25, Z+9	; 0x09
     776:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <getFreq>
     77a:	bc 01       	movw	r22, r24
     77c:	99 0f       	add	r25, r25
     77e:	88 0b       	sbc	r24, r24
     780:	99 0b       	sbc	r25, r25
     782:	a7 01       	movw	r20, r14
     784:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        //self->currentPulse->freq++;                                 // Problably not allowed

        printAt(36,2);
     788:	42 e0       	ldi	r20, 0x02	; 2
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	64 e2       	ldi	r22, 0x24	; 36
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     798:	0c c0       	rjmp	.+24     	; 0x7b2 <updateGui+0x12a>
    }else if(value==4){ //center
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	04 97       	sbiw	r24, 0x04	; 4
     7a0:	41 f0       	breq	.+16     	; 0x7b2 <updateGui+0x12a>
        
    }else{
        printAt(34,2);
     7a2:	42 e0       	ldi	r20, 0x02	; 2
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	62 e2       	ldi	r22, 0x22	; 34
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>

    }
    self->prevValue = value;
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	9a 81       	ldd	r25, Y+2	; 0x02
     7b6:	d8 01       	movw	r26, r16
     7b8:	1f 96       	adiw	r26, 0x0f	; 15
     7ba:	9c 93       	st	X, r25
     7bc:	8e 93       	st	-X, r24
     7be:	1e 97       	sbiw	r26, 0x0e	; 14

}
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	08 95       	ret

000007d2 <main>:




int main(void)
{
     7d2:	cf 92       	push	r12
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
    pulseGenerator__init(&pulse, 4 , writer, 2); 
     7de:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <writer>
     7e2:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <writer+0x1>
     7e6:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <writer+0x2>
     7ea:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <writer+0x3>
     7ee:	02 e0       	ldi	r16, 0x02	; 2
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	64 e0       	ldi	r22, 0x04	; 4
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	86 e1       	ldi	r24, 0x16	; 22
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 ba 04 	call	0x974	; 0x974 <pulseGenerator__init>
    pulseGenerator__init(&pulse2, 6 , writer, 1);
     7fe:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <writer>
     802:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <writer+0x1>
     806:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <writer+0x2>
     80a:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <writer+0x3>
     80e:	01 e0       	ldi	r16, 0x01	; 1
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	66 e0       	ldi	r22, 0x06	; 6
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 ba 04 	call	0x974	; 0x974 <pulseGenerator__init>
    //gui.pulse1 = pulse;
    //gui.pulse2 = pulse2;
    //gui.currentPulse = pulse;
    Gui__init(&gui, &pulse, &pulse2);
     81e:	48 e0       	ldi	r20, 0x08	; 8
     820:	51 e0       	ldi	r21, 0x01	; 1
     822:	66 e1       	ldi	r22, 0x16	; 22
     824:	71 e0       	ldi	r23, 0x01	; 1
     826:	84 e2       	ldi	r24, 0x24	; 36
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Gui__init>
   

    //ASYNC(&pulse, cycle, NULL);

    INSTALL(&gui, updateGui, IRQ_PCINT0);
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	64 e4       	ldi	r22, 0x44	; 68
     832:	73 e0       	ldi	r23, 0x03	; 3
     834:	84 e2       	ldi	r24, 0x24	; 36
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <install>
    INSTALL(&gui, updateGui, IRQ_PCINT1);
     83c:	42 e0       	ldi	r20, 0x02	; 2
     83e:	64 e4       	ldi	r22, 0x44	; 68
     840:	73 e0       	ldi	r23, 0x03	; 3
     842:	84 e2       	ldi	r24, 0x24	; 36
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <install>


    ASYNC(&pulse, cycle, NULL);
     84a:	c1 2c       	mov	r12, r1
     84c:	d1 2c       	mov	r13, r1
     84e:	0f 2e       	mov	r0, r31
     850:	f1 e7       	ldi	r31, 0x71	; 113
     852:	ef 2e       	mov	r14, r31
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	ff 2e       	mov	r15, r31
     858:	f0 2d       	mov	r31, r0
     85a:	06 e1       	ldi	r16, 0x16	; 22
     85c:	11 e0       	ldi	r17, 0x01	; 1
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	a9 01       	movw	r20, r18
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	cb 01       	movw	r24, r22
     86a:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <async>
    ASYNC(&pulse2, cycle, NULL);
     86e:	08 e0       	ldi	r16, 0x08	; 8
     870:	11 e0       	ldi	r17, 0x01	; 1
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	a9 01       	movw	r20, r18
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	cb 01       	movw	r24, r22
     87e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <async>
   
    return TINYTIMBER(NULL,NULL,NULL);
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <tinytimber>
	
    while (1) 
    {

    }
}
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	08 95       	ret

000008a0 <write>:

#include "portWriter.h"
#include <avr/io.h>

void write(portWriter* self, int arg){
    if((PORTE>>arg)&1){
     8a0:	8e b1       	in	r24, 0x0e	; 14
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	06 2e       	mov	r0, r22
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <write+0xc>
     8a8:	95 95       	asr	r25
     8aa:	87 95       	ror	r24
     8ac:	0a 94       	dec	r0
     8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <write+0x8>
     8b0:	80 ff       	sbrs	r24, 0
     8b2:	0c c0       	rjmp	.+24     	; 0x8cc <write+0x2c>
        PORTE &= ~(1<<arg);
     8b4:	2e b1       	in	r18, 0x0e	; 14
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <write+0x20>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	6a 95       	dec	r22
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <write+0x1c>
     8c4:	80 95       	com	r24
     8c6:	82 23       	and	r24, r18
     8c8:	8e b9       	out	0x0e, r24	; 14
     8ca:	08 95       	ret
    }else{
        PORTE |= (1<<arg);
     8cc:	2e b1       	in	r18, 0x0e	; 14
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <write+0x38>
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	6a 95       	dec	r22
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <write+0x34>
     8dc:	82 2b       	or	r24, r18
     8de:	8e b9       	out	0x0e, r24	; 14
     8e0:	08 95       	ret

000008e2 <cycle>:
void incFreq(pulseGenerator* self){
    self->freq++;
}

void decFreq(pulseGenerator* self){
    self->freq--;
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ec 01       	movw	r28, r24
     8f4:	8c 85       	ldd	r24, Y+12	; 0x0c
     8f6:	9d 85       	ldd	r25, Y+13	; 0x0d
     8f8:	89 2b       	or	r24, r25
     8fa:	41 f0       	breq	.+16     	; 0x90c <cycle+0x2a>
     8fc:	48 85       	ldd	r20, Y+8	; 0x08
     8fe:	59 85       	ldd	r21, Y+9	; 0x09
     900:	60 e5       	ldi	r22, 0x50	; 80
     902:	74 e0       	ldi	r23, 0x04	; 4
     904:	ce 01       	movw	r24, r28
     906:	04 96       	adiw	r24, 0x04	; 4
     908:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sync>
     90c:	6c 85       	ldd	r22, Y+12	; 0x0c
     90e:	7d 85       	ldd	r23, Y+13	; 0x0d
     910:	84 ef       	ldi	r24, 0xF4	; 244
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 1a 11 	call	0x2234	; 0x2234 <__divmodhi4>
     918:	2d e7       	ldi	r18, 0x7D	; 125
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	db 01       	movw	r26, r22
     91e:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__usmulhisi3>
     922:	8b 01       	movw	r16, r22
     924:	9c 01       	movw	r18, r24
     926:	99 23       	and	r25, r25
     928:	24 f4       	brge	.+8      	; 0x932 <cycle+0x50>
     92a:	0d 5f       	subi	r16, 0xFD	; 253
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	2f 4f       	sbci	r18, 0xFF	; 255
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	c9 01       	movw	r24, r18
     934:	b8 01       	movw	r22, r16
     936:	95 95       	asr	r25
     938:	87 95       	ror	r24
     93a:	77 95       	ror	r23
     93c:	67 95       	ror	r22
     93e:	95 95       	asr	r25
     940:	87 95       	ror	r24
     942:	77 95       	ror	r23
     944:	67 95       	ror	r22
     946:	c1 2c       	mov	r12, r1
     948:	d1 2c       	mov	r13, r1
     94a:	0f 2e       	mov	r0, r31
     94c:	f1 e7       	ldi	r31, 0x71	; 113
     94e:	ef 2e       	mov	r14, r31
     950:	f4 e0       	ldi	r31, 0x04	; 4
     952:	ff 2e       	mov	r15, r31
     954:	f0 2d       	mov	r31, r0
     956:	8e 01       	movw	r16, r28
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	a9 01       	movw	r20, r18
     95e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <async>
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	08 95       	ret

00000974 <pulseGenerator__init>:
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	fc 01       	movw	r30, r24
     97a:	71 87       	std	Z+9, r23	; 0x09
     97c:	60 87       	std	Z+8, r22	; 0x08
     97e:	13 86       	std	Z+11, r1	; 0x0b
     980:	12 86       	std	Z+10, r1	; 0x0a
     982:	24 83       	std	Z+4, r18	; 0x04
     984:	35 83       	std	Z+5, r19	; 0x05
     986:	46 83       	std	Z+6, r20	; 0x06
     988:	57 83       	std	Z+7, r21	; 0x07
     98a:	15 87       	std	Z+13, r17	; 0x0d
     98c:	04 87       	std	Z+12, r16	; 0x0c
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <incFreq>:
     994:	fc 01       	movw	r30, r24
     996:	24 85       	ldd	r18, Z+12	; 0x0c
     998:	35 85       	ldd	r19, Z+13	; 0x0d
     99a:	2f 5f       	subi	r18, 0xFF	; 255
     99c:	3f 4f       	sbci	r19, 0xFF	; 255
     99e:	35 87       	std	Z+13, r19	; 0x0d
     9a0:	24 87       	std	Z+12, r18	; 0x0c
     9a2:	08 95       	ret

000009a4 <getFreq>:
}
int getFreq(pulseGenerator* self){
    return self->freq;
}
     9a4:	fc 01       	movw	r30, r24
     9a6:	84 85       	ldd	r24, Z+12	; 0x0c
     9a8:	95 85       	ldd	r25, Z+13	; 0x0d
     9aa:	08 95       	ret

000009ac <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <initialize+0x6>
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <initialize+0x8>
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	8b e2       	ldi	r24, 0x2B	; 43
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	2b e0       	ldi	r18, 0x0B	; 11
     9be:	33 e0       	ldi	r19, 0x03	; 3
     9c0:	fc 01       	movw	r30, r24
     9c2:	70 97       	sbiw	r30, 0x10	; 16
     9c4:	91 83       	std	Z+1, r25	; 0x01
     9c6:	80 83       	st	Z, r24
     9c8:	40 96       	adiw	r24, 0x10	; 16
     9ca:	82 17       	cp	r24, r18
     9cc:	93 07       	cpc	r25, r19
     9ce:	c1 f7       	brne	.-16     	; 0x9c0 <initialize+0x14>
     9d0:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <messages+0xe1>
     9d4:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <messages+0xe0>
     9d8:	e6 e6       	ldi	r30, 0x66	; 102
     9da:	f1 e0       	ldi	r31, 0x01	; 1
     9dc:	83 e8       	ldi	r24, 0x83	; 131
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	91 83       	std	Z+1, r25	; 0x01
     9e2:	80 83       	st	Z, r24
     9e4:	80 ea       	ldi	r24, 0xA0	; 160
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	96 8f       	std	Z+30, r25	; 0x1e
     9ea:	85 8f       	std	Z+29, r24	; 0x1d
     9ec:	ad eb       	ldi	r26, 0xBD	; 189
     9ee:	b1 e0       	ldi	r27, 0x01	; 1
     9f0:	b3 af       	std	Z+59, r27	; 0x3b
     9f2:	a2 af       	std	Z+58, r26	; 0x3a
     9f4:	1d 92       	st	X+, r1
     9f6:	1c 92       	st	X, r1
     9f8:	fa 83       	std	Y+2, r31	; 0x02
     9fa:	e9 83       	std	Y+1, r30	; 0x01
     9fc:	e7 e6       	ldi	r30, 0x67	; 103
     9fe:	f3 e0       	ldi	r31, 0x03	; 3
     a00:	fc 83       	std	Y+4, r31	; 0x04
     a02:	eb 83       	std	Y+3, r30	; 0x03
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	06 96       	adiw	r24, 0x06	; 6
     a0a:	0e 94 9f 11 	call	0x233e	; 0x233e <setjmp>
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	9c 81       	ldd	r25, Y+4	; 0x04
     a12:	e9 81       	ldd	r30, Y+1	; 0x01
     a14:	fa 81       	ldd	r31, Y+2	; 0x02
     a16:	97 8b       	std	Z+23, r25	; 0x17
     a18:	86 8b       	std	Z+22, r24	; 0x16
     a1a:	91 8f       	std	Z+25, r25	; 0x19
     a1c:	80 8f       	std	Z+24, r24	; 0x18
     a1e:	86 e7       	ldi	r24, 0x76	; 118
     a20:	90 e1       	ldi	r25, 0x10	; 16
     a22:	94 8f       	std	Z+28, r25	; 0x1c
     a24:	83 8f       	std	Z+27, r24	; 0x1b
     a26:	15 82       	std	Z+5, r1	; 0x05
     a28:	14 82       	std	Z+4, r1	; 0x04
     a2a:	7d 96       	adiw	r30, 0x1d	; 29
     a2c:	fa 83       	std	Y+2, r31	; 0x02
     a2e:	e9 83       	std	Y+1, r30	; 0x01
     a30:	eb 81       	ldd	r30, Y+3	; 0x03
     a32:	fc 81       	ldd	r31, Y+4	; 0x04
     a34:	e0 5a       	subi	r30, 0xA0	; 160
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	fc 83       	std	Y+4, r31	; 0x04
     a3a:	eb 83       	std	Y+3, r30	; 0x03
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	9a 81       	ldd	r25, Y+2	; 0x02
     a40:	8a 5d       	subi	r24, 0xDA	; 218
     a42:	91 40       	sbci	r25, 0x01	; 1
     a44:	f9 f6       	brne	.-66     	; 0xa04 <initialize+0x58>
     a46:	ee ef       	ldi	r30, 0xFE	; 254
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	11 82       	std	Z+1, r1	; 0x01
     a4c:	10 82       	st	Z, r1
     a4e:	15 82       	std	Z+5, r1	; 0x05
     a50:	14 82       	std	Z+4, r1	; 0x04
     a52:	13 82       	std	Z+3, r1	; 0x03
     a54:	12 82       	std	Z+2, r1	; 0x02
     a56:	e1 e6       	ldi	r30, 0x61	; 97
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 e8       	ldi	r24, 0x80	; 128
     a5c:	80 83       	st	Z, r24
     a5e:	10 82       	st	Z, r1
     a60:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a64:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a68:	84 e0       	ldi	r24, 0x04	; 4
     a6a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <dispatch>:
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	00 d0       	rcall	.+0      	; 0xa88 <dispatch+0x6>
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	9a 83       	std	Y+2, r25	; 0x02
     a8e:	89 83       	std	Y+1, r24	; 0x01
     a90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a94:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a98:	06 96       	adiw	r24, 0x06	; 6
     a9a:	0e 94 9f 11 	call	0x233e	; 0x233e <setjmp>
     a9e:	89 2b       	or	r24, r25
     aa0:	59 f4       	brne	.+22     	; 0xab8 <dispatch+0x36>
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     aaa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	06 96       	adiw	r24, 0x06	; 6
     ab4:	0e 94 bf 11 	call	0x237e	; 0x237e <longjmp>
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <schedule>:
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
     ace:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
     ad2:	30 97       	sbiw	r30, 0x00	; 0
     ad4:	61 f1       	breq	.+88     	; 0xb2e <schedule+0x6c>
     ad6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     ada:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	31 f1       	breq	.+76     	; 0xb2e <schedule+0x6c>
     ae2:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     ae6:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     aea:	aa 81       	ldd	r26, Y+2	; 0x02
     aec:	bb 81       	ldd	r27, Y+3	; 0x03
     aee:	10 97       	sbiw	r26, 0x00	; 0
     af0:	79 f0       	breq	.+30     	; 0xb10 <schedule+0x4e>
     af2:	46 81       	ldd	r20, Z+6	; 0x06
     af4:	57 81       	ldd	r21, Z+7	; 0x07
     af6:	60 85       	ldd	r22, Z+8	; 0x08
     af8:	71 85       	ldd	r23, Z+9	; 0x09
     afa:	16 96       	adiw	r26, 0x06	; 6
     afc:	0d 91       	ld	r16, X+
     afe:	1d 91       	ld	r17, X+
     b00:	2d 91       	ld	r18, X+
     b02:	3c 91       	ld	r19, X
     b04:	19 97       	sbiw	r26, 0x09	; 9
     b06:	40 1b       	sub	r20, r16
     b08:	51 0b       	sbc	r21, r17
     b0a:	62 0b       	sbc	r22, r18
     b0c:	73 0b       	sbc	r23, r19
     b0e:	7a f4       	brpl	.+30     	; 0xb2e <schedule+0x6c>
     b10:	fc 01       	movw	r30, r24
     b12:	20 81       	ld	r18, Z
     b14:	31 81       	ldd	r19, Z+1	; 0x01
     b16:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     b1a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     b1e:	d1 83       	std	Z+1, r29	; 0x01
     b20:	c0 83       	st	Z, r28
     b22:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     b26:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     b2a:	0e 94 41 05 	call	0xa82	; 0xa82 <dispatch>
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <__vector_1>:
     b38:	1f 92       	push	r1
     b3a:	0f 92       	push	r0
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	0f 92       	push	r0
     b40:	11 24       	eor	r1, r1
     b42:	2f 93       	push	r18
     b44:	3f 93       	push	r19
     b46:	4f 93       	push	r20
     b48:	5f 93       	push	r21
     b4a:	6f 93       	push	r22
     b4c:	7f 93       	push	r23
     b4e:	8f 93       	push	r24
     b50:	9f 93       	push	r25
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	ef 93       	push	r30
     b58:	ff 93       	push	r31
     b5a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     b5e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     b62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b6a:	c9 01       	movw	r24, r18
     b6c:	03 2e       	mov	r0, r19
     b6e:	00 0c       	add	r0, r0
     b70:	aa 0b       	sbc	r26, r26
     b72:	bb 0b       	sbc	r27, r27
     b74:	dc 01       	movw	r26, r24
     b76:	99 27       	eor	r25, r25
     b78:	88 27       	eor	r24, r24
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	84 2b       	or	r24, r20
     b80:	95 2b       	or	r25, r21
     b82:	a6 2b       	or	r26, r22
     b84:	b7 2b       	or	r27, r23
     b86:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     b8a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     b8e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     b92:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     b96:	b0 9b       	sbis	0x16, 0	; 22
     b98:	1b c0       	rjmp	.+54     	; 0xbd0 <__vector_1+0x98>
     b9a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b9e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ba2:	c9 01       	movw	r24, r18
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	09 2e       	mov	r0, r25
     ba8:	00 0c       	add	r0, r0
     baa:	aa 0b       	sbc	r26, r26
     bac:	bb 0b       	sbc	r27, r27
     bae:	dc 01       	movw	r26, r24
     bb0:	99 27       	eor	r25, r25
     bb2:	88 27       	eor	r24, r24
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	84 2b       	or	r24, r20
     bba:	95 2b       	or	r25, r21
     bbc:	a6 2b       	or	r26, r22
     bbe:	b7 2b       	or	r27, r23
     bc0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     bc4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     bc8:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     bcc:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     bd0:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable>
     bd4:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1>
     bd8:	30 97       	sbiw	r30, 0x00	; 0
     bda:	39 f0       	breq	.+14     	; 0xbea <__vector_1+0xb2>
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable>
     be4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1>
     be8:	09 95       	icall
     bea:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
     bee:	ff 91       	pop	r31
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	0f 90       	pop	r0
     c0c:	1f 90       	pop	r1
     c0e:	18 95       	reti

00000c10 <__vector_2>:
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	2f 93       	push	r18
     c1c:	3f 93       	push	r19
     c1e:	4f 93       	push	r20
     c20:	5f 93       	push	r21
     c22:	6f 93       	push	r22
     c24:	7f 93       	push	r23
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	ef 93       	push	r30
     c30:	ff 93       	push	r31
     c32:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     c36:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     c3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c42:	c9 01       	movw	r24, r18
     c44:	03 2e       	mov	r0, r19
     c46:	00 0c       	add	r0, r0
     c48:	aa 0b       	sbc	r26, r26
     c4a:	bb 0b       	sbc	r27, r27
     c4c:	dc 01       	movw	r26, r24
     c4e:	99 27       	eor	r25, r25
     c50:	88 27       	eor	r24, r24
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	84 2b       	or	r24, r20
     c58:	95 2b       	or	r25, r21
     c5a:	a6 2b       	or	r26, r22
     c5c:	b7 2b       	or	r27, r23
     c5e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     c62:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     c66:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     c6a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     c6e:	b0 9b       	sbis	0x16, 0	; 22
     c70:	1b c0       	rjmp	.+54     	; 0xca8 <__vector_2+0x98>
     c72:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c76:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c7a:	c9 01       	movw	r24, r18
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	09 2e       	mov	r0, r25
     c80:	00 0c       	add	r0, r0
     c82:	aa 0b       	sbc	r26, r26
     c84:	bb 0b       	sbc	r27, r27
     c86:	dc 01       	movw	r26, r24
     c88:	99 27       	eor	r25, r25
     c8a:	88 27       	eor	r24, r24
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	84 2b       	or	r24, r20
     c92:	95 2b       	or	r25, r21
     c94:	a6 2b       	or	r26, r22
     c96:	b7 2b       	or	r27, r23
     c98:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     c9c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     ca0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     ca4:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     ca8:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x2>
     cac:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x3>
     cb0:	30 97       	sbiw	r30, 0x00	; 0
     cb2:	39 f0       	breq	.+14     	; 0xcc2 <__vector_2+0xb2>
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x2>
     cbc:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x3>
     cc0:	09 95       	icall
     cc2:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
     cc6:	ff 91       	pop	r31
     cc8:	ef 91       	pop	r30
     cca:	bf 91       	pop	r27
     ccc:	af 91       	pop	r26
     cce:	9f 91       	pop	r25
     cd0:	8f 91       	pop	r24
     cd2:	7f 91       	pop	r23
     cd4:	6f 91       	pop	r22
     cd6:	5f 91       	pop	r21
     cd8:	4f 91       	pop	r20
     cda:	3f 91       	pop	r19
     cdc:	2f 91       	pop	r18
     cde:	0f 90       	pop	r0
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	0f 90       	pop	r0
     ce4:	1f 90       	pop	r1
     ce6:	18 95       	reti

00000ce8 <__vector_3>:
     ce8:	1f 92       	push	r1
     cea:	0f 92       	push	r0
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	0f 92       	push	r0
     cf0:	11 24       	eor	r1, r1
     cf2:	2f 93       	push	r18
     cf4:	3f 93       	push	r19
     cf6:	4f 93       	push	r20
     cf8:	5f 93       	push	r21
     cfa:	6f 93       	push	r22
     cfc:	7f 93       	push	r23
     cfe:	8f 93       	push	r24
     d00:	9f 93       	push	r25
     d02:	af 93       	push	r26
     d04:	bf 93       	push	r27
     d06:	ef 93       	push	r30
     d08:	ff 93       	push	r31
     d0a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     d0e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     d12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d1a:	c9 01       	movw	r24, r18
     d1c:	03 2e       	mov	r0, r19
     d1e:	00 0c       	add	r0, r0
     d20:	aa 0b       	sbc	r26, r26
     d22:	bb 0b       	sbc	r27, r27
     d24:	dc 01       	movw	r26, r24
     d26:	99 27       	eor	r25, r25
     d28:	88 27       	eor	r24, r24
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	84 2b       	or	r24, r20
     d30:	95 2b       	or	r25, r21
     d32:	a6 2b       	or	r26, r22
     d34:	b7 2b       	or	r27, r23
     d36:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     d3a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     d3e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     d42:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     d46:	b0 9b       	sbis	0x16, 0	; 22
     d48:	1b c0       	rjmp	.+54     	; 0xd80 <__vector_3+0x98>
     d4a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d4e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d52:	c9 01       	movw	r24, r18
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	09 2e       	mov	r0, r25
     d58:	00 0c       	add	r0, r0
     d5a:	aa 0b       	sbc	r26, r26
     d5c:	bb 0b       	sbc	r27, r27
     d5e:	dc 01       	movw	r26, r24
     d60:	99 27       	eor	r25, r25
     d62:	88 27       	eor	r24, r24
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	84 2b       	or	r24, r20
     d6a:	95 2b       	or	r25, r21
     d6c:	a6 2b       	or	r26, r22
     d6e:	b7 2b       	or	r27, r23
     d70:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     d74:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     d78:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     d7c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     d80:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x4>
     d84:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x5>
     d88:	30 97       	sbiw	r30, 0x00	; 0
     d8a:	39 f0       	breq	.+14     	; 0xd9a <__vector_3+0xb2>
     d8c:	62 e0       	ldi	r22, 0x02	; 2
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x4>
     d94:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x5>
     d98:	09 95       	icall
     d9a:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
     d9e:	ff 91       	pop	r31
     da0:	ef 91       	pop	r30
     da2:	bf 91       	pop	r27
     da4:	af 91       	pop	r26
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	7f 91       	pop	r23
     dac:	6f 91       	pop	r22
     dae:	5f 91       	pop	r21
     db0:	4f 91       	pop	r20
     db2:	3f 91       	pop	r19
     db4:	2f 91       	pop	r18
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <__vector_4>:
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     de6:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     dea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     df2:	c9 01       	movw	r24, r18
     df4:	03 2e       	mov	r0, r19
     df6:	00 0c       	add	r0, r0
     df8:	aa 0b       	sbc	r26, r26
     dfa:	bb 0b       	sbc	r27, r27
     dfc:	dc 01       	movw	r26, r24
     dfe:	99 27       	eor	r25, r25
     e00:	88 27       	eor	r24, r24
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	84 2b       	or	r24, r20
     e08:	95 2b       	or	r25, r21
     e0a:	a6 2b       	or	r26, r22
     e0c:	b7 2b       	or	r27, r23
     e0e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     e12:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     e16:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     e1a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     e1e:	b0 9b       	sbis	0x16, 0	; 22
     e20:	1b c0       	rjmp	.+54     	; 0xe58 <__vector_4+0x98>
     e22:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e26:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e2a:	c9 01       	movw	r24, r18
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	09 2e       	mov	r0, r25
     e30:	00 0c       	add	r0, r0
     e32:	aa 0b       	sbc	r26, r26
     e34:	bb 0b       	sbc	r27, r27
     e36:	dc 01       	movw	r26, r24
     e38:	99 27       	eor	r25, r25
     e3a:	88 27       	eor	r24, r24
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	84 2b       	or	r24, r20
     e42:	95 2b       	or	r25, r21
     e44:	a6 2b       	or	r26, r22
     e46:	b7 2b       	or	r27, r23
     e48:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     e4c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     e50:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     e54:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     e58:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x6>
     e5c:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x7>
     e60:	30 97       	sbiw	r30, 0x00	; 0
     e62:	39 f0       	breq	.+14     	; 0xe72 <__vector_4+0xb2>
     e64:	63 e0       	ldi	r22, 0x03	; 3
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x6>
     e6c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x7>
     e70:	09 95       	icall
     e72:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
     e76:	ff 91       	pop	r31
     e78:	ef 91       	pop	r30
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <__vector_5>:
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	2f 93       	push	r18
     ea4:	3f 93       	push	r19
     ea6:	4f 93       	push	r20
     ea8:	5f 93       	push	r21
     eaa:	6f 93       	push	r22
     eac:	7f 93       	push	r23
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
     eba:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     ebe:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     ec2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ec6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eca:	c9 01       	movw	r24, r18
     ecc:	03 2e       	mov	r0, r19
     ece:	00 0c       	add	r0, r0
     ed0:	aa 0b       	sbc	r26, r26
     ed2:	bb 0b       	sbc	r27, r27
     ed4:	dc 01       	movw	r26, r24
     ed6:	99 27       	eor	r25, r25
     ed8:	88 27       	eor	r24, r24
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	84 2b       	or	r24, r20
     ee0:	95 2b       	or	r25, r21
     ee2:	a6 2b       	or	r26, r22
     ee4:	b7 2b       	or	r27, r23
     ee6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     eea:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     eee:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     ef2:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     ef6:	b0 9b       	sbis	0x16, 0	; 22
     ef8:	1b c0       	rjmp	.+54     	; 0xf30 <__vector_5+0x98>
     efa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     efe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f02:	c9 01       	movw	r24, r18
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	09 2e       	mov	r0, r25
     f08:	00 0c       	add	r0, r0
     f0a:	aa 0b       	sbc	r26, r26
     f0c:	bb 0b       	sbc	r27, r27
     f0e:	dc 01       	movw	r26, r24
     f10:	99 27       	eor	r25, r25
     f12:	88 27       	eor	r24, r24
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	84 2b       	or	r24, r20
     f1a:	95 2b       	or	r25, r21
     f1c:	a6 2b       	or	r26, r22
     f1e:	b7 2b       	or	r27, r23
     f20:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     f24:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     f28:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     f2c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     f30:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x8>
     f34:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x9>
     f38:	30 97       	sbiw	r30, 0x00	; 0
     f3a:	39 f0       	breq	.+14     	; 0xf4a <__vector_5+0xb2>
     f3c:	64 e0       	ldi	r22, 0x04	; 4
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x8>
     f44:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x9>
     f48:	09 95       	icall
     f4a:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__vector_10>:
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
     f92:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     f96:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     f9a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f9e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fa2:	c9 01       	movw	r24, r18
     fa4:	03 2e       	mov	r0, r19
     fa6:	00 0c       	add	r0, r0
     fa8:	aa 0b       	sbc	r26, r26
     faa:	bb 0b       	sbc	r27, r27
     fac:	dc 01       	movw	r26, r24
     fae:	99 27       	eor	r25, r25
     fb0:	88 27       	eor	r24, r24
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	84 2b       	or	r24, r20
     fb8:	95 2b       	or	r25, r21
     fba:	a6 2b       	or	r26, r22
     fbc:	b7 2b       	or	r27, r23
     fbe:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     fc2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     fc6:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     fca:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     fce:	b0 9b       	sbis	0x16, 0	; 22
     fd0:	1b c0       	rjmp	.+54     	; 0x1008 <__vector_10+0x98>
     fd2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fd6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fda:	c9 01       	movw	r24, r18
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	09 2e       	mov	r0, r25
     fe0:	00 0c       	add	r0, r0
     fe2:	aa 0b       	sbc	r26, r26
     fe4:	bb 0b       	sbc	r27, r27
     fe6:	dc 01       	movw	r26, r24
     fe8:	99 27       	eor	r25, r25
     fea:	88 27       	eor	r24, r24
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	84 2b       	or	r24, r20
     ff2:	95 2b       	or	r25, r21
     ff4:	a6 2b       	or	r26, r22
     ff6:	b7 2b       	or	r27, r23
     ff8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     ffc:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1000:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1004:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1008:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xa>
    100c:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xb>
    1010:	30 97       	sbiw	r30, 0x00	; 0
    1012:	39 f0       	breq	.+14     	; 0x1022 <__vector_10+0xb2>
    1014:	65 e0       	ldi	r22, 0x05	; 5
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xa>
    101c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xb>
    1020:	09 95       	icall
    1022:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <__vector_11>:
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	0f 92       	push	r0
    1050:	11 24       	eor	r1, r1
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
    106a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    106e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1072:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1076:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    107a:	c9 01       	movw	r24, r18
    107c:	03 2e       	mov	r0, r19
    107e:	00 0c       	add	r0, r0
    1080:	aa 0b       	sbc	r26, r26
    1082:	bb 0b       	sbc	r27, r27
    1084:	dc 01       	movw	r26, r24
    1086:	99 27       	eor	r25, r25
    1088:	88 27       	eor	r24, r24
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	84 2b       	or	r24, r20
    1090:	95 2b       	or	r25, r21
    1092:	a6 2b       	or	r26, r22
    1094:	b7 2b       	or	r27, r23
    1096:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    109a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    109e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    10a2:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    10a6:	b0 9b       	sbis	0x16, 0	; 22
    10a8:	1b c0       	rjmp	.+54     	; 0x10e0 <__vector_11+0x98>
    10aa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10ae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10b2:	c9 01       	movw	r24, r18
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	09 2e       	mov	r0, r25
    10b8:	00 0c       	add	r0, r0
    10ba:	aa 0b       	sbc	r26, r26
    10bc:	bb 0b       	sbc	r27, r27
    10be:	dc 01       	movw	r26, r24
    10c0:	99 27       	eor	r25, r25
    10c2:	88 27       	eor	r24, r24
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	84 2b       	or	r24, r20
    10ca:	95 2b       	or	r25, r21
    10cc:	a6 2b       	or	r26, r22
    10ce:	b7 2b       	or	r27, r23
    10d0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    10d4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    10d8:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    10dc:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    10e0:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xc>
    10e4:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xd>
    10e8:	30 97       	sbiw	r30, 0x00	; 0
    10ea:	39 f0       	breq	.+14     	; 0x10fa <__vector_11+0xb2>
    10ec:	66 e0       	ldi	r22, 0x06	; 6
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xc>
    10f4:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xd>
    10f8:	09 95       	icall
    10fa:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    10fe:	ff 91       	pop	r31
    1100:	ef 91       	pop	r30
    1102:	bf 91       	pop	r27
    1104:	af 91       	pop	r26
    1106:	9f 91       	pop	r25
    1108:	8f 91       	pop	r24
    110a:	7f 91       	pop	r23
    110c:	6f 91       	pop	r22
    110e:	5f 91       	pop	r21
    1110:	4f 91       	pop	r20
    1112:	3f 91       	pop	r19
    1114:	2f 91       	pop	r18
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_12>:
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	4f 93       	push	r20
    1130:	5f 93       	push	r21
    1132:	6f 93       	push	r22
    1134:	7f 93       	push	r23
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
    1142:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1146:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    114a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    114e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1152:	c9 01       	movw	r24, r18
    1154:	03 2e       	mov	r0, r19
    1156:	00 0c       	add	r0, r0
    1158:	aa 0b       	sbc	r26, r26
    115a:	bb 0b       	sbc	r27, r27
    115c:	dc 01       	movw	r26, r24
    115e:	99 27       	eor	r25, r25
    1160:	88 27       	eor	r24, r24
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	84 2b       	or	r24, r20
    1168:	95 2b       	or	r25, r21
    116a:	a6 2b       	or	r26, r22
    116c:	b7 2b       	or	r27, r23
    116e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1172:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1176:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    117a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    117e:	b0 9b       	sbis	0x16, 0	; 22
    1180:	1b c0       	rjmp	.+54     	; 0x11b8 <__vector_12+0x98>
    1182:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1186:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    118a:	c9 01       	movw	r24, r18
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	09 2e       	mov	r0, r25
    1190:	00 0c       	add	r0, r0
    1192:	aa 0b       	sbc	r26, r26
    1194:	bb 0b       	sbc	r27, r27
    1196:	dc 01       	movw	r26, r24
    1198:	99 27       	eor	r25, r25
    119a:	88 27       	eor	r24, r24
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	84 2b       	or	r24, r20
    11a2:	95 2b       	or	r25, r21
    11a4:	a6 2b       	or	r26, r22
    11a6:	b7 2b       	or	r27, r23
    11a8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    11ac:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    11b0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    11b4:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    11b8:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0xe>
    11bc:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0xf>
    11c0:	30 97       	sbiw	r30, 0x00	; 0
    11c2:	39 f0       	breq	.+14     	; 0x11d2 <__vector_12+0xb2>
    11c4:	67 e0       	ldi	r22, 0x07	; 7
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0xe>
    11cc:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0xf>
    11d0:	09 95       	icall
    11d2:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <__vector_13>:
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    121a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    121e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1222:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1226:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    122a:	c9 01       	movw	r24, r18
    122c:	03 2e       	mov	r0, r19
    122e:	00 0c       	add	r0, r0
    1230:	aa 0b       	sbc	r26, r26
    1232:	bb 0b       	sbc	r27, r27
    1234:	dc 01       	movw	r26, r24
    1236:	99 27       	eor	r25, r25
    1238:	88 27       	eor	r24, r24
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	84 2b       	or	r24, r20
    1240:	95 2b       	or	r25, r21
    1242:	a6 2b       	or	r26, r22
    1244:	b7 2b       	or	r27, r23
    1246:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    124a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    124e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1252:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1256:	b0 9b       	sbis	0x16, 0	; 22
    1258:	1b c0       	rjmp	.+54     	; 0x1290 <__vector_13+0x98>
    125a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    125e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1262:	c9 01       	movw	r24, r18
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	09 2e       	mov	r0, r25
    1268:	00 0c       	add	r0, r0
    126a:	aa 0b       	sbc	r26, r26
    126c:	bb 0b       	sbc	r27, r27
    126e:	dc 01       	movw	r26, r24
    1270:	99 27       	eor	r25, r25
    1272:	88 27       	eor	r24, r24
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	84 2b       	or	r24, r20
    127a:	95 2b       	or	r25, r21
    127c:	a6 2b       	or	r26, r22
    127e:	b7 2b       	or	r27, r23
    1280:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1284:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1288:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    128c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1290:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x10>
    1294:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x11>
    1298:	30 97       	sbiw	r30, 0x00	; 0
    129a:	39 f0       	breq	.+14     	; 0x12aa <__vector_13+0xb2>
    129c:	68 e0       	ldi	r22, 0x08	; 8
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x10>
    12a4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x11>
    12a8:	09 95       	icall
    12aa:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_14>:
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    12f6:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    12fa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12fe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1302:	c9 01       	movw	r24, r18
    1304:	03 2e       	mov	r0, r19
    1306:	00 0c       	add	r0, r0
    1308:	aa 0b       	sbc	r26, r26
    130a:	bb 0b       	sbc	r27, r27
    130c:	dc 01       	movw	r26, r24
    130e:	99 27       	eor	r25, r25
    1310:	88 27       	eor	r24, r24
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	84 2b       	or	r24, r20
    1318:	95 2b       	or	r25, r21
    131a:	a6 2b       	or	r26, r22
    131c:	b7 2b       	or	r27, r23
    131e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1322:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1326:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    132a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    132e:	b0 9b       	sbis	0x16, 0	; 22
    1330:	1b c0       	rjmp	.+54     	; 0x1368 <__vector_14+0x98>
    1332:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1336:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    133a:	c9 01       	movw	r24, r18
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	09 2e       	mov	r0, r25
    1340:	00 0c       	add	r0, r0
    1342:	aa 0b       	sbc	r26, r26
    1344:	bb 0b       	sbc	r27, r27
    1346:	dc 01       	movw	r26, r24
    1348:	99 27       	eor	r25, r25
    134a:	88 27       	eor	r24, r24
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	84 2b       	or	r24, r20
    1352:	95 2b       	or	r25, r21
    1354:	a6 2b       	or	r26, r22
    1356:	b7 2b       	or	r27, r23
    1358:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    135c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1360:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1364:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1368:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x12>
    136c:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x13>
    1370:	30 97       	sbiw	r30, 0x00	; 0
    1372:	39 f0       	breq	.+14     	; 0x1382 <__vector_14+0xb2>
    1374:	69 e0       	ldi	r22, 0x09	; 9
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x12>
    137c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x13>
    1380:	09 95       	icall
    1382:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    1386:	ff 91       	pop	r31
    1388:	ef 91       	pop	r30
    138a:	bf 91       	pop	r27
    138c:	af 91       	pop	r26
    138e:	9f 91       	pop	r25
    1390:	8f 91       	pop	r24
    1392:	7f 91       	pop	r23
    1394:	6f 91       	pop	r22
    1396:	5f 91       	pop	r21
    1398:	4f 91       	pop	r20
    139a:	3f 91       	pop	r19
    139c:	2f 91       	pop	r18
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	0f 90       	pop	r0
    13a4:	1f 90       	pop	r1
    13a6:	18 95       	reti

000013a8 <__vector_15>:
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	4f 93       	push	r20
    13b8:	5f 93       	push	r21
    13ba:	6f 93       	push	r22
    13bc:	7f 93       	push	r23
    13be:	8f 93       	push	r24
    13c0:	9f 93       	push	r25
    13c2:	af 93       	push	r26
    13c4:	bf 93       	push	r27
    13c6:	ef 93       	push	r30
    13c8:	ff 93       	push	r31
    13ca:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    13ce:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    13d2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13d6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13da:	c9 01       	movw	r24, r18
    13dc:	03 2e       	mov	r0, r19
    13de:	00 0c       	add	r0, r0
    13e0:	aa 0b       	sbc	r26, r26
    13e2:	bb 0b       	sbc	r27, r27
    13e4:	dc 01       	movw	r26, r24
    13e6:	99 27       	eor	r25, r25
    13e8:	88 27       	eor	r24, r24
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	84 2b       	or	r24, r20
    13f0:	95 2b       	or	r25, r21
    13f2:	a6 2b       	or	r26, r22
    13f4:	b7 2b       	or	r27, r23
    13f6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    13fa:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    13fe:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1402:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1406:	b0 9b       	sbis	0x16, 0	; 22
    1408:	1b c0       	rjmp	.+54     	; 0x1440 <__vector_15+0x98>
    140a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    140e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1412:	c9 01       	movw	r24, r18
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	09 2e       	mov	r0, r25
    1418:	00 0c       	add	r0, r0
    141a:	aa 0b       	sbc	r26, r26
    141c:	bb 0b       	sbc	r27, r27
    141e:	dc 01       	movw	r26, r24
    1420:	99 27       	eor	r25, r25
    1422:	88 27       	eor	r24, r24
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	84 2b       	or	r24, r20
    142a:	95 2b       	or	r25, r21
    142c:	a6 2b       	or	r26, r22
    142e:	b7 2b       	or	r27, r23
    1430:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1434:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1438:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    143c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1440:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x14>
    1444:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x15>
    1448:	30 97       	sbiw	r30, 0x00	; 0
    144a:	39 f0       	breq	.+14     	; 0x145a <__vector_15+0xb2>
    144c:	6a e0       	ldi	r22, 0x0A	; 10
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x14>
    1454:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x15>
    1458:	09 95       	icall
    145a:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    145e:	ff 91       	pop	r31
    1460:	ef 91       	pop	r30
    1462:	bf 91       	pop	r27
    1464:	af 91       	pop	r26
    1466:	9f 91       	pop	r25
    1468:	8f 91       	pop	r24
    146a:	7f 91       	pop	r23
    146c:	6f 91       	pop	r22
    146e:	5f 91       	pop	r21
    1470:	4f 91       	pop	r20
    1472:	3f 91       	pop	r19
    1474:	2f 91       	pop	r18
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	0f 90       	pop	r0
    147c:	1f 90       	pop	r1
    147e:	18 95       	reti

00001480 <__vector_16>:
    1480:	1f 92       	push	r1
    1482:	0f 92       	push	r0
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	0f 92       	push	r0
    1488:	11 24       	eor	r1, r1
    148a:	2f 93       	push	r18
    148c:	3f 93       	push	r19
    148e:	4f 93       	push	r20
    1490:	5f 93       	push	r21
    1492:	6f 93       	push	r22
    1494:	7f 93       	push	r23
    1496:	8f 93       	push	r24
    1498:	9f 93       	push	r25
    149a:	af 93       	push	r26
    149c:	bf 93       	push	r27
    149e:	ef 93       	push	r30
    14a0:	ff 93       	push	r31
    14a2:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    14a6:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    14aa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14ae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14b2:	c9 01       	movw	r24, r18
    14b4:	03 2e       	mov	r0, r19
    14b6:	00 0c       	add	r0, r0
    14b8:	aa 0b       	sbc	r26, r26
    14ba:	bb 0b       	sbc	r27, r27
    14bc:	dc 01       	movw	r26, r24
    14be:	99 27       	eor	r25, r25
    14c0:	88 27       	eor	r24, r24
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	84 2b       	or	r24, r20
    14c8:	95 2b       	or	r25, r21
    14ca:	a6 2b       	or	r26, r22
    14cc:	b7 2b       	or	r27, r23
    14ce:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    14d2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    14d6:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    14da:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    14de:	b0 9b       	sbis	0x16, 0	; 22
    14e0:	1b c0       	rjmp	.+54     	; 0x1518 <__vector_16+0x98>
    14e2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14e6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14ea:	c9 01       	movw	r24, r18
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	09 2e       	mov	r0, r25
    14f0:	00 0c       	add	r0, r0
    14f2:	aa 0b       	sbc	r26, r26
    14f4:	bb 0b       	sbc	r27, r27
    14f6:	dc 01       	movw	r26, r24
    14f8:	99 27       	eor	r25, r25
    14fa:	88 27       	eor	r24, r24
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	84 2b       	or	r24, r20
    1502:	95 2b       	or	r25, r21
    1504:	a6 2b       	or	r26, r22
    1506:	b7 2b       	or	r27, r23
    1508:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    150c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1510:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1514:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1518:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x16>
    151c:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x17>
    1520:	30 97       	sbiw	r30, 0x00	; 0
    1522:	39 f0       	breq	.+14     	; 0x1532 <__vector_16+0xb2>
    1524:	6b e0       	ldi	r22, 0x0B	; 11
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x16>
    152c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x17>
    1530:	09 95       	icall
    1532:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_17>:
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	2f 93       	push	r18
    1564:	3f 93       	push	r19
    1566:	4f 93       	push	r20
    1568:	5f 93       	push	r21
    156a:	6f 93       	push	r22
    156c:	7f 93       	push	r23
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	af 93       	push	r26
    1574:	bf 93       	push	r27
    1576:	ef 93       	push	r30
    1578:	ff 93       	push	r31
    157a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    157e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1582:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1586:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    158a:	c9 01       	movw	r24, r18
    158c:	03 2e       	mov	r0, r19
    158e:	00 0c       	add	r0, r0
    1590:	aa 0b       	sbc	r26, r26
    1592:	bb 0b       	sbc	r27, r27
    1594:	dc 01       	movw	r26, r24
    1596:	99 27       	eor	r25, r25
    1598:	88 27       	eor	r24, r24
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	84 2b       	or	r24, r20
    15a0:	95 2b       	or	r25, r21
    15a2:	a6 2b       	or	r26, r22
    15a4:	b7 2b       	or	r27, r23
    15a6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    15aa:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    15ae:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    15b2:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    15b6:	b0 9b       	sbis	0x16, 0	; 22
    15b8:	1b c0       	rjmp	.+54     	; 0x15f0 <__vector_17+0x98>
    15ba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15be:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15c2:	c9 01       	movw	r24, r18
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	09 2e       	mov	r0, r25
    15c8:	00 0c       	add	r0, r0
    15ca:	aa 0b       	sbc	r26, r26
    15cc:	bb 0b       	sbc	r27, r27
    15ce:	dc 01       	movw	r26, r24
    15d0:	99 27       	eor	r25, r25
    15d2:	88 27       	eor	r24, r24
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	84 2b       	or	r24, r20
    15da:	95 2b       	or	r25, r21
    15dc:	a6 2b       	or	r26, r22
    15de:	b7 2b       	or	r27, r23
    15e0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    15e4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    15e8:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    15ec:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    15f0:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x18>
    15f4:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x19>
    15f8:	30 97       	sbiw	r30, 0x00	; 0
    15fa:	39 f0       	breq	.+14     	; 0x160a <__vector_17+0xb2>
    15fc:	6c e0       	ldi	r22, 0x0C	; 12
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x18>
    1604:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x19>
    1608:	09 95       	icall
    160a:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    160e:	ff 91       	pop	r31
    1610:	ef 91       	pop	r30
    1612:	bf 91       	pop	r27
    1614:	af 91       	pop	r26
    1616:	9f 91       	pop	r25
    1618:	8f 91       	pop	r24
    161a:	7f 91       	pop	r23
    161c:	6f 91       	pop	r22
    161e:	5f 91       	pop	r21
    1620:	4f 91       	pop	r20
    1622:	3f 91       	pop	r19
    1624:	2f 91       	pop	r18
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	0f 90       	pop	r0
    162c:	1f 90       	pop	r1
    162e:	18 95       	reti

00001630 <__vector_18>:
    1630:	1f 92       	push	r1
    1632:	0f 92       	push	r0
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	0f 92       	push	r0
    1638:	11 24       	eor	r1, r1
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	ef 93       	push	r30
    1650:	ff 93       	push	r31
    1652:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1656:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    165a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    165e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1662:	c9 01       	movw	r24, r18
    1664:	03 2e       	mov	r0, r19
    1666:	00 0c       	add	r0, r0
    1668:	aa 0b       	sbc	r26, r26
    166a:	bb 0b       	sbc	r27, r27
    166c:	dc 01       	movw	r26, r24
    166e:	99 27       	eor	r25, r25
    1670:	88 27       	eor	r24, r24
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	84 2b       	or	r24, r20
    1678:	95 2b       	or	r25, r21
    167a:	a6 2b       	or	r26, r22
    167c:	b7 2b       	or	r27, r23
    167e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1682:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1686:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    168a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    168e:	b0 9b       	sbis	0x16, 0	; 22
    1690:	1b c0       	rjmp	.+54     	; 0x16c8 <__vector_18+0x98>
    1692:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1696:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    169a:	c9 01       	movw	r24, r18
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	09 2e       	mov	r0, r25
    16a0:	00 0c       	add	r0, r0
    16a2:	aa 0b       	sbc	r26, r26
    16a4:	bb 0b       	sbc	r27, r27
    16a6:	dc 01       	movw	r26, r24
    16a8:	99 27       	eor	r25, r25
    16aa:	88 27       	eor	r24, r24
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	84 2b       	or	r24, r20
    16b2:	95 2b       	or	r25, r21
    16b4:	a6 2b       	or	r26, r22
    16b6:	b7 2b       	or	r27, r23
    16b8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    16bc:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    16c0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    16c4:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    16c8:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1a>
    16cc:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1b>
    16d0:	30 97       	sbiw	r30, 0x00	; 0
    16d2:	39 f0       	breq	.+14     	; 0x16e2 <__vector_18+0xb2>
    16d4:	6d e0       	ldi	r22, 0x0D	; 13
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1a>
    16dc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1b>
    16e0:	09 95       	icall
    16e2:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	0f 90       	pop	r0
    1704:	1f 90       	pop	r1
    1706:	18 95       	reti

00001708 <__vector_19>:
    1708:	1f 92       	push	r1
    170a:	0f 92       	push	r0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	0f 92       	push	r0
    1710:	11 24       	eor	r1, r1
    1712:	2f 93       	push	r18
    1714:	3f 93       	push	r19
    1716:	4f 93       	push	r20
    1718:	5f 93       	push	r21
    171a:	6f 93       	push	r22
    171c:	7f 93       	push	r23
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	af 93       	push	r26
    1724:	bf 93       	push	r27
    1726:	ef 93       	push	r30
    1728:	ff 93       	push	r31
    172a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    172e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1732:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1736:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    173a:	c9 01       	movw	r24, r18
    173c:	03 2e       	mov	r0, r19
    173e:	00 0c       	add	r0, r0
    1740:	aa 0b       	sbc	r26, r26
    1742:	bb 0b       	sbc	r27, r27
    1744:	dc 01       	movw	r26, r24
    1746:	99 27       	eor	r25, r25
    1748:	88 27       	eor	r24, r24
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	84 2b       	or	r24, r20
    1750:	95 2b       	or	r25, r21
    1752:	a6 2b       	or	r26, r22
    1754:	b7 2b       	or	r27, r23
    1756:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    175a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    175e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1762:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1766:	b0 9b       	sbis	0x16, 0	; 22
    1768:	1b c0       	rjmp	.+54     	; 0x17a0 <__vector_19+0x98>
    176a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    176e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1772:	c9 01       	movw	r24, r18
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	09 2e       	mov	r0, r25
    1778:	00 0c       	add	r0, r0
    177a:	aa 0b       	sbc	r26, r26
    177c:	bb 0b       	sbc	r27, r27
    177e:	dc 01       	movw	r26, r24
    1780:	99 27       	eor	r25, r25
    1782:	88 27       	eor	r24, r24
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	84 2b       	or	r24, r20
    178a:	95 2b       	or	r25, r21
    178c:	a6 2b       	or	r26, r22
    178e:	b7 2b       	or	r27, r23
    1790:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1794:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1798:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    179c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    17a0:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1c>
    17a4:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1d>
    17a8:	30 97       	sbiw	r30, 0x00	; 0
    17aa:	39 f0       	breq	.+14     	; 0x17ba <__vector_19+0xb2>
    17ac:	6e e0       	ldi	r22, 0x0E	; 14
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1c>
    17b4:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1d>
    17b8:	09 95       	icall
    17ba:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	0f 90       	pop	r0
    17dc:	1f 90       	pop	r1
    17de:	18 95       	reti

000017e0 <__vector_20>:
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	2f 93       	push	r18
    17ec:	3f 93       	push	r19
    17ee:	4f 93       	push	r20
    17f0:	5f 93       	push	r21
    17f2:	6f 93       	push	r22
    17f4:	7f 93       	push	r23
    17f6:	8f 93       	push	r24
    17f8:	9f 93       	push	r25
    17fa:	af 93       	push	r26
    17fc:	bf 93       	push	r27
    17fe:	ef 93       	push	r30
    1800:	ff 93       	push	r31
    1802:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1806:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    180a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    180e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1812:	c9 01       	movw	r24, r18
    1814:	03 2e       	mov	r0, r19
    1816:	00 0c       	add	r0, r0
    1818:	aa 0b       	sbc	r26, r26
    181a:	bb 0b       	sbc	r27, r27
    181c:	dc 01       	movw	r26, r24
    181e:	99 27       	eor	r25, r25
    1820:	88 27       	eor	r24, r24
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	84 2b       	or	r24, r20
    1828:	95 2b       	or	r25, r21
    182a:	a6 2b       	or	r26, r22
    182c:	b7 2b       	or	r27, r23
    182e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1832:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1836:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    183a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    183e:	b0 9b       	sbis	0x16, 0	; 22
    1840:	1b c0       	rjmp	.+54     	; 0x1878 <__vector_20+0x98>
    1842:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1846:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    184a:	c9 01       	movw	r24, r18
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	09 2e       	mov	r0, r25
    1850:	00 0c       	add	r0, r0
    1852:	aa 0b       	sbc	r26, r26
    1854:	bb 0b       	sbc	r27, r27
    1856:	dc 01       	movw	r26, r24
    1858:	99 27       	eor	r25, r25
    185a:	88 27       	eor	r24, r24
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	84 2b       	or	r24, r20
    1862:	95 2b       	or	r25, r21
    1864:	a6 2b       	or	r26, r22
    1866:	b7 2b       	or	r27, r23
    1868:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    186c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1870:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1874:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1878:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x1e>
    187c:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1f>
    1880:	30 97       	sbiw	r30, 0x00	; 0
    1882:	39 f0       	breq	.+14     	; 0x1892 <__vector_20+0xb2>
    1884:	6f e0       	ldi	r22, 0x0F	; 15
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x1e>
    188c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1f>
    1890:	09 95       	icall
    1892:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    1896:	ff 91       	pop	r31
    1898:	ef 91       	pop	r30
    189a:	bf 91       	pop	r27
    189c:	af 91       	pop	r26
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	7f 91       	pop	r23
    18a4:	6f 91       	pop	r22
    18a6:	5f 91       	pop	r21
    18a8:	4f 91       	pop	r20
    18aa:	3f 91       	pop	r19
    18ac:	2f 91       	pop	r18
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <__vector_21>:
    18b8:	1f 92       	push	r1
    18ba:	0f 92       	push	r0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	0f 92       	push	r0
    18c0:	11 24       	eor	r1, r1
    18c2:	2f 93       	push	r18
    18c4:	3f 93       	push	r19
    18c6:	4f 93       	push	r20
    18c8:	5f 93       	push	r21
    18ca:	6f 93       	push	r22
    18cc:	7f 93       	push	r23
    18ce:	8f 93       	push	r24
    18d0:	9f 93       	push	r25
    18d2:	af 93       	push	r26
    18d4:	bf 93       	push	r27
    18d6:	ef 93       	push	r30
    18d8:	ff 93       	push	r31
    18da:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    18de:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    18e2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18e6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18ea:	c9 01       	movw	r24, r18
    18ec:	03 2e       	mov	r0, r19
    18ee:	00 0c       	add	r0, r0
    18f0:	aa 0b       	sbc	r26, r26
    18f2:	bb 0b       	sbc	r27, r27
    18f4:	dc 01       	movw	r26, r24
    18f6:	99 27       	eor	r25, r25
    18f8:	88 27       	eor	r24, r24
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	84 2b       	or	r24, r20
    1900:	95 2b       	or	r25, r21
    1902:	a6 2b       	or	r26, r22
    1904:	b7 2b       	or	r27, r23
    1906:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    190a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    190e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1912:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1916:	b0 9b       	sbis	0x16, 0	; 22
    1918:	1b c0       	rjmp	.+54     	; 0x1950 <__vector_21+0x98>
    191a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    191e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1922:	c9 01       	movw	r24, r18
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	09 2e       	mov	r0, r25
    1928:	00 0c       	add	r0, r0
    192a:	aa 0b       	sbc	r26, r26
    192c:	bb 0b       	sbc	r27, r27
    192e:	dc 01       	movw	r26, r24
    1930:	99 27       	eor	r25, r25
    1932:	88 27       	eor	r24, r24
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	84 2b       	or	r24, r20
    193a:	95 2b       	or	r25, r21
    193c:	a6 2b       	or	r26, r22
    193e:	b7 2b       	or	r27, r23
    1940:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1944:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1948:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    194c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1950:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x20>
    1954:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x21>
    1958:	30 97       	sbiw	r30, 0x00	; 0
    195a:	39 f0       	breq	.+14     	; 0x196a <__vector_21+0xb2>
    195c:	60 e1       	ldi	r22, 0x10	; 16
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x20>
    1964:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x21>
    1968:	09 95       	icall
    196a:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    196e:	ff 91       	pop	r31
    1970:	ef 91       	pop	r30
    1972:	bf 91       	pop	r27
    1974:	af 91       	pop	r26
    1976:	9f 91       	pop	r25
    1978:	8f 91       	pop	r24
    197a:	7f 91       	pop	r23
    197c:	6f 91       	pop	r22
    197e:	5f 91       	pop	r21
    1980:	4f 91       	pop	r20
    1982:	3f 91       	pop	r19
    1984:	2f 91       	pop	r18
    1986:	0f 90       	pop	r0
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	0f 90       	pop	r0
    198c:	1f 90       	pop	r1
    198e:	18 95       	reti

00001990 <__vector_22>:
    1990:	1f 92       	push	r1
    1992:	0f 92       	push	r0
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	0f 92       	push	r0
    1998:	11 24       	eor	r1, r1
    199a:	2f 93       	push	r18
    199c:	3f 93       	push	r19
    199e:	4f 93       	push	r20
    19a0:	5f 93       	push	r21
    19a2:	6f 93       	push	r22
    19a4:	7f 93       	push	r23
    19a6:	8f 93       	push	r24
    19a8:	9f 93       	push	r25
    19aa:	af 93       	push	r26
    19ac:	bf 93       	push	r27
    19ae:	ef 93       	push	r30
    19b0:	ff 93       	push	r31
    19b2:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    19b6:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    19ba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19be:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19c2:	c9 01       	movw	r24, r18
    19c4:	03 2e       	mov	r0, r19
    19c6:	00 0c       	add	r0, r0
    19c8:	aa 0b       	sbc	r26, r26
    19ca:	bb 0b       	sbc	r27, r27
    19cc:	dc 01       	movw	r26, r24
    19ce:	99 27       	eor	r25, r25
    19d0:	88 27       	eor	r24, r24
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	84 2b       	or	r24, r20
    19d8:	95 2b       	or	r25, r21
    19da:	a6 2b       	or	r26, r22
    19dc:	b7 2b       	or	r27, r23
    19de:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    19e2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    19e6:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    19ea:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    19ee:	b0 9b       	sbis	0x16, 0	; 22
    19f0:	1b c0       	rjmp	.+54     	; 0x1a28 <__vector_22+0x98>
    19f2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19f6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19fa:	c9 01       	movw	r24, r18
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	09 2e       	mov	r0, r25
    1a00:	00 0c       	add	r0, r0
    1a02:	aa 0b       	sbc	r26, r26
    1a04:	bb 0b       	sbc	r27, r27
    1a06:	dc 01       	movw	r26, r24
    1a08:	99 27       	eor	r25, r25
    1a0a:	88 27       	eor	r24, r24
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	84 2b       	or	r24, r20
    1a12:	95 2b       	or	r25, r21
    1a14:	a6 2b       	or	r26, r22
    1a16:	b7 2b       	or	r27, r23
    1a18:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1a1c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1a20:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1a24:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1a28:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x22>
    1a2c:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x23>
    1a30:	30 97       	sbiw	r30, 0x00	; 0
    1a32:	39 f0       	breq	.+14     	; 0x1a42 <__vector_22+0xb2>
    1a34:	61 e1       	ldi	r22, 0x11	; 17
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x22>
    1a3c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x23>
    1a40:	09 95       	icall
    1a42:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    1a46:	ff 91       	pop	r31
    1a48:	ef 91       	pop	r30
    1a4a:	bf 91       	pop	r27
    1a4c:	af 91       	pop	r26
    1a4e:	9f 91       	pop	r25
    1a50:	8f 91       	pop	r24
    1a52:	7f 91       	pop	r23
    1a54:	6f 91       	pop	r22
    1a56:	5f 91       	pop	r21
    1a58:	4f 91       	pop	r20
    1a5a:	3f 91       	pop	r19
    1a5c:	2f 91       	pop	r18
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	0f 90       	pop	r0
    1a64:	1f 90       	pop	r1
    1a66:	18 95       	reti

00001a68 <enqueueByDeadline>:
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	7b 01       	movw	r14, r22
    1a76:	eb 01       	movw	r28, r22
    1a78:	a8 81       	ld	r26, Y
    1a7a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a7c:	10 97       	sbiw	r26, 0x00	; 0
    1a7e:	61 f1       	breq	.+88     	; 0x1ad8 <enqueueByDeadline+0x70>
    1a80:	fc 01       	movw	r30, r24
    1a82:	06 81       	ldd	r16, Z+6	; 0x06
    1a84:	17 81       	ldd	r17, Z+7	; 0x07
    1a86:	20 85       	ldd	r18, Z+8	; 0x08
    1a88:	31 85       	ldd	r19, Z+9	; 0x09
    1a8a:	16 96       	adiw	r26, 0x06	; 6
    1a8c:	4d 91       	ld	r20, X+
    1a8e:	5d 91       	ld	r21, X+
    1a90:	6d 91       	ld	r22, X+
    1a92:	7c 91       	ld	r23, X
    1a94:	19 97       	sbiw	r26, 0x09	; 9
    1a96:	04 17       	cp	r16, r20
    1a98:	15 07       	cpc	r17, r21
    1a9a:	26 07       	cpc	r18, r22
    1a9c:	37 07       	cpc	r19, r23
    1a9e:	14 f4       	brge	.+4      	; 0x1aa4 <enqueueByDeadline+0x3c>
    1aa0:	1b c0       	rjmp	.+54     	; 0x1ad8 <enqueueByDeadline+0x70>
    1aa2:	df 01       	movw	r26, r30
    1aa4:	ed 91       	ld	r30, X+
    1aa6:	fc 91       	ld	r31, X
    1aa8:	11 97       	sbiw	r26, 0x01	; 1
    1aaa:	30 97       	sbiw	r30, 0x00	; 0
    1aac:	49 f0       	breq	.+18     	; 0x1ac0 <enqueueByDeadline+0x58>
    1aae:	46 81       	ldd	r20, Z+6	; 0x06
    1ab0:	57 81       	ldd	r21, Z+7	; 0x07
    1ab2:	60 85       	ldd	r22, Z+8	; 0x08
    1ab4:	71 85       	ldd	r23, Z+9	; 0x09
    1ab6:	04 17       	cp	r16, r20
    1ab8:	15 07       	cpc	r17, r21
    1aba:	26 07       	cpc	r18, r22
    1abc:	37 07       	cpc	r19, r23
    1abe:	8c f7       	brge	.-30     	; 0x1aa2 <enqueueByDeadline+0x3a>
    1ac0:	ec 01       	movw	r28, r24
    1ac2:	f9 83       	std	Y+1, r31	; 0x01
    1ac4:	e8 83       	st	Y, r30
    1ac6:	10 97       	sbiw	r26, 0x00	; 0
    1ac8:	21 f4       	brne	.+8      	; 0x1ad2 <enqueueByDeadline+0x6a>
    1aca:	f7 01       	movw	r30, r14
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	80 83       	st	Z, r24
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <enqueueByDeadline+0x78>
    1ad2:	8d 93       	st	X+, r24
    1ad4:	9c 93       	st	X, r25
    1ad6:	04 c0       	rjmp	.+8      	; 0x1ae0 <enqueueByDeadline+0x78>
    1ad8:	ec 01       	movw	r28, r24
    1ada:	b9 83       	std	Y+1, r27	; 0x01
    1adc:	a8 83       	st	Y, r26
    1ade:	f5 cf       	rjmp	.-22     	; 0x1aca <enqueueByDeadline+0x62>
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	ff 90       	pop	r15
    1aea:	ef 90       	pop	r14
    1aec:	08 95       	ret

00001aee <enqueueByBaseline>:
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	7b 01       	movw	r14, r22
    1afc:	eb 01       	movw	r28, r22
    1afe:	a8 81       	ld	r26, Y
    1b00:	b9 81       	ldd	r27, Y+1	; 0x01
    1b02:	10 97       	sbiw	r26, 0x00	; 0
    1b04:	61 f1       	breq	.+88     	; 0x1b5e <enqueueByBaseline+0x70>
    1b06:	fc 01       	movw	r30, r24
    1b08:	02 81       	ldd	r16, Z+2	; 0x02
    1b0a:	13 81       	ldd	r17, Z+3	; 0x03
    1b0c:	24 81       	ldd	r18, Z+4	; 0x04
    1b0e:	35 81       	ldd	r19, Z+5	; 0x05
    1b10:	12 96       	adiw	r26, 0x02	; 2
    1b12:	4d 91       	ld	r20, X+
    1b14:	5d 91       	ld	r21, X+
    1b16:	6d 91       	ld	r22, X+
    1b18:	7c 91       	ld	r23, X
    1b1a:	15 97       	sbiw	r26, 0x05	; 5
    1b1c:	04 17       	cp	r16, r20
    1b1e:	15 07       	cpc	r17, r21
    1b20:	26 07       	cpc	r18, r22
    1b22:	37 07       	cpc	r19, r23
    1b24:	14 f4       	brge	.+4      	; 0x1b2a <enqueueByBaseline+0x3c>
    1b26:	1b c0       	rjmp	.+54     	; 0x1b5e <enqueueByBaseline+0x70>
    1b28:	df 01       	movw	r26, r30
    1b2a:	ed 91       	ld	r30, X+
    1b2c:	fc 91       	ld	r31, X
    1b2e:	11 97       	sbiw	r26, 0x01	; 1
    1b30:	30 97       	sbiw	r30, 0x00	; 0
    1b32:	49 f0       	breq	.+18     	; 0x1b46 <enqueueByBaseline+0x58>
    1b34:	42 81       	ldd	r20, Z+2	; 0x02
    1b36:	53 81       	ldd	r21, Z+3	; 0x03
    1b38:	64 81       	ldd	r22, Z+4	; 0x04
    1b3a:	75 81       	ldd	r23, Z+5	; 0x05
    1b3c:	04 17       	cp	r16, r20
    1b3e:	15 07       	cpc	r17, r21
    1b40:	26 07       	cpc	r18, r22
    1b42:	37 07       	cpc	r19, r23
    1b44:	8c f7       	brge	.-30     	; 0x1b28 <enqueueByBaseline+0x3a>
    1b46:	ec 01       	movw	r28, r24
    1b48:	f9 83       	std	Y+1, r31	; 0x01
    1b4a:	e8 83       	st	Y, r30
    1b4c:	10 97       	sbiw	r26, 0x00	; 0
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <enqueueByBaseline+0x6a>
    1b50:	f7 01       	movw	r30, r14
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
    1b56:	07 c0       	rjmp	.+14     	; 0x1b66 <enqueueByBaseline+0x78>
    1b58:	8d 93       	st	X+, r24
    1b5a:	9c 93       	st	X, r25
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <enqueueByBaseline+0x78>
    1b5e:	ec 01       	movw	r28, r24
    1b60:	b9 83       	std	Y+1, r27	; 0x01
    1b62:	a8 83       	st	Y, r26
    1b64:	f5 cf       	rjmp	.-22     	; 0x1b50 <enqueueByBaseline+0x62>
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	ff 90       	pop	r15
    1b70:	ef 90       	pop	r14
    1b72:	08 95       	ret

00001b74 <dequeue>:
    1b74:	dc 01       	movw	r26, r24
    1b76:	ed 91       	ld	r30, X+
    1b78:	fc 91       	ld	r31, X
    1b7a:	11 97       	sbiw	r26, 0x01	; 1
    1b7c:	30 97       	sbiw	r30, 0x00	; 0
    1b7e:	59 f4       	brne	.+22     	; 0x1b96 <dequeue+0x22>
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1b86:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1b8a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	83 bf       	out	0x33, r24	; 51
    1b92:	88 95       	sleep
    1b94:	fd cf       	rjmp	.-6      	; 0x1b90 <dequeue+0x1c>
    1b96:	20 81       	ld	r18, Z
    1b98:	31 81       	ldd	r19, Z+1	; 0x01
    1b9a:	2d 93       	st	X+, r18
    1b9c:	3c 93       	st	X, r19
    1b9e:	cf 01       	movw	r24, r30
    1ba0:	08 95       	ret

00001ba2 <__vector_9>:
    1ba2:	1f 92       	push	r1
    1ba4:	0f 92       	push	r0
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	0f 92       	push	r0
    1baa:	11 24       	eor	r1, r1
    1bac:	2f 93       	push	r18
    1bae:	3f 93       	push	r19
    1bb0:	4f 93       	push	r20
    1bb2:	5f 93       	push	r21
    1bb4:	6f 93       	push	r22
    1bb6:	7f 93       	push	r23
    1bb8:	8f 93       	push	r24
    1bba:	9f 93       	push	r25
    1bbc:	ef 93       	push	r30
    1bbe:	ff 93       	push	r31
    1bc0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1bc4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <overflows+0x1>
    1bce:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <overflows>
    1bd2:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1bd6:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1bda:	30 97       	sbiw	r30, 0x00	; 0
    1bdc:	01 f1       	breq	.+64     	; 0x1c1e <__vector_9+0x7c>
    1bde:	42 81       	ldd	r20, Z+2	; 0x02
    1be0:	53 81       	ldd	r21, Z+3	; 0x03
    1be2:	64 81       	ldd	r22, Z+4	; 0x04
    1be4:	75 81       	ldd	r23, Z+5	; 0x05
    1be6:	86 17       	cp	r24, r22
    1be8:	97 07       	cpc	r25, r23
    1bea:	c9 f4       	brne	.+50     	; 0x1c1e <__vector_9+0x7c>
    1bec:	ca 01       	movw	r24, r20
    1bee:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bf2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bf6:	42 1b       	sub	r20, r18
    1bf8:	53 0b       	sbc	r21, r19
    1bfa:	41 30       	cpi	r20, 0x01	; 1
    1bfc:	51 05       	cpc	r21, r1
    1bfe:	29 f4       	brne	.+10     	; 0x1c0a <__vector_9+0x68>
    1c00:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c04:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c0e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c12:	ef e6       	ldi	r30, 0x6F	; 111
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	82 60       	ori	r24, 0x02	; 2
    1c1a:	80 83       	st	Z, r24
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <__vector_9+0x86>
    1c1e:	ef e6       	ldi	r30, 0x6F	; 111
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8d 7f       	andi	r24, 0xFD	; 253
    1c26:	80 83       	st	Z, r24
    1c28:	ff 91       	pop	r31
    1c2a:	ef 91       	pop	r30
    1c2c:	9f 91       	pop	r25
    1c2e:	8f 91       	pop	r24
    1c30:	7f 91       	pop	r23
    1c32:	6f 91       	pop	r22
    1c34:	5f 91       	pop	r21
    1c36:	4f 91       	pop	r20
    1c38:	3f 91       	pop	r19
    1c3a:	2f 91       	pop	r18
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	0f 90       	pop	r0
    1c42:	1f 90       	pop	r1
    1c44:	18 95       	reti

00001c46 <__vector_7>:
    1c46:	1f 92       	push	r1
    1c48:	0f 92       	push	r0
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	0f 92       	push	r0
    1c4e:	11 24       	eor	r1, r1
    1c50:	cf 92       	push	r12
    1c52:	df 92       	push	r13
    1c54:	ef 92       	push	r14
    1c56:	ff 92       	push	r15
    1c58:	2f 93       	push	r18
    1c5a:	3f 93       	push	r19
    1c5c:	4f 93       	push	r20
    1c5e:	5f 93       	push	r21
    1c60:	6f 93       	push	r22
    1c62:	7f 93       	push	r23
    1c64:	8f 93       	push	r24
    1c66:	9f 93       	push	r25
    1c68:	af 93       	push	r26
    1c6a:	bf 93       	push	r27
    1c6c:	ef 93       	push	r30
    1c6e:	ff 93       	push	r31
    1c70:	c0 90 38 01 	lds	r12, 0x0138	; 0x800138 <overflows>
    1c74:	d0 90 39 01 	lds	r13, 0x0139	; 0x800139 <overflows+0x1>
    1c78:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c7c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c80:	b0 99       	sbic	0x16, 0	; 22
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <__vector_7+0x5c>
    1c84:	0d 2c       	mov	r0, r13
    1c86:	00 0c       	add	r0, r0
    1c88:	ee 08       	sbc	r14, r14
    1c8a:	ff 08       	sbc	r15, r15
    1c8c:	d6 01       	movw	r26, r12
    1c8e:	99 27       	eor	r25, r25
    1c90:	88 27       	eor	r24, r24
    1c92:	69 01       	movw	r12, r18
    1c94:	e1 2c       	mov	r14, r1
    1c96:	f1 2c       	mov	r15, r1
    1c98:	c8 2a       	or	r12, r24
    1c9a:	d9 2a       	or	r13, r25
    1c9c:	ea 2a       	or	r14, r26
    1c9e:	fb 2a       	or	r15, r27
    1ca0:	15 c0       	rjmp	.+42     	; 0x1ccc <__vector_7+0x86>
    1ca2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ca6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	c8 1a       	sub	r12, r24
    1cae:	d8 0a       	sbc	r13, r24
    1cb0:	0d 2c       	mov	r0, r13
    1cb2:	00 0c       	add	r0, r0
    1cb4:	ee 08       	sbc	r14, r14
    1cb6:	ff 08       	sbc	r15, r15
    1cb8:	d6 01       	movw	r26, r12
    1cba:	99 27       	eor	r25, r25
    1cbc:	88 27       	eor	r24, r24
    1cbe:	69 01       	movw	r12, r18
    1cc0:	e1 2c       	mov	r14, r1
    1cc2:	f1 2c       	mov	r15, r1
    1cc4:	c8 2a       	or	r12, r24
    1cc6:	d9 2a       	or	r13, r25
    1cc8:	ea 2a       	or	r14, r26
    1cca:	fb 2a       	or	r15, r27
    1ccc:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1cd0:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1cd4:	30 97       	sbiw	r30, 0x00	; 0
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <__vector_7+0x94>
    1cd8:	42 c0       	rjmp	.+132    	; 0x1d5e <__vector_7+0x118>
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	a4 81       	ldd	r26, Z+4	; 0x04
    1ce0:	b5 81       	ldd	r27, Z+5	; 0x05
    1ce2:	8c 19       	sub	r24, r12
    1ce4:	9d 09       	sbc	r25, r13
    1ce6:	ae 09       	sbc	r26, r14
    1ce8:	bf 09       	sbc	r27, r15
    1cea:	18 16       	cp	r1, r24
    1cec:	19 06       	cpc	r1, r25
    1cee:	1a 06       	cpc	r1, r26
    1cf0:	1b 06       	cpc	r1, r27
    1cf2:	ec f1       	brlt	.+122    	; 0x1d6e <__vector_7+0x128>
    1cf4:	8e e3       	ldi	r24, 0x3E	; 62
    1cf6:	91 e0       	ldi	r25, 0x01	; 1
    1cf8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <dequeue>
    1cfc:	60 e4       	ldi	r22, 0x40	; 64
    1cfe:	71 e0       	ldi	r23, 0x01	; 1
    1d00:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <enqueueByDeadline>
    1d04:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1d08:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1d0c:	30 97       	sbiw	r30, 0x00	; 0
    1d0e:	39 f1       	breq	.+78     	; 0x1d5e <__vector_7+0x118>
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	a4 81       	ldd	r26, Z+4	; 0x04
    1d16:	b5 81       	ldd	r27, Z+5	; 0x05
    1d18:	8c 19       	sub	r24, r12
    1d1a:	9d 09       	sbc	r25, r13
    1d1c:	ae 09       	sbc	r26, r14
    1d1e:	bf 09       	sbc	r27, r15
    1d20:	18 16       	cp	r1, r24
    1d22:	19 06       	cpc	r1, r25
    1d24:	1a 06       	cpc	r1, r26
    1d26:	1b 06       	cpc	r1, r27
    1d28:	2c f7       	brge	.-54     	; 0x1cf4 <__vector_7+0xae>
    1d2a:	21 c0       	rjmp	.+66     	; 0x1d6e <__vector_7+0x128>
    1d2c:	9c 01       	movw	r18, r24
    1d2e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d32:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d36:	84 1b       	sub	r24, r20
    1d38:	95 0b       	sbc	r25, r21
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	31 f4       	brne	.+12     	; 0x1d4a <__vector_7+0x104>
    1d3e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d42:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d46:	2f 5f       	subi	r18, 0xFF	; 255
    1d48:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d4e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d52:	ef e6       	ldi	r30, 0x6F	; 111
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	82 60       	ori	r24, 0x02	; 2
    1d5a:	80 83       	st	Z, r24
    1d5c:	05 c0       	rjmp	.+10     	; 0x1d68 <__vector_7+0x122>
    1d5e:	ef e6       	ldi	r30, 0x6F	; 111
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8d 7f       	andi	r24, 0xFD	; 253
    1d66:	80 83       	st	Z, r24
    1d68:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    1d6c:	0c c0       	rjmp	.+24     	; 0x1d86 <__vector_7+0x140>
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	a4 81       	ldd	r26, Z+4	; 0x04
    1d74:	b5 81       	ldd	r27, Z+5	; 0x05
    1d76:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1d7a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1d7e:	2a 17       	cp	r18, r26
    1d80:	3b 07       	cpc	r19, r27
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <__vector_7+0x118>
    1d84:	d3 cf       	rjmp	.-90     	; 0x1d2c <__vector_7+0xe6>
    1d86:	ff 91       	pop	r31
    1d88:	ef 91       	pop	r30
    1d8a:	bf 91       	pop	r27
    1d8c:	af 91       	pop	r26
    1d8e:	9f 91       	pop	r25
    1d90:	8f 91       	pop	r24
    1d92:	7f 91       	pop	r23
    1d94:	6f 91       	pop	r22
    1d96:	5f 91       	pop	r21
    1d98:	4f 91       	pop	r20
    1d9a:	3f 91       	pop	r19
    1d9c:	2f 91       	pop	r18
    1d9e:	ff 90       	pop	r15
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	cf 90       	pop	r12
    1da6:	0f 90       	pop	r0
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	0f 90       	pop	r0
    1dac:	1f 90       	pop	r1
    1dae:	18 95       	reti

00001db0 <async>:
    1db0:	3f 92       	push	r3
    1db2:	4f 92       	push	r4
    1db4:	5f 92       	push	r5
    1db6:	6f 92       	push	r6
    1db8:	7f 92       	push	r7
    1dba:	8f 92       	push	r8
    1dbc:	9f 92       	push	r9
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	2b 01       	movw	r4, r22
    1dd4:	3c 01       	movw	r6, r24
    1dd6:	49 01       	movw	r8, r18
    1dd8:	5a 01       	movw	r10, r20
    1dda:	8f b7       	in	r24, 0x3f	; 63
    1ddc:	80 78       	andi	r24, 0x80	; 128
    1dde:	38 2e       	mov	r3, r24
    1de0:	f8 94       	cli
    1de2:	86 e0       	ldi	r24, 0x06	; 6
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <dequeue>
    1dea:	ec 01       	movw	r28, r24
    1dec:	1b 87       	std	Y+11, r17	; 0x0b
    1dee:	0a 87       	std	Y+10, r16	; 0x0a
    1df0:	fd 86       	std	Y+13, r15	; 0x0d
    1df2:	ec 86       	std	Y+12, r14	; 0x0c
    1df4:	df 86       	std	Y+15, r13	; 0x0f
    1df6:	ce 86       	std	Y+14, r12	; 0x0e
    1df8:	33 20       	and	r3, r3
    1dfa:	61 f0       	breq	.+24     	; 0x1e14 <async+0x64>
    1dfc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e00:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e04:	02 80       	ldd	r0, Z+2	; 0x02
    1e06:	f3 81       	ldd	r31, Z+3	; 0x03
    1e08:	e0 2d       	mov	r30, r0
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	a4 81       	ldd	r26, Z+4	; 0x04
    1e10:	b5 81       	ldd	r27, Z+5	; 0x05
    1e12:	08 c0       	rjmp	.+16     	; 0x1e24 <async+0x74>
    1e14:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timestamp>
    1e18:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timestamp+0x1>
    1e1c:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timestamp+0x2>
    1e20:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timestamp+0x3>
    1e24:	48 0e       	add	r4, r24
    1e26:	59 1e       	adc	r5, r25
    1e28:	6a 1e       	adc	r6, r26
    1e2a:	7b 1e       	adc	r7, r27
    1e2c:	4a 82       	std	Y+2, r4	; 0x02
    1e2e:	5b 82       	std	Y+3, r5	; 0x03
    1e30:	6c 82       	std	Y+4, r6	; 0x04
    1e32:	7d 82       	std	Y+5, r7	; 0x05
    1e34:	18 14       	cp	r1, r8
    1e36:	19 04       	cpc	r1, r9
    1e38:	1a 04       	cpc	r1, r10
    1e3a:	1b 04       	cpc	r1, r11
    1e3c:	44 f0       	brlt	.+16     	; 0x1e4e <async+0x9e>
    1e3e:	0f 2e       	mov	r0, r31
    1e40:	88 24       	eor	r8, r8
    1e42:	8a 94       	dec	r8
    1e44:	98 2c       	mov	r9, r8
    1e46:	a8 2c       	mov	r10, r8
    1e48:	ff e7       	ldi	r31, 0x7F	; 127
    1e4a:	bf 2e       	mov	r11, r31
    1e4c:	f0 2d       	mov	r31, r0
    1e4e:	84 0c       	add	r8, r4
    1e50:	95 1c       	adc	r9, r5
    1e52:	a6 1c       	adc	r10, r6
    1e54:	b7 1c       	adc	r11, r7
    1e56:	8e 82       	std	Y+6, r8	; 0x06
    1e58:	9f 82       	std	Y+7, r9	; 0x07
    1e5a:	a8 86       	std	Y+8, r10	; 0x08
    1e5c:	b9 86       	std	Y+9, r11	; 0x09
    1e5e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1e62:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1e66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e6e:	b0 99       	sbic	0x16, 0	; 22
    1e70:	0e c0       	rjmp	.+28     	; 0x1e8e <async+0xde>
    1e72:	09 2e       	mov	r0, r25
    1e74:	00 0c       	add	r0, r0
    1e76:	aa 0b       	sbc	r26, r26
    1e78:	bb 0b       	sbc	r27, r27
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	99 27       	eor	r25, r25
    1e7e:	88 27       	eor	r24, r24
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	84 2b       	or	r24, r20
    1e86:	95 2b       	or	r25, r21
    1e88:	a6 2b       	or	r26, r22
    1e8a:	b7 2b       	or	r27, r23
    1e8c:	13 c0       	rjmp	.+38     	; 0x1eb4 <async+0x104>
    1e8e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e92:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e96:	01 96       	adiw	r24, 0x01	; 1
    1e98:	09 2e       	mov	r0, r25
    1e9a:	00 0c       	add	r0, r0
    1e9c:	aa 0b       	sbc	r26, r26
    1e9e:	bb 0b       	sbc	r27, r27
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	99 27       	eor	r25, r25
    1ea4:	88 27       	eor	r24, r24
    1ea6:	a9 01       	movw	r20, r18
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	84 2b       	or	r24, r20
    1eae:	95 2b       	or	r25, r21
    1eb0:	a6 2b       	or	r26, r22
    1eb2:	b7 2b       	or	r27, r23
    1eb4:	48 1a       	sub	r4, r24
    1eb6:	59 0a       	sbc	r5, r25
    1eb8:	6a 0a       	sbc	r6, r26
    1eba:	7b 0a       	sbc	r7, r27
    1ebc:	14 14       	cp	r1, r4
    1ebe:	15 04       	cpc	r1, r5
    1ec0:	16 04       	cpc	r1, r6
    1ec2:	17 04       	cpc	r1, r7
    1ec4:	ac f5       	brge	.+106    	; 0x1f30 <async+0x180>
    1ec6:	6e e3       	ldi	r22, 0x3E	; 62
    1ec8:	71 e0       	ldi	r23, 0x01	; 1
    1eca:	ce 01       	movw	r24, r28
    1ecc:	0e 94 77 0d 	call	0x1aee	; 0x1aee <enqueueByBaseline>
    1ed0:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1ed4:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1ed8:	30 97       	sbiw	r30, 0x00	; 0
    1eda:	21 f1       	breq	.+72     	; 0x1f24 <async+0x174>
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ee2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ee4:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1ee8:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1eec:	2a 17       	cp	r18, r26
    1eee:	3b 07       	cpc	r19, r27
    1ef0:	c9 f4       	brne	.+50     	; 0x1f24 <async+0x174>
    1ef2:	9c 01       	movw	r18, r24
    1ef4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ef8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1efc:	84 1b       	sub	r24, r20
    1efe:	95 0b       	sbc	r25, r21
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	31 f4       	brne	.+12     	; 0x1f10 <async+0x160>
    1f04:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f08:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f0c:	2f 5f       	subi	r18, 0xFF	; 255
    1f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f10:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1f14:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1f18:	ef e6       	ldi	r30, 0x6F	; 111
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	82 60       	ori	r24, 0x02	; 2
    1f20:	80 83       	st	Z, r24
    1f22:	41 c0       	rjmp	.+130    	; 0x1fa6 <async+0x1f6>
    1f24:	ef e6       	ldi	r30, 0x6F	; 111
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	8d 7f       	andi	r24, 0xFD	; 253
    1f2c:	80 83       	st	Z, r24
    1f2e:	3b c0       	rjmp	.+118    	; 0x1fa6 <async+0x1f6>
    1f30:	60 e4       	ldi	r22, 0x40	; 64
    1f32:	71 e0       	ldi	r23, 0x01	; 1
    1f34:	ce 01       	movw	r24, r28
    1f36:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <enqueueByDeadline>
    1f3a:	33 20       	and	r3, r3
    1f3c:	b9 f1       	breq	.+110    	; 0x1fac <async+0x1fc>
    1f3e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f42:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	81 f1       	breq	.+96     	; 0x1faa <async+0x1fa>
    1f4a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1f4e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1f52:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <msgQ>
    1f56:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <msgQ+0x1>
    1f5a:	02 81       	ldd	r16, Z+2	; 0x02
    1f5c:	13 81       	ldd	r17, Z+3	; 0x03
    1f5e:	d9 01       	movw	r26, r18
    1f60:	16 96       	adiw	r26, 0x06	; 6
    1f62:	4d 91       	ld	r20, X+
    1f64:	5d 91       	ld	r21, X+
    1f66:	6d 91       	ld	r22, X+
    1f68:	7c 91       	ld	r23, X
    1f6a:	19 97       	sbiw	r26, 0x09	; 9
    1f6c:	d8 01       	movw	r26, r16
    1f6e:	16 96       	adiw	r26, 0x06	; 6
    1f70:	0d 91       	ld	r16, X+
    1f72:	1d 91       	ld	r17, X+
    1f74:	2d 91       	ld	r18, X+
    1f76:	3c 91       	ld	r19, X
    1f78:	19 97       	sbiw	r26, 0x09	; 9
    1f7a:	40 1b       	sub	r20, r16
    1f7c:	51 0b       	sbc	r21, r17
    1f7e:	62 0b       	sbc	r22, r18
    1f80:	73 0b       	sbc	r23, r19
    1f82:	9a f4       	brpl	.+38     	; 0x1faa <async+0x1fa>
    1f84:	dc 01       	movw	r26, r24
    1f86:	2d 91       	ld	r18, X+
    1f88:	3c 91       	ld	r19, X
    1f8a:	11 97       	sbiw	r26, 0x01	; 1
    1f8c:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1f90:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1f94:	ed 93       	st	X+, r30
    1f96:	fc 93       	st	X, r31
    1f98:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1f9c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1fa0:	0e 94 41 05 	call	0xa82	; 0xa82 <dispatch>
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <async+0x1fa>
    1fa6:	33 20       	and	r3, r3
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <async+0x1fc>
    1faa:	78 94       	sei
    1fac:	ce 01       	movw	r24, r28
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	bf 90       	pop	r11
    1fc0:	af 90       	pop	r10
    1fc2:	9f 90       	pop	r9
    1fc4:	8f 90       	pop	r8
    1fc6:	7f 90       	pop	r7
    1fc8:	6f 90       	pop	r6
    1fca:	5f 90       	pop	r5
    1fcc:	4f 90       	pop	r4
    1fce:	3f 90       	pop	r3
    1fd0:	08 95       	ret

00001fd2 <sync>:
    1fd2:	cf 92       	push	r12
    1fd4:	df 92       	push	r13
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	ec 01       	movw	r28, r24
    1fe4:	7b 01       	movw	r14, r22
    1fe6:	6a 01       	movw	r12, r20
    1fe8:	1f b7       	in	r17, 0x3f	; 63
    1fea:	10 78       	andi	r17, 0x80	; 128
    1fec:	f8 94       	cli
    1fee:	a8 81       	ld	r26, Y
    1ff0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ff2:	10 97       	sbiw	r26, 0x00	; 0
    1ff4:	61 f1       	breq	.+88     	; 0x204e <sync+0x7c>
    1ff6:	14 96       	adiw	r26, 0x04	; 4
    1ff8:	ed 91       	ld	r30, X+
    1ffa:	fc 91       	ld	r31, X
    1ffc:	15 97       	sbiw	r26, 0x05	; 5
    1ffe:	30 97       	sbiw	r30, 0x00	; 0
    2000:	41 f0       	breq	.+16     	; 0x2012 <sync+0x40>
    2002:	a0 81       	ld	r26, Z
    2004:	b1 81       	ldd	r27, Z+1	; 0x01
    2006:	14 96       	adiw	r26, 0x04	; 4
    2008:	ed 91       	ld	r30, X+
    200a:	fc 91       	ld	r31, X
    200c:	15 97       	sbiw	r26, 0x05	; 5
    200e:	30 97       	sbiw	r30, 0x00	; 0
    2010:	c1 f7       	brne	.-16     	; 0x2002 <sync+0x30>
    2012:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2016:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    201a:	2a 17       	cp	r18, r26
    201c:	3b 07       	cpc	r19, r27
    201e:	21 f0       	breq	.+8      	; 0x2028 <sync+0x56>
    2020:	11 23       	and	r17, r17
    2022:	09 f4       	brne	.+2      	; 0x2026 <sync+0x54>
    2024:	3d c0       	rjmp	.+122    	; 0x20a0 <sync+0xce>
    2026:	07 c0       	rjmp	.+14     	; 0x2036 <sync+0x64>
    2028:	11 23       	and	r17, r17
    202a:	09 f4       	brne	.+2      	; 0x202e <sync+0x5c>
    202c:	3c c0       	rjmp	.+120    	; 0x20a6 <sync+0xd4>
    202e:	78 94       	sei
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	9f ef       	ldi	r25, 0xFF	; 255
    2034:	52 c0       	rjmp	.+164    	; 0x20da <sync+0x108>
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	9b 81       	ldd	r25, Y+3	; 0x03
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	d1 f1       	breq	.+116    	; 0x20b2 <sync+0xe0>
    203e:	fc 01       	movw	r30, r24
    2040:	15 82       	std	Z+5, r1	; 0x05
    2042:	14 82       	std	Z+4, r1	; 0x04
    2044:	36 c0       	rjmp	.+108    	; 0x20b2 <sync+0xe0>
    2046:	78 94       	sei
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	46 c0       	rjmp	.+140    	; 0x20da <sync+0x108>
    204e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2052:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2056:	99 83       	std	Y+1, r25	; 0x01
    2058:	88 83       	st	Y, r24
    205a:	11 23       	and	r17, r17
    205c:	29 f0       	breq	.+10     	; 0x2068 <sync+0x96>
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	9b 81       	ldd	r25, Y+3	; 0x03
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	09 f0       	breq	.+2      	; 0x2068 <sync+0x96>
    2066:	78 94       	sei
    2068:	b6 01       	movw	r22, r12
    206a:	ce 01       	movw	r24, r28
    206c:	f7 01       	movw	r30, r14
    206e:	09 95       	icall
    2070:	f8 2e       	mov	r15, r24
    2072:	09 2f       	mov	r16, r25
    2074:	8f b7       	in	r24, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	19 82       	std	Y+1, r1	; 0x01
    207a:	18 82       	st	Y, r1
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	82 30       	cpi	r24, 0x02	; 2
    2082:	91 05       	cpc	r25, r1
    2084:	38 f0       	brcs	.+14     	; 0x2094 <sync+0xc2>
    2086:	1b 82       	std	Y+3, r1	; 0x03
    2088:	1a 82       	std	Y+2, r1	; 0x02
    208a:	fc 01       	movw	r30, r24
    208c:	15 82       	std	Z+5, r1	; 0x05
    208e:	14 82       	std	Z+4, r1	; 0x04
    2090:	0e 94 41 05 	call	0xa82	; 0xa82 <dispatch>
    2094:	11 23       	and	r17, r17
    2096:	51 f0       	breq	.+20     	; 0x20ac <sync+0xda>
    2098:	78 94       	sei
    209a:	8f 2d       	mov	r24, r15
    209c:	90 2f       	mov	r25, r16
    209e:	1d c0       	rjmp	.+58     	; 0x20da <sync+0x108>
    20a0:	8f ef       	ldi	r24, 0xFF	; 255
    20a2:	9f ef       	ldi	r25, 0xFF	; 255
    20a4:	1a c0       	rjmp	.+52     	; 0x20da <sync+0x108>
    20a6:	8f ef       	ldi	r24, 0xFF	; 255
    20a8:	9f ef       	ldi	r25, 0xFF	; 255
    20aa:	17 c0       	rjmp	.+46     	; 0x20da <sync+0x108>
    20ac:	8f 2d       	mov	r24, r15
    20ae:	90 2f       	mov	r25, r16
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <sync+0x108>
    20b2:	3b 83       	std	Y+3, r19	; 0x03
    20b4:	2a 83       	std	Y+2, r18	; 0x02
    20b6:	f9 01       	movw	r30, r18
    20b8:	d5 83       	std	Z+5, r29	; 0x05
    20ba:	c4 83       	std	Z+4, r28	; 0x04
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 41 05 	call	0xa82	; 0xa82 <dispatch>
    20c2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20c6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	89 2b       	or	r24, r25
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <sync+0x102>
    20d2:	b9 cf       	rjmp	.-142    	; 0x2046 <sync+0x74>
    20d4:	f9 83       	std	Y+1, r31	; 0x01
    20d6:	e8 83       	st	Y, r30
    20d8:	c2 cf       	rjmp	.-124    	; 0x205e <sync+0x8c>
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	ff 90       	pop	r15
    20e4:	ef 90       	pop	r14
    20e6:	df 90       	pop	r13
    20e8:	cf 90       	pop	r12
    20ea:	08 95       	ret

000020ec <run>:
    20ec:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20f0:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20f4:	80 e4       	ldi	r24, 0x40	; 64
    20f6:	91 e0       	ldi	r25, 0x01	; 1
    20f8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <dequeue>
    20fc:	ec 01       	movw	r28, r24
    20fe:	d8 01       	movw	r26, r16
    2100:	13 96       	adiw	r26, 0x03	; 3
    2102:	9c 93       	st	X, r25
    2104:	8e 93       	st	-X, r24
    2106:	12 97       	sbiw	r26, 0x02	; 2
    2108:	78 94       	sei
    210a:	4e 85       	ldd	r20, Y+14	; 0x0e
    210c:	5f 85       	ldd	r21, Y+15	; 0x0f
    210e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2110:	7d 85       	ldd	r23, Y+13	; 0x0d
    2112:	8a 85       	ldd	r24, Y+10	; 0x0a
    2114:	9b 85       	ldd	r25, Y+11	; 0x0b
    2116:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sync>
    211a:	8f b7       	in	r24, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    2122:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    2126:	99 83       	std	Y+1, r25	; 0x01
    2128:	88 83       	st	Y, r24
    212a:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    212e:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    2132:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2136:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    213a:	00 81       	ld	r16, Z
    213c:	11 81       	ldd	r17, Z+1	; 0x01
    213e:	e8 01       	movw	r28, r16
    2140:	2a 81       	ldd	r18, Y+2	; 0x02
    2142:	3b 81       	ldd	r19, Y+3	; 0x03
    2144:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <msgQ>
    2148:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <msgQ+0x1>
    214c:	10 97       	sbiw	r26, 0x00	; 0
    214e:	c1 f0       	breq	.+48     	; 0x2180 <run+0x94>
    2150:	21 15       	cp	r18, r1
    2152:	31 05       	cpc	r19, r1
    2154:	59 f2       	breq	.-106    	; 0x20ec <run>
    2156:	16 96       	adiw	r26, 0x06	; 6
    2158:	8d 91       	ld	r24, X+
    215a:	9d 91       	ld	r25, X+
    215c:	0d 90       	ld	r0, X+
    215e:	bc 91       	ld	r27, X
    2160:	a0 2d       	mov	r26, r0
    2162:	e9 01       	movw	r28, r18
    2164:	4e 81       	ldd	r20, Y+6	; 0x06
    2166:	5f 81       	ldd	r21, Y+7	; 0x07
    2168:	68 85       	ldd	r22, Y+8	; 0x08
    216a:	79 85       	ldd	r23, Y+9	; 0x09
    216c:	84 1b       	sub	r24, r20
    216e:	95 0b       	sbc	r25, r21
    2170:	a6 0b       	sbc	r26, r22
    2172:	b7 0b       	sbc	r27, r23
    2174:	18 16       	cp	r1, r24
    2176:	19 06       	cpc	r1, r25
    2178:	1a 06       	cpc	r1, r26
    217a:	1b 06       	cpc	r1, r27
    217c:	0c f0       	brlt	.+2      	; 0x2180 <run+0x94>
    217e:	b6 cf       	rjmp	.-148    	; 0x20ec <run>
    2180:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <activeStack+0x1>
    2184:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <activeStack>
    2188:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    218c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
    2194:	f0 93 05 01 	sts	0x0105, r31	; 0x800105 <threadPool+0x1>
    2198:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <threadPool>
    219c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    21a0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    21a4:	14 96       	adiw	r26, 0x04	; 4
    21a6:	ed 91       	ld	r30, X+
    21a8:	fc 91       	ld	r31, X
    21aa:	15 97       	sbiw	r26, 0x05	; 5
    21ac:	30 97       	sbiw	r30, 0x00	; 0
    21ae:	41 f0       	breq	.+16     	; 0x21c0 <run+0xd4>
    21b0:	a0 81       	ld	r26, Z
    21b2:	b1 81       	ldd	r27, Z+1	; 0x01
    21b4:	14 96       	adiw	r26, 0x04	; 4
    21b6:	ed 91       	ld	r30, X+
    21b8:	fc 91       	ld	r31, X
    21ba:	15 97       	sbiw	r26, 0x05	; 5
    21bc:	30 97       	sbiw	r30, 0x00	; 0
    21be:	c1 f7       	brne	.-16     	; 0x21b0 <run+0xc4>
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 41 05 	call	0xa82	; 0xa82 <dispatch>
    21c6:	92 cf       	rjmp	.-220    	; 0x20ec <run>

000021c8 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    21c8:	42 31       	cpi	r20, 0x12	; 18
    21ca:	b8 f4       	brcc	.+46     	; 0x21fa <install+0x32>
        char status;
        DISABLE(status);
    21cc:	2f b7       	in	r18, 0x3f	; 63
    21ce:	f8 94       	cli
        otable[i] = obj;
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	44 0f       	add	r20, r20
    21d4:	55 1f       	adc	r21, r21
    21d6:	fa 01       	movw	r30, r20
    21d8:	ee 5b       	subi	r30, 0xBE	; 190
    21da:	fe 4f       	sbci	r31, 0xFE	; 254
    21dc:	91 83       	std	Z+1, r25	; 0x01
    21de:	80 83       	st	Z, r24
        mtable[i] = m;
    21e0:	fa 01       	movw	r30, r20
    21e2:	e6 52       	subi	r30, 0x26	; 38
    21e4:	fe 4f       	sbci	r31, 0xFE	; 254
    21e6:	71 83       	std	Z+1, r23	; 0x01
    21e8:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	fc 01       	movw	r30, r24
    21f0:	53 83       	std	Z+3, r21	; 0x03
    21f2:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    21f4:	22 23       	and	r18, r18
    21f6:	0c f4       	brge	.+2      	; 0x21fa <install+0x32>
    21f8:	78 94       	sei
    21fa:	08 95       	ret

000021fc <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21fc:	8c 01       	movw	r16, r24
    21fe:	7b 01       	movw	r14, r22
    2200:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2202:	8f b7       	in	r24, 0x3f	; 63
    2204:	f8 94       	cli
    initialize();
    2206:	0e 94 d6 04 	call	0x9ac	; 0x9ac <initialize>
    ENABLE(1);
    220a:	78 94       	sei
    if (m != NULL)
    220c:	e1 14       	cp	r14, r1
    220e:	f1 04       	cpc	r15, r1
    2210:	41 f0       	breq	.+16     	; 0x2222 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	a9 01       	movw	r20, r18
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	cb 01       	movw	r24, r22
    221e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <async>
    DISABLE(status);
    2222:	8f b7       	in	r24, 0x3f	; 63
    2224:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2226:	0e 94 61 05 	call	0xac2	; 0xac2 <schedule>
    ENABLE(1);
    222a:	78 94       	sei
    while (1) {
        SLEEP();
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	83 bf       	out	0x33, r24	; 51
    2230:	88 95       	sleep
    2232:	fd cf       	rjmp	.-6      	; 0x222e <tinytimber+0x32>

00002234 <__divmodhi4>:
    2234:	97 fb       	bst	r25, 7
    2236:	07 2e       	mov	r0, r23
    2238:	16 f4       	brtc	.+4      	; 0x223e <__divmodhi4+0xa>
    223a:	00 94       	com	r0
    223c:	07 d0       	rcall	.+14     	; 0x224c <__divmodhi4_neg1>
    223e:	77 fd       	sbrc	r23, 7
    2240:	09 d0       	rcall	.+18     	; 0x2254 <__divmodhi4_neg2>
    2242:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__udivmodhi4>
    2246:	07 fc       	sbrc	r0, 7
    2248:	05 d0       	rcall	.+10     	; 0x2254 <__divmodhi4_neg2>
    224a:	3e f4       	brtc	.+14     	; 0x225a <__divmodhi4_exit>

0000224c <__divmodhi4_neg1>:
    224c:	90 95       	com	r25
    224e:	81 95       	neg	r24
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	08 95       	ret

00002254 <__divmodhi4_neg2>:
    2254:	70 95       	com	r23
    2256:	61 95       	neg	r22
    2258:	7f 4f       	sbci	r23, 0xFF	; 255

0000225a <__divmodhi4_exit>:
    225a:	08 95       	ret

0000225c <__divmodsi4>:
    225c:	05 2e       	mov	r0, r21
    225e:	97 fb       	bst	r25, 7
    2260:	1e f4       	brtc	.+6      	; 0x2268 <__divmodsi4+0xc>
    2262:	00 94       	com	r0
    2264:	0e 94 45 11 	call	0x228a	; 0x228a <__negsi2>
    2268:	57 fd       	sbrc	r21, 7
    226a:	07 d0       	rcall	.+14     	; 0x227a <__divmodsi4_neg2>
    226c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodsi4>
    2270:	07 fc       	sbrc	r0, 7
    2272:	03 d0       	rcall	.+6      	; 0x227a <__divmodsi4_neg2>
    2274:	4e f4       	brtc	.+18     	; 0x2288 <__divmodsi4_exit>
    2276:	0c 94 45 11 	jmp	0x228a	; 0x228a <__negsi2>

0000227a <__divmodsi4_neg2>:
    227a:	50 95       	com	r21
    227c:	40 95       	com	r20
    227e:	30 95       	com	r19
    2280:	21 95       	neg	r18
    2282:	3f 4f       	sbci	r19, 0xFF	; 255
    2284:	4f 4f       	sbci	r20, 0xFF	; 255
    2286:	5f 4f       	sbci	r21, 0xFF	; 255

00002288 <__divmodsi4_exit>:
    2288:	08 95       	ret

0000228a <__negsi2>:
    228a:	90 95       	com	r25
    228c:	80 95       	com	r24
    228e:	70 95       	com	r23
    2290:	61 95       	neg	r22
    2292:	7f 4f       	sbci	r23, 0xFF	; 255
    2294:	8f 4f       	sbci	r24, 0xFF	; 255
    2296:	9f 4f       	sbci	r25, 0xFF	; 255
    2298:	08 95       	ret

0000229a <__tablejump2__>:
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	05 90       	lpm	r0, Z+
    22a0:	f4 91       	lpm	r31, Z
    22a2:	e0 2d       	mov	r30, r0
    22a4:	09 94       	ijmp

000022a6 <__usmulhisi3>:
    22a6:	0e 94 90 11 	call	0x2320	; 0x2320 <__umulhisi3>

000022aa <__usmulhisi3_tail>:
    22aa:	b7 ff       	sbrs	r27, 7
    22ac:	08 95       	ret
    22ae:	82 1b       	sub	r24, r18
    22b0:	93 0b       	sbc	r25, r19
    22b2:	08 95       	ret

000022b4 <__udivmodhi4>:
    22b4:	aa 1b       	sub	r26, r26
    22b6:	bb 1b       	sub	r27, r27
    22b8:	51 e1       	ldi	r21, 0x11	; 17
    22ba:	07 c0       	rjmp	.+14     	; 0x22ca <__udivmodhi4_ep>

000022bc <__udivmodhi4_loop>:
    22bc:	aa 1f       	adc	r26, r26
    22be:	bb 1f       	adc	r27, r27
    22c0:	a6 17       	cp	r26, r22
    22c2:	b7 07       	cpc	r27, r23
    22c4:	10 f0       	brcs	.+4      	; 0x22ca <__udivmodhi4_ep>
    22c6:	a6 1b       	sub	r26, r22
    22c8:	b7 0b       	sbc	r27, r23

000022ca <__udivmodhi4_ep>:
    22ca:	88 1f       	adc	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	5a 95       	dec	r21
    22d0:	a9 f7       	brne	.-22     	; 0x22bc <__udivmodhi4_loop>
    22d2:	80 95       	com	r24
    22d4:	90 95       	com	r25
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	08 95       	ret

000022dc <__udivmodsi4>:
    22dc:	a1 e2       	ldi	r26, 0x21	; 33
    22de:	1a 2e       	mov	r1, r26
    22e0:	aa 1b       	sub	r26, r26
    22e2:	bb 1b       	sub	r27, r27
    22e4:	fd 01       	movw	r30, r26
    22e6:	0d c0       	rjmp	.+26     	; 0x2302 <__udivmodsi4_ep>

000022e8 <__udivmodsi4_loop>:
    22e8:	aa 1f       	adc	r26, r26
    22ea:	bb 1f       	adc	r27, r27
    22ec:	ee 1f       	adc	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	a2 17       	cp	r26, r18
    22f2:	b3 07       	cpc	r27, r19
    22f4:	e4 07       	cpc	r30, r20
    22f6:	f5 07       	cpc	r31, r21
    22f8:	20 f0       	brcs	.+8      	; 0x2302 <__udivmodsi4_ep>
    22fa:	a2 1b       	sub	r26, r18
    22fc:	b3 0b       	sbc	r27, r19
    22fe:	e4 0b       	sbc	r30, r20
    2300:	f5 0b       	sbc	r31, r21

00002302 <__udivmodsi4_ep>:
    2302:	66 1f       	adc	r22, r22
    2304:	77 1f       	adc	r23, r23
    2306:	88 1f       	adc	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	1a 94       	dec	r1
    230c:	69 f7       	brne	.-38     	; 0x22e8 <__udivmodsi4_loop>
    230e:	60 95       	com	r22
    2310:	70 95       	com	r23
    2312:	80 95       	com	r24
    2314:	90 95       	com	r25
    2316:	9b 01       	movw	r18, r22
    2318:	ac 01       	movw	r20, r24
    231a:	bd 01       	movw	r22, r26
    231c:	cf 01       	movw	r24, r30
    231e:	08 95       	ret

00002320 <__umulhisi3>:
    2320:	a2 9f       	mul	r26, r18
    2322:	b0 01       	movw	r22, r0
    2324:	b3 9f       	mul	r27, r19
    2326:	c0 01       	movw	r24, r0
    2328:	a3 9f       	mul	r26, r19
    232a:	70 0d       	add	r23, r0
    232c:	81 1d       	adc	r24, r1
    232e:	11 24       	eor	r1, r1
    2330:	91 1d       	adc	r25, r1
    2332:	b2 9f       	mul	r27, r18
    2334:	70 0d       	add	r23, r0
    2336:	81 1d       	adc	r24, r1
    2338:	11 24       	eor	r1, r1
    233a:	91 1d       	adc	r25, r1
    233c:	08 95       	ret

0000233e <setjmp>:
    233e:	dc 01       	movw	r26, r24
    2340:	2d 92       	st	X+, r2
    2342:	3d 92       	st	X+, r3
    2344:	4d 92       	st	X+, r4
    2346:	5d 92       	st	X+, r5
    2348:	6d 92       	st	X+, r6
    234a:	7d 92       	st	X+, r7
    234c:	8d 92       	st	X+, r8
    234e:	9d 92       	st	X+, r9
    2350:	ad 92       	st	X+, r10
    2352:	bd 92       	st	X+, r11
    2354:	cd 92       	st	X+, r12
    2356:	dd 92       	st	X+, r13
    2358:	ed 92       	st	X+, r14
    235a:	fd 92       	st	X+, r15
    235c:	0d 93       	st	X+, r16
    235e:	1d 93       	st	X+, r17
    2360:	cd 93       	st	X+, r28
    2362:	dd 93       	st	X+, r29
    2364:	ff 91       	pop	r31
    2366:	ef 91       	pop	r30
    2368:	8d b7       	in	r24, 0x3d	; 61
    236a:	8d 93       	st	X+, r24
    236c:	8e b7       	in	r24, 0x3e	; 62
    236e:	8d 93       	st	X+, r24
    2370:	8f b7       	in	r24, 0x3f	; 63
    2372:	8d 93       	st	X+, r24
    2374:	ed 93       	st	X+, r30
    2376:	fd 93       	st	X+, r31
    2378:	88 27       	eor	r24, r24
    237a:	99 27       	eor	r25, r25
    237c:	09 94       	ijmp

0000237e <longjmp>:
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	91 05       	cpc	r25, r1
    2386:	81 1d       	adc	r24, r1
    2388:	2d 90       	ld	r2, X+
    238a:	3d 90       	ld	r3, X+
    238c:	4d 90       	ld	r4, X+
    238e:	5d 90       	ld	r5, X+
    2390:	6d 90       	ld	r6, X+
    2392:	7d 90       	ld	r7, X+
    2394:	8d 90       	ld	r8, X+
    2396:	9d 90       	ld	r9, X+
    2398:	ad 90       	ld	r10, X+
    239a:	bd 90       	ld	r11, X+
    239c:	cd 90       	ld	r12, X+
    239e:	dd 90       	ld	r13, X+
    23a0:	ed 90       	ld	r14, X+
    23a2:	fd 90       	ld	r15, X+
    23a4:	0d 91       	ld	r16, X+
    23a6:	1d 91       	ld	r17, X+
    23a8:	cd 91       	ld	r28, X+
    23aa:	dd 91       	ld	r29, X+
    23ac:	ed 91       	ld	r30, X+
    23ae:	fd 91       	ld	r31, X+
    23b0:	0d 90       	ld	r0, X+
    23b2:	f8 94       	cli
    23b4:	fe bf       	out	0x3e, r31	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	ed bf       	out	0x3d, r30	; 61
    23ba:	ed 91       	ld	r30, X+
    23bc:	fd 91       	ld	r31, X+
    23be:	09 94       	ijmp

000023c0 <_exit>:
    23c0:	f8 94       	cli

000023c2 <__stop_program>:
    23c2:	ff cf       	rjmp	.-2      	; 0x23c2 <__stop_program>
