
labb4_d0003e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000026a4  00002738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  00800148  00800148  00002780  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034b8  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001130  00000000  00000000  00005f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000186a  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c48  00000000  00000000  000088bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ce  00000000  00000000  00009504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000298f  00000000  00000000  00009ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000c861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__vector_1>
       8:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__vector_2>
       c:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_3>
      10:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_4>
      14:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__vector_9>
      28:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__vector_10>
      2c:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_11>
      30:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_12>
      34:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__vector_13>
      38:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__vector_14>
      3c:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__vector_15>
      40:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__vector_16>
      44:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__vector_17>
      48:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_18>
      4c:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_19>
      50:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__vector_20>
      54:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_21>
      58:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__vector_22>
      5c:	a3 00       	.word	0x00a3	; ????
      5e:	85 00       	.word	0x0085	; ????
      60:	88 00       	.word	0x0088	; ????
      62:	8b 00       	.word	0x008b	; ????
      64:	8e 00       	.word	0x008e	; ????
      66:	91 00       	.word	0x0091	; ????
      68:	94 00       	.word	0x0094	; ????
      6a:	97 00       	.word	0x0097	; ????
      6c:	9a 00       	.word	0x009a	; ????
      6e:	9d 00       	.word	0x009d	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 ea       	ldi	r30, 0xA4	; 164
      84:	f6 e2       	ldi	r31, 0x26	; 38
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 34       	cpi	r26, 0x48	; 72
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a8 e4       	ldi	r26, 0x48	; 72
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 39       	cpi	r26, 0x9F	; 159
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 4b 05 	call	0xa96	; 0xa96 <main>
      a6:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:
    printAt(0,4);

 }

void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b6:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      b8:	87 eb       	ldi	r24, 0xB7	; 183
      ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c4:	8f e0       	ldi	r24, 0x0F	; 15
      c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d0:	08 95       	ret

000000d2 <button_init>:
void button_init(void){


    
    // initialize button
    PORTB |= ((1 << 7)| (1 << 6 ) | (1 << 4));  // 7 down, 6 up, 4 center down 
      d2:	85 b1       	in	r24, 0x05	; 5
      d4:	80 6d       	ori	r24, 0xD0	; 208
      d6:	85 b9       	out	0x05, r24	; 5
	PORTE |= ( (1 << 2) | ( 1 << 3));           // 2 left, 3 right
      d8:	8e b1       	in	r24, 0x0e	; 14
      da:	8c 60       	ori	r24, 0x0C	; 12
      dc:	8e b9       	out	0x0e, r24	; 14


	// enable interupts for joystick
    EIMSK |= (1 << PCIE1) | (1 << PCIE0); //  PCIE1 enables PCINT15..8 interupts // PCIE0 enables PCINT7..0 interupts
      de:	8d b3       	in	r24, 0x1d	; 29
      e0:	80 6c       	ori	r24, 0xC0	; 192
      e2:	8d bb       	out	0x1d, r24	; 29
	//EIMSK |= (1 << PCINT15);

	PCMSK1 |= (1 << PCINT15)|(1 << PCINT14)|(1 << PCINT12); //enables those pins
      e4:	ec e6       	ldi	r30, 0x6C	; 108
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 6d       	ori	r24, 0xD0	; 208
      ec:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3)|(1 << PCINT2);
      ee:	eb e6       	ldi	r30, 0x6B	; 107
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	8c 60       	ori	r24, 0x0C	; 12
      f6:	80 83       	st	Z, r24
      f8:	08 95       	ret

000000fa <getValueArray>:


}

int getValueArray(int i){
    switch (i)
      fa:	8a 30       	cpi	r24, 0x0A	; 10
      fc:	91 05       	cpc	r25, r1
      fe:	00 f5       	brcc	.+64     	; 0x140 <getValueArray+0x46>
     100:	fc 01       	movw	r30, r24
     102:	e2 5d       	subi	r30, 0xD2	; 210
     104:	ff 4f       	sbci	r31, 0xFF	; 255
     106:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
     10a:	80 e8       	ldi	r24, 0x80	; 128
     10c:	90 e2       	ldi	r25, 0x20	; 32
     10e:	08 95       	ret
    
    case 2:
        return TwoValue;
     110:	81 e1       	ldi	r24, 0x11	; 17
     112:	9e e1       	ldi	r25, 0x1E	; 30
     114:	08 95       	ret

    case 3:
        return ThreeValue;
     116:	81 e1       	ldi	r24, 0x11	; 17
     118:	9b e1       	ldi	r25, 0x1B	; 27
     11a:	08 95       	ret
    
    case 4:
        return FourValue;
     11c:	80 e5       	ldi	r24, 0x50	; 80
     11e:	9b e0       	ldi	r25, 0x0B	; 11
     120:	08 95       	ret

    case 5:
        return FiveValue;
     122:	81 e4       	ldi	r24, 0x41	; 65
     124:	9b e1       	ldi	r25, 0x1B	; 27
     126:	08 95       	ret
    
    case 6:
        return SixValue;
     128:	81 e4       	ldi	r24, 0x41	; 65
     12a:	9f e1       	ldi	r25, 0x1F	; 31
     12c:	08 95       	ret
    
    case 7:
        return SevenValue;
     12e:	81 e1       	ldi	r24, 0x11	; 17
     130:	91 e0       	ldi	r25, 0x01	; 1
     132:	08 95       	ret
        
    case 8:
        return EightValue;
     134:	81 e5       	ldi	r24, 0x51	; 81
     136:	9f e1       	ldi	r25, 0x1F	; 31
     138:	08 95       	ret
    
    case 9:
        return NineValue;
     13a:	81 e5       	ldi	r24, 0x51	; 81
     13c:	9b e0       	ldi	r25, 0x0B	; 11
     13e:	08 95       	ret
    
    default: // 10
        return BlankValue;
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	08 95       	ret

int getValueArray(int i){
    switch (i)
    {
    case 0:
        return ZeroValue;
     146:	81 e5       	ldi	r24, 0x51	; 81
     148:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     14a:	08 95       	ret

0000014c <writeChar>:

void writeChar(char ch, int pos) {
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <writeChar+0xc>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
	

	volatile int i = 0;
     15c:	1a 82       	std	Y+2, r1	; 0x02
     15e:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     160:	66 30       	cpi	r22, 0x06	; 6
     162:	71 05       	cpc	r23, r1
     164:	08 f0       	brcs	.+2      	; 0x168 <writeChar+0x1c>
     166:	fe c1       	rjmp	.+1020   	; 0x564 <__stack+0x65>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     168:	90 ed       	ldi	r25, 0xD0	; 208
     16a:	98 0f       	add	r25, r24
     16c:	9a 30       	cpi	r25, 0x0A	; 10
     16e:	28 f0       	brcs	.+10     	; 0x17a <writeChar+0x2e>
		i=10;
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	9a 83       	std	Y+2, r25	; 0x02
     176:	89 83       	std	Y+1, r24	; 0x01
     178:	04 c0       	rjmp	.+8      	; 0x182 <writeChar+0x36>
	}else{
        i = ch - 48;
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	c0 97       	sbiw	r24, 0x30	; 48
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     182:	61 15       	cp	r22, r1
     184:	71 05       	cpc	r23, r1
     186:	09 f0       	breq	.+2      	; 0x18a <writeChar+0x3e>
     188:	4e c0       	rjmp	.+156    	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     18a:	0f 2e       	mov	r0, r31
     18c:	fc ee       	ldi	r31, 0xEC	; 236
     18e:	ef 2e       	mov	r14, r31
     190:	f1 2c       	mov	r15, r1
     192:	f0 2d       	mov	r31, r0
     194:	f7 01       	movw	r30, r14
     196:	10 81       	ld	r17, Z
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	9a 81       	ldd	r25, Y+2	; 0x02
     19c:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     1a0:	10 7f       	andi	r17, 0xF0	; 240
     1a2:	8f 70       	andi	r24, 0x0F	; 15
     1a4:	81 2b       	or	r24, r17
     1a6:	f7 01       	movw	r30, r14
     1a8:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     1aa:	0f 2e       	mov	r0, r31
     1ac:	f1 ef       	ldi	r31, 0xF1	; 241
     1ae:	ef 2e       	mov	r14, r31
     1b0:	f1 2c       	mov	r15, r1
     1b2:	f0 2d       	mov	r31, r0
     1b4:	f7 01       	movw	r30, r14
     1b6:	10 81       	ld	r17, Z
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     1c0:	80 7f       	andi	r24, 0xF0	; 240
     1c2:	99 27       	eor	r25, r25
     1c4:	95 95       	asr	r25
     1c6:	87 95       	ror	r24
     1c8:	95 95       	asr	r25
     1ca:	87 95       	ror	r24
     1cc:	95 95       	asr	r25
     1ce:	87 95       	ror	r24
     1d0:	95 95       	asr	r25
     1d2:	87 95       	ror	r24
     1d4:	10 7f       	andi	r17, 0xF0	; 240
     1d6:	81 2b       	or	r24, r17
     1d8:	f7 01       	movw	r30, r14
     1da:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1dc:	0f 2e       	mov	r0, r31
     1de:	f6 ef       	ldi	r31, 0xF6	; 246
     1e0:	ef 2e       	mov	r14, r31
     1e2:	f1 2c       	mov	r15, r1
     1e4:	f0 2d       	mov	r31, r0
     1e6:	f7 01       	movw	r30, r14
     1e8:	10 81       	ld	r17, Z
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
     1ee:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     1f2:	88 27       	eor	r24, r24
     1f4:	9f 70       	andi	r25, 0x0F	; 15
     1f6:	10 7f       	andi	r17, 0xF0	; 240
     1f8:	19 2b       	or	r17, r25
     1fa:	f7 01       	movw	r30, r14
     1fc:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     1fe:	0f 2e       	mov	r0, r31
     200:	fb ef       	ldi	r31, 0xFB	; 251
     202:	ef 2e       	mov	r14, r31
     204:	f1 2c       	mov	r15, r1
     206:	f0 2d       	mov	r31, r0
     208:	f7 01       	movw	r30, r14
     20a:	10 81       	ld	r17, Z
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9a 81       	ldd	r25, Y+2	; 0x02
     210:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     214:	10 7f       	andi	r17, 0xF0	; 240
     216:	95 95       	asr	r25
     218:	95 95       	asr	r25
     21a:	95 95       	asr	r25
     21c:	95 95       	asr	r25
     21e:	91 2b       	or	r25, r17
     220:	f7 01       	movw	r30, r14
     222:	90 83       	st	Z, r25
     224:	9f c1       	rjmp	.+830    	; 0x564 <__stack+0x65>
		
	} else if(pos==1){
     226:	61 30       	cpi	r22, 0x01	; 1
     228:	71 05       	cpc	r23, r1
     22a:	09 f0       	breq	.+2      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
     22c:	50 c0       	rjmp	.+160    	; 0x2ce <__EEPROM_REGION_LENGTH__+0xce>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     22e:	0f 2e       	mov	r0, r31
     230:	fc ee       	ldi	r31, 0xEC	; 236
     232:	ef 2e       	mov	r14, r31
     234:	f1 2c       	mov	r15, r1
     236:	f0 2d       	mov	r31, r0
     238:	f7 01       	movw	r30, r14
     23a:	10 81       	ld	r17, Z
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	9a 81       	ldd	r25, Y+2	; 0x02
     240:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     244:	1f 70       	andi	r17, 0x0F	; 15
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	81 2b       	or	r24, r17
     254:	f7 01       	movw	r30, r14
     256:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     258:	0f 2e       	mov	r0, r31
     25a:	f1 ef       	ldi	r31, 0xF1	; 241
     25c:	ef 2e       	mov	r14, r31
     25e:	f1 2c       	mov	r15, r1
     260:	f0 2d       	mov	r31, r0
     262:	f7 01       	movw	r30, r14
     264:	10 81       	ld	r17, Z
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	9a 81       	ldd	r25, Y+2	; 0x02
     26a:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     26e:	1f 70       	andi	r17, 0x0F	; 15
     270:	80 7f       	andi	r24, 0xF0	; 240
     272:	81 2b       	or	r24, r17
     274:	f7 01       	movw	r30, r14
     276:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     278:	0f 2e       	mov	r0, r31
     27a:	f6 ef       	ldi	r31, 0xF6	; 246
     27c:	ef 2e       	mov	r14, r31
     27e:	f1 2c       	mov	r15, r1
     280:	f0 2d       	mov	r31, r0
     282:	f7 01       	movw	r30, r14
     284:	10 81       	ld	r17, Z
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	9a 81       	ldd	r25, Y+2	; 0x02
     28a:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     28e:	88 27       	eor	r24, r24
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	1f 70       	andi	r17, 0x0F	; 15
     2a4:	81 2b       	or	r24, r17
     2a6:	f7 01       	movw	r30, r14
     2a8:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     2aa:	0f 2e       	mov	r0, r31
     2ac:	fb ef       	ldi	r31, 0xFB	; 251
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f1 2c       	mov	r15, r1
     2b2:	f0 2d       	mov	r31, r0
     2b4:	f7 01       	movw	r30, r14
     2b6:	10 81       	ld	r17, Z
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	9a 81       	ldd	r25, Y+2	; 0x02
     2bc:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     2c0:	88 27       	eor	r24, r24
     2c2:	90 7f       	andi	r25, 0xF0	; 240
     2c4:	1f 70       	andi	r17, 0x0F	; 15
     2c6:	19 2b       	or	r17, r25
     2c8:	f7 01       	movw	r30, r14
     2ca:	10 83       	st	Z, r17
     2cc:	4b c1       	rjmp	.+662    	; 0x564 <__stack+0x65>
	} else if(pos==2){
     2ce:	62 30       	cpi	r22, 0x02	; 2
     2d0:	71 05       	cpc	r23, r1
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <__EEPROM_REGION_LENGTH__+0xd6>
     2d4:	4e c0       	rjmp	.+156    	; 0x372 <__EEPROM_REGION_LENGTH__+0x172>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2d6:	0f 2e       	mov	r0, r31
     2d8:	fd ee       	ldi	r31, 0xED	; 237
     2da:	ef 2e       	mov	r14, r31
     2dc:	f1 2c       	mov	r15, r1
     2de:	f0 2d       	mov	r31, r0
     2e0:	f7 01       	movw	r30, r14
     2e2:	10 81       	ld	r17, Z
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     2ec:	10 7f       	andi	r17, 0xF0	; 240
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	81 2b       	or	r24, r17
     2f2:	f7 01       	movw	r30, r14
     2f4:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     2f6:	0f 2e       	mov	r0, r31
     2f8:	f2 ef       	ldi	r31, 0xF2	; 242
     2fa:	ef 2e       	mov	r14, r31
     2fc:	f1 2c       	mov	r15, r1
     2fe:	f0 2d       	mov	r31, r0
     300:	f7 01       	movw	r30, r14
     302:	10 81       	ld	r17, Z
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     30c:	80 7f       	andi	r24, 0xF0	; 240
     30e:	99 27       	eor	r25, r25
     310:	95 95       	asr	r25
     312:	87 95       	ror	r24
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	95 95       	asr	r25
     31a:	87 95       	ror	r24
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	10 7f       	andi	r17, 0xF0	; 240
     322:	81 2b       	or	r24, r17
     324:	f7 01       	movw	r30, r14
     326:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     328:	0f 2e       	mov	r0, r31
     32a:	f7 ef       	ldi	r31, 0xF7	; 247
     32c:	ef 2e       	mov	r14, r31
     32e:	f1 2c       	mov	r15, r1
     330:	f0 2d       	mov	r31, r0
     332:	f7 01       	movw	r30, r14
     334:	10 81       	ld	r17, Z
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     33e:	88 27       	eor	r24, r24
     340:	9f 70       	andi	r25, 0x0F	; 15
     342:	10 7f       	andi	r17, 0xF0	; 240
     344:	19 2b       	or	r17, r25
     346:	f7 01       	movw	r30, r14
     348:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     34a:	0f 2e       	mov	r0, r31
     34c:	fc ef       	ldi	r31, 0xFC	; 252
     34e:	ef 2e       	mov	r14, r31
     350:	f1 2c       	mov	r15, r1
     352:	f0 2d       	mov	r31, r0
     354:	f7 01       	movw	r30, r14
     356:	10 81       	ld	r17, Z
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     360:	10 7f       	andi	r17, 0xF0	; 240
     362:	95 95       	asr	r25
     364:	95 95       	asr	r25
     366:	95 95       	asr	r25
     368:	95 95       	asr	r25
     36a:	91 2b       	or	r25, r17
     36c:	f7 01       	movw	r30, r14
     36e:	90 83       	st	Z, r25
     370:	f9 c0       	rjmp	.+498    	; 0x564 <__stack+0x65>
		
	} else if(pos==3){
     372:	63 30       	cpi	r22, 0x03	; 3
     374:	71 05       	cpc	r23, r1
     376:	09 f0       	breq	.+2      	; 0x37a <__EEPROM_REGION_LENGTH__+0x17a>
     378:	50 c0       	rjmp	.+160    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     37a:	0f 2e       	mov	r0, r31
     37c:	fd ee       	ldi	r31, 0xED	; 237
     37e:	ef 2e       	mov	r14, r31
     380:	f1 2c       	mov	r15, r1
     382:	f0 2d       	mov	r31, r0
     384:	f7 01       	movw	r30, r14
     386:	10 81       	ld	r17, Z
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     390:	1f 70       	andi	r17, 0x0F	; 15
     392:	82 95       	swap	r24
     394:	92 95       	swap	r25
     396:	90 7f       	andi	r25, 0xF0	; 240
     398:	98 27       	eor	r25, r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	98 27       	eor	r25, r24
     39e:	81 2b       	or	r24, r17
     3a0:	f7 01       	movw	r30, r14
     3a2:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     3a4:	0f 2e       	mov	r0, r31
     3a6:	f2 ef       	ldi	r31, 0xF2	; 242
     3a8:	ef 2e       	mov	r14, r31
     3aa:	f1 2c       	mov	r15, r1
     3ac:	f0 2d       	mov	r31, r0
     3ae:	f7 01       	movw	r30, r14
     3b0:	10 81       	ld	r17, Z
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	9a 81       	ldd	r25, Y+2	; 0x02
     3b6:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     3ba:	1f 70       	andi	r17, 0x0F	; 15
     3bc:	80 7f       	andi	r24, 0xF0	; 240
     3be:	81 2b       	or	r24, r17
     3c0:	f7 01       	movw	r30, r14
     3c2:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     3c4:	0f 2e       	mov	r0, r31
     3c6:	f7 ef       	ldi	r31, 0xF7	; 247
     3c8:	ef 2e       	mov	r14, r31
     3ca:	f1 2c       	mov	r15, r1
     3cc:	f0 2d       	mov	r31, r0
     3ce:	f7 01       	movw	r30, r14
     3d0:	10 81       	ld	r17, Z
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     3da:	88 27       	eor	r24, r24
     3dc:	9f 70       	andi	r25, 0x0F	; 15
     3de:	95 95       	asr	r25
     3e0:	87 95       	ror	r24
     3e2:	95 95       	asr	r25
     3e4:	87 95       	ror	r24
     3e6:	95 95       	asr	r25
     3e8:	87 95       	ror	r24
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	1f 70       	andi	r17, 0x0F	; 15
     3f0:	81 2b       	or	r24, r17
     3f2:	f7 01       	movw	r30, r14
     3f4:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     3f6:	0f 2e       	mov	r0, r31
     3f8:	fc ef       	ldi	r31, 0xFC	; 252
     3fa:	ef 2e       	mov	r14, r31
     3fc:	f1 2c       	mov	r15, r1
     3fe:	f0 2d       	mov	r31, r0
     400:	f7 01       	movw	r30, r14
     402:	10 81       	ld	r17, Z
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     40c:	88 27       	eor	r24, r24
     40e:	90 7f       	andi	r25, 0xF0	; 240
     410:	1f 70       	andi	r17, 0x0F	; 15
     412:	19 2b       	or	r17, r25
     414:	f7 01       	movw	r30, r14
     416:	10 83       	st	Z, r17
     418:	a5 c0       	rjmp	.+330    	; 0x564 <__stack+0x65>
		
	} else if(pos==4){
     41a:	64 30       	cpi	r22, 0x04	; 4
     41c:	71 05       	cpc	r23, r1
     41e:	09 f0       	breq	.+2      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
     420:	4e c0       	rjmp	.+156    	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     422:	0f 2e       	mov	r0, r31
     424:	fe ee       	ldi	r31, 0xEE	; 238
     426:	ef 2e       	mov	r14, r31
     428:	f1 2c       	mov	r15, r1
     42a:	f0 2d       	mov	r31, r0
     42c:	f7 01       	movw	r30, r14
     42e:	10 81       	ld	r17, Z
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     438:	10 7f       	andi	r17, 0xF0	; 240
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	81 2b       	or	r24, r17
     43e:	f7 01       	movw	r30, r14
     440:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     442:	0f 2e       	mov	r0, r31
     444:	f3 ef       	ldi	r31, 0xF3	; 243
     446:	ef 2e       	mov	r14, r31
     448:	f1 2c       	mov	r15, r1
     44a:	f0 2d       	mov	r31, r0
     44c:	f7 01       	movw	r30, r14
     44e:	10 81       	ld	r17, Z
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     458:	80 7f       	andi	r24, 0xF0	; 240
     45a:	99 27       	eor	r25, r25
     45c:	95 95       	asr	r25
     45e:	87 95       	ror	r24
     460:	95 95       	asr	r25
     462:	87 95       	ror	r24
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	10 7f       	andi	r17, 0xF0	; 240
     46e:	81 2b       	or	r24, r17
     470:	f7 01       	movw	r30, r14
     472:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     474:	0f 2e       	mov	r0, r31
     476:	f8 ef       	ldi	r31, 0xF8	; 248
     478:	ef 2e       	mov	r14, r31
     47a:	f1 2c       	mov	r15, r1
     47c:	f0 2d       	mov	r31, r0
     47e:	f7 01       	movw	r30, r14
     480:	10 81       	ld	r17, Z
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     48a:	88 27       	eor	r24, r24
     48c:	9f 70       	andi	r25, 0x0F	; 15
     48e:	10 7f       	andi	r17, 0xF0	; 240
     490:	19 2b       	or	r17, r25
     492:	f7 01       	movw	r30, r14
     494:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     496:	0f 2e       	mov	r0, r31
     498:	fd ef       	ldi	r31, 0xFD	; 253
     49a:	ef 2e       	mov	r14, r31
     49c:	f1 2c       	mov	r15, r1
     49e:	f0 2d       	mov	r31, r0
     4a0:	f7 01       	movw	r30, r14
     4a2:	10 81       	ld	r17, Z
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	9a 81       	ldd	r25, Y+2	; 0x02
     4a8:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     4ac:	10 7f       	andi	r17, 0xF0	; 240
     4ae:	95 95       	asr	r25
     4b0:	95 95       	asr	r25
     4b2:	95 95       	asr	r25
     4b4:	95 95       	asr	r25
     4b6:	91 2b       	or	r25, r17
     4b8:	f7 01       	movw	r30, r14
     4ba:	90 83       	st	Z, r25
     4bc:	53 c0       	rjmp	.+166    	; 0x564 <__stack+0x65>
		
	} else if(pos==5){
     4be:	65 30       	cpi	r22, 0x05	; 5
     4c0:	71 05       	cpc	r23, r1
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__DATA_REGION_LENGTH__+0xc6>
     4c4:	4f c0       	rjmp	.+158    	; 0x564 <__stack+0x65>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     4c6:	0f 2e       	mov	r0, r31
     4c8:	fe ee       	ldi	r31, 0xEE	; 238
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 2c       	mov	r15, r1
     4ce:	f0 2d       	mov	r31, r0
     4d0:	f7 01       	movw	r30, r14
     4d2:	10 81       	ld	r17, Z
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     4dc:	1f 70       	andi	r17, 0x0F	; 15
     4de:	82 95       	swap	r24
     4e0:	92 95       	swap	r25
     4e2:	90 7f       	andi	r25, 0xF0	; 240
     4e4:	98 27       	eor	r25, r24
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	98 27       	eor	r25, r24
     4ea:	81 2b       	or	r24, r17
     4ec:	f7 01       	movw	r30, r14
     4ee:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4f0:	0f 2e       	mov	r0, r31
     4f2:	f3 ef       	ldi	r31, 0xF3	; 243
     4f4:	ef 2e       	mov	r14, r31
     4f6:	f1 2c       	mov	r15, r1
     4f8:	f0 2d       	mov	r31, r0
     4fa:	f7 01       	movw	r30, r14
     4fc:	10 81       	ld	r17, Z
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	9a 81       	ldd	r25, Y+2	; 0x02
     502:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     506:	1f 70       	andi	r17, 0x0F	; 15
     508:	80 7f       	andi	r24, 0xF0	; 240
     50a:	81 2b       	or	r24, r17
     50c:	f7 01       	movw	r30, r14
     50e:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     510:	0f 2e       	mov	r0, r31
     512:	f8 ef       	ldi	r31, 0xF8	; 248
     514:	ef 2e       	mov	r14, r31
     516:	f1 2c       	mov	r15, r1
     518:	f0 2d       	mov	r31, r0
     51a:	f7 01       	movw	r30, r14
     51c:	10 81       	ld	r17, Z
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     526:	88 27       	eor	r24, r24
     528:	9f 70       	andi	r25, 0x0F	; 15
     52a:	95 95       	asr	r25
     52c:	87 95       	ror	r24
     52e:	95 95       	asr	r25
     530:	87 95       	ror	r24
     532:	95 95       	asr	r25
     534:	87 95       	ror	r24
     536:	95 95       	asr	r25
     538:	87 95       	ror	r24
     53a:	1f 70       	andi	r17, 0x0F	; 15
     53c:	81 2b       	or	r24, r17
     53e:	f7 01       	movw	r30, r14
     540:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     542:	0f 2e       	mov	r0, r31
     544:	fd ef       	ldi	r31, 0xFD	; 253
     546:	ef 2e       	mov	r14, r31
     548:	f1 2c       	mov	r15, r1
     54a:	f0 2d       	mov	r31, r0
     54c:	f7 01       	movw	r30, r14
     54e:	10 81       	ld	r17, Z
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	9a 81       	ldd	r25, Y+2	; 0x02
     554:	0e 94 7d 00 	call	0xfa	; 0xfa <getValueArray>
     558:	88 27       	eor	r24, r24
     55a:	90 7f       	andi	r25, 0xF0	; 240
     55c:	1f 70       	andi	r17, 0x0F	; 15
     55e:	19 2b       	or	r17, r25
     560:	f7 01       	movw	r30, r14
     562:	10 83       	st	Z, r17
		
	}
	

}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	08 95       	ret

00000574 <printAt>:

void printAt(long num, int pos) {
     574:	8f 92       	push	r8
     576:	9f 92       	push	r9
     578:	af 92       	push	r10
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	4b 01       	movw	r8, r22
     58a:	5c 01       	movw	r10, r24
     58c:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     58e:	24 e6       	ldi	r18, 0x64	; 100
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	0e 94 9e 12 	call	0x253c	; 0x253c <__divmodsi4>
     59a:	0f 2e       	mov	r0, r31
     59c:	fa e0       	ldi	r31, 0x0A	; 10
     59e:	cf 2e       	mov	r12, r31
     5a0:	d1 2c       	mov	r13, r1
     5a2:	e1 2c       	mov	r14, r1
     5a4:	f1 2c       	mov	r15, r1
     5a6:	f0 2d       	mov	r31, r0
     5a8:	a7 01       	movw	r20, r14
     5aa:	96 01       	movw	r18, r12
     5ac:	0e 94 9e 12 	call	0x253c	; 0x253c <__divmodsi4>
     5b0:	be 01       	movw	r22, r28
     5b2:	80 e3       	ldi	r24, 0x30	; 48
     5b4:	82 0f       	add	r24, r18
     5b6:	0e 94 a6 00 	call	0x14c	; 0x14c <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     5ba:	21 96       	adiw	r28, 0x01	; 1
     5bc:	c5 01       	movw	r24, r10
     5be:	b4 01       	movw	r22, r8
     5c0:	a7 01       	movw	r20, r14
     5c2:	96 01       	movw	r18, r12
     5c4:	0e 94 9e 12 	call	0x253c	; 0x253c <__divmodsi4>
     5c8:	86 2f       	mov	r24, r22
     5ca:	be 01       	movw	r22, r28
     5cc:	80 5d       	subi	r24, 0xD0	; 208
     5ce:	0e 94 a6 00 	call	0x14c	; 0x14c <writeChar>
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	bf 90       	pop	r11
     5e0:	af 90       	pop	r10
     5e2:	9f 90       	pop	r9
     5e4:	8f 90       	pop	r8
     5e6:	08 95       	ret

000005e8 <Gui__init>:




void Gui__init() {
    LCD_Init();
     5e8:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
    button_init();
     5ec:	0e 94 69 00 	call	0xd2	; 0xd2 <button_init>
    LCDDR18 = 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
    printAt(0,0);
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	cb 01       	movw	r24, r22
     600:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
    printAt(0,4);
     604:	44 e0       	ldi	r20, 0x04	; 4
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	cb 01       	movw	r24, r22
     60e:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     612:	08 95       	ret

00000614 <readJoystick>:
    pp++;
    writeChar( num % 10 + '0', pp);
}

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
     614:	1f 9b       	sbis	0x03, 7	; 3
     616:	0b c0       	rjmp	.+22     	; 0x62e <readJoystick+0x1a>
        return 7;
    }else if((PINB & (1<<6))==0){ // 6 up
     618:	1e 9b       	sbis	0x03, 6	; 3
     61a:	0c c0       	rjmp	.+24     	; 0x634 <readJoystick+0x20>
        return 6;
    }else if((PINB & (1<<4))==0){ // 4 center
     61c:	1c 9b       	sbis	0x03, 4	; 3
     61e:	0d c0       	rjmp	.+26     	; 0x63a <readJoystick+0x26>
        return 4;
    }else if((PINE & (1<<2))==0){ // 2 left
     620:	62 9b       	sbis	0x0c, 2	; 12
     622:	0e c0       	rjmp	.+28     	; 0x640 <readJoystick+0x2c>
        return 2;
    }else if((PINE & (1<<3))==0){ // 3 right
     624:	63 9b       	sbis	0x0c, 3	; 12
     626:	0f c0       	rjmp	.+30     	; 0x646 <readJoystick+0x32>
        return 3;
    }else{
        return 0;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	08 95       	ret
    writeChar( num % 10 + '0', pp);
}

int readJoystick(void){
    if(PINB>>7==0){ // 7 down
        return 7;
     62e:	87 e0       	ldi	r24, 0x07	; 7
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	08 95       	ret
    }else if((PINB & (1<<6))==0){ // 6 up
        return 6;
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	08 95       	ret
    }else if((PINB & (1<<4))==0){ // 4 center
        return 4;
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	08 95       	ret
    }else if((PINE & (1<<2))==0){ // 2 left
        return 2;
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	08 95       	ret
    }else if((PINE & (1<<3))==0){ // 3 right
        return 3;
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	90 e0       	ldi	r25, 0x00	; 0
    }else{
        return 0;
    }
}
     64a:	08 95       	ret

0000064c <hold>:

void hold(guiObj* self){
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	ec 01       	movw	r28, r24
    self->hold = 1;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	99 8f       	std	Y+25, r25	; 0x19
     664:	88 8f       	std	Y+24, r24	; 0x18
    if(self->preValue == readJoystick()){
     666:	0e 89       	ldd	r16, Y+22	; 0x16
     668:	1f 89       	ldd	r17, Y+23	; 0x17
     66a:	0e 94 0a 03 	call	0x614	; 0x614 <readJoystick>
     66e:	08 17       	cp	r16, r24
     670:	19 07       	cpc	r17, r25
     672:	41 f5       	brne	.+80     	; 0x6c4 <hold+0x78>
        if(readJoystick() != 4){
     674:	0e 94 0a 03 	call	0x614	; 0x614 <readJoystick>
     678:	04 97       	sbiw	r24, 0x04	; 4
     67a:	89 f0       	breq	.+34     	; 0x69e <hold+0x52>
            ASYNC(self,updateGui, NULL);
     67c:	c1 2c       	mov	r12, r1
     67e:	d1 2c       	mov	r13, r1
     680:	0f 2e       	mov	r0, r31
     682:	fd e6       	ldi	r31, 0x6D	; 109
     684:	ef 2e       	mov	r14, r31
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	ff 2e       	mov	r15, r31
     68a:	f0 2d       	mov	r31, r0
     68c:	8e 01       	movw	r16, r28
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	a9 01       	movw	r20, r18
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	cb 01       	movw	r24, r22
     69a:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
        }
        
        AFTER(MSEC(200),self,hold,NULL);
     69e:	c1 2c       	mov	r12, r1
     6a0:	d1 2c       	mov	r13, r1
     6a2:	0f 2e       	mov	r0, r31
     6a4:	f6 e2       	ldi	r31, 0x26	; 38
     6a6:	ef 2e       	mov	r14, r31
     6a8:	f3 e0       	ldi	r31, 0x03	; 3
     6aa:	ff 2e       	mov	r15, r31
     6ac:	f0 2d       	mov	r31, r0
     6ae:	8e 01       	movw	r16, r28
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	a9 01       	movw	r20, r18
     6b6:	6a e6       	ldi	r22, 0x6A	; 106
     6b8:	78 e1       	ldi	r23, 0x18	; 24
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <hold+0x7c>
    }else{
        self->hold = 0;
     6c4:	19 8e       	std	Y+25, r1	; 0x19
     6c6:	18 8e       	std	Y+24, r1	; 0x18
    }
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	08 95       	ret

000006da <updateGui>:

void updateGui(guiObj* self){
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	ec 01       	movw	r28, r24

    int value = readJoystick();
     6ec:	0e 94 0a 03 	call	0x614	; 0x614 <readJoystick>
    self->preValue = value;
     6f0:	9f 8b       	std	Y+23, r25	; 0x17
     6f2:	8e 8b       	std	Y+22, r24	; 0x16
    if(self->debounce >= 1){
     6f4:	2a 8d       	ldd	r18, Y+26	; 0x1a
     6f6:	3b 8d       	ldd	r19, Y+27	; 0x1b
     6f8:	12 16       	cp	r1, r18
     6fa:	13 06       	cpc	r1, r19
     6fc:	0c f4       	brge	.+2      	; 0x700 <updateGui+0x26>
     6fe:	b8 c1       	rjmp	.+880    	; 0xa70 <updateGui+0x396>
        value = 0;
    }
    switch (value)
     700:	84 30       	cpi	r24, 0x04	; 4
     702:	91 05       	cpc	r25, r1
     704:	09 f4       	brne	.+2      	; 0x708 <updateGui+0x2e>
     706:	06 c1       	rjmp	.+524    	; 0x914 <updateGui+0x23a>
     708:	44 f4       	brge	.+16     	; 0x71a <updateGui+0x40>
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	91 05       	cpc	r25, r1
     70e:	09 f4       	brne	.+2      	; 0x712 <updateGui+0x38>
     710:	e5 c0       	rjmp	.+458    	; 0x8dc <updateGui+0x202>
     712:	03 97       	sbiw	r24, 0x03	; 3
     714:	09 f4       	brne	.+2      	; 0x718 <updateGui+0x3e>
     716:	ef c0       	rjmp	.+478    	; 0x8f6 <updateGui+0x21c>
     718:	ab c1       	rjmp	.+854    	; 0xa70 <updateGui+0x396>
     71a:	86 30       	cpi	r24, 0x06	; 6
     71c:	91 05       	cpc	r25, r1
     71e:	09 f4       	brne	.+2      	; 0x722 <updateGui+0x48>
     720:	6f c0       	rjmp	.+222    	; 0x800 <updateGui+0x126>
     722:	07 97       	sbiw	r24, 0x07	; 7
     724:	09 f0       	breq	.+2      	; 0x728 <updateGui+0x4e>
     726:	a4 c1       	rjmp	.+840    	; 0xa70 <updateGui+0x396>
    {
    case 7:  // down
        if(self->pos==0 && self->freq1 > 0){
     728:	88 85       	ldd	r24, Y+8	; 0x08
     72a:	99 85       	ldd	r25, Y+9	; 0x09
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	31 f5       	brne	.+76     	; 0x77c <updateGui+0xa2>
     730:	cc 84       	ldd	r12, Y+12	; 0x0c
     732:	dd 84       	ldd	r13, Y+13	; 0x0d
     734:	1c 14       	cp	r1, r12
     736:	1d 04       	cpc	r1, r13
     738:	0c f0       	brlt	.+2      	; 0x73c <updateGui+0x62>
     73a:	46 c0       	rjmp	.+140    	; 0x7c8 <updateGui+0xee>
            self->freq1--;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	c8 1a       	sub	r12, r24
     740:	d1 08       	sbc	r13, r1
     742:	dd 86       	std	Y+13, r13	; 0x0d
     744:	cc 86       	std	Y+12, r12	; 0x0c
            ASYNC(self->pulse1 , setFreq ,self->freq1);
     746:	0c 81       	ldd	r16, Y+4	; 0x04
     748:	1d 81       	ldd	r17, Y+5	; 0x05
     74a:	0f 2e       	mov	r0, r31
     74c:	ff ed       	ldi	r31, 0xDF	; 223
     74e:	ef 2e       	mov	r14, r31
     750:	f5 e0       	ldi	r31, 0x05	; 5
     752:	ff 2e       	mov	r15, r31
     754:	f0 2d       	mov	r31, r0
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	a9 01       	movw	r20, r18
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	cb 01       	movw	r24, r22
     762:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
            printAt(self->freq1,self->pos);
     766:	48 85       	ldd	r20, Y+8	; 0x08
     768:	59 85       	ldd	r21, Y+9	; 0x09
     76a:	6c 85       	ldd	r22, Y+12	; 0x0c
     76c:	7d 85       	ldd	r23, Y+13	; 0x0d
     76e:	07 2e       	mov	r0, r23
     770:	00 0c       	add	r0, r0
     772:	88 0b       	sbc	r24, r24
     774:	99 0b       	sbc	r25, r25
     776:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     77a:	26 c0       	rjmp	.+76     	; 0x7c8 <updateGui+0xee>
        }else if(self->pos==4 && self->freq2 > 0){
     77c:	04 97       	sbiw	r24, 0x04	; 4
     77e:	21 f5       	brne	.+72     	; 0x7c8 <updateGui+0xee>
     780:	ce 84       	ldd	r12, Y+14	; 0x0e
     782:	df 84       	ldd	r13, Y+15	; 0x0f
     784:	1c 14       	cp	r1, r12
     786:	1d 04       	cpc	r1, r13
     788:	fc f4       	brge	.+62     	; 0x7c8 <updateGui+0xee>
            self->freq2--;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	c8 1a       	sub	r12, r24
     78e:	d1 08       	sbc	r13, r1
     790:	df 86       	std	Y+15, r13	; 0x0f
     792:	ce 86       	std	Y+14, r12	; 0x0e
            ASYNC(self->pulse2 , setFreq ,self->freq2);
     794:	0e 81       	ldd	r16, Y+6	; 0x06
     796:	1f 81       	ldd	r17, Y+7	; 0x07
     798:	0f 2e       	mov	r0, r31
     79a:	ff ed       	ldi	r31, 0xDF	; 223
     79c:	ef 2e       	mov	r14, r31
     79e:	f5 e0       	ldi	r31, 0x05	; 5
     7a0:	ff 2e       	mov	r15, r31
     7a2:	f0 2d       	mov	r31, r0
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	a9 01       	movw	r20, r18
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	cb 01       	movw	r24, r22
     7b0:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
            printAt(self->freq2,self->pos);
     7b4:	48 85       	ldd	r20, Y+8	; 0x08
     7b6:	59 85       	ldd	r21, Y+9	; 0x09
     7b8:	6e 85       	ldd	r22, Y+14	; 0x0e
     7ba:	7f 85       	ldd	r23, Y+15	; 0x0f
     7bc:	07 2e       	mov	r0, r23
     7be:	00 0c       	add	r0, r0
     7c0:	88 0b       	sbc	r24, r24
     7c2:	99 0b       	sbc	r25, r25
     7c4:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        }
        self->debounce += 2;
     7c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7cc:	02 96       	adiw	r24, 0x02	; 2
     7ce:	9b 8f       	std	Y+27, r25	; 0x1b
     7d0:	8a 8f       	std	Y+26, r24	; 0x1a
        if(self->hold == 0){      
     7d2:	88 8d       	ldd	r24, Y+24	; 0x18
     7d4:	99 8d       	ldd	r25, Y+25	; 0x19
     7d6:	89 2b       	or	r24, r25
     7d8:	09 f0       	breq	.+2      	; 0x7dc <updateGui+0x102>
     7da:	54 c1       	rjmp	.+680    	; 0xa84 <updateGui+0x3aa>
            ASYNC(self, hold, NULL);   // starts hold cycle
     7dc:	c1 2c       	mov	r12, r1
     7de:	d1 2c       	mov	r13, r1
     7e0:	0f 2e       	mov	r0, r31
     7e2:	f6 e2       	ldi	r31, 0x26	; 38
     7e4:	ef 2e       	mov	r14, r31
     7e6:	f3 e0       	ldi	r31, 0x03	; 3
     7e8:	ff 2e       	mov	r15, r31
     7ea:	f0 2d       	mov	r31, r0
     7ec:	8e 01       	movw	r16, r28
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	a9 01       	movw	r20, r18
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	cb 01       	movw	r24, r22
     7fa:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
     7fe:	42 c1       	rjmp	.+644    	; 0xa84 <updateGui+0x3aa>
        }
        
        break;
    case 6:   //up
        if(self->pos==0 && self->freq1 < 99){
     800:	88 85       	ldd	r24, Y+8	; 0x08
     802:	99 85       	ldd	r25, Y+9	; 0x09
     804:	00 97       	sbiw	r24, 0x00	; 0
     806:	39 f5       	brne	.+78     	; 0x856 <updateGui+0x17c>
     808:	cc 84       	ldd	r12, Y+12	; 0x0c
     80a:	dd 84       	ldd	r13, Y+13	; 0x0d
     80c:	83 e6       	ldi	r24, 0x63	; 99
     80e:	c8 16       	cp	r12, r24
     810:	d1 04       	cpc	r13, r1
     812:	0c f0       	brlt	.+2      	; 0x816 <updateGui+0x13c>
     814:	47 c0       	rjmp	.+142    	; 0x8a4 <updateGui+0x1ca>
            self->freq1++;
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	c8 1a       	sub	r12, r24
     81a:	d8 0a       	sbc	r13, r24
     81c:	dd 86       	std	Y+13, r13	; 0x0d
     81e:	cc 86       	std	Y+12, r12	; 0x0c
            ASYNC(self->pulse1 , setFreq ,self->freq1);
     820:	0c 81       	ldd	r16, Y+4	; 0x04
     822:	1d 81       	ldd	r17, Y+5	; 0x05
     824:	0f 2e       	mov	r0, r31
     826:	ff ed       	ldi	r31, 0xDF	; 223
     828:	ef 2e       	mov	r14, r31
     82a:	f5 e0       	ldi	r31, 0x05	; 5
     82c:	ff 2e       	mov	r15, r31
     82e:	f0 2d       	mov	r31, r0
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	a9 01       	movw	r20, r18
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	cb 01       	movw	r24, r22
     83c:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
            printAt(self->freq1,self->pos);
     840:	48 85       	ldd	r20, Y+8	; 0x08
     842:	59 85       	ldd	r21, Y+9	; 0x09
     844:	6c 85       	ldd	r22, Y+12	; 0x0c
     846:	7d 85       	ldd	r23, Y+13	; 0x0d
     848:	07 2e       	mov	r0, r23
     84a:	00 0c       	add	r0, r0
     84c:	88 0b       	sbc	r24, r24
     84e:	99 0b       	sbc	r25, r25
     850:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     854:	27 c0       	rjmp	.+78     	; 0x8a4 <updateGui+0x1ca>
        }else if(self->pos==4 && self->freq2 < 99){
     856:	04 97       	sbiw	r24, 0x04	; 4
     858:	29 f5       	brne	.+74     	; 0x8a4 <updateGui+0x1ca>
     85a:	ce 84       	ldd	r12, Y+14	; 0x0e
     85c:	df 84       	ldd	r13, Y+15	; 0x0f
     85e:	83 e6       	ldi	r24, 0x63	; 99
     860:	c8 16       	cp	r12, r24
     862:	d1 04       	cpc	r13, r1
     864:	fc f4       	brge	.+62     	; 0x8a4 <updateGui+0x1ca>
            self->freq2++;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	c8 1a       	sub	r12, r24
     86a:	d8 0a       	sbc	r13, r24
     86c:	df 86       	std	Y+15, r13	; 0x0f
     86e:	ce 86       	std	Y+14, r12	; 0x0e
            ASYNC(self->pulse2 , setFreq ,self->freq2);
     870:	0e 81       	ldd	r16, Y+6	; 0x06
     872:	1f 81       	ldd	r17, Y+7	; 0x07
     874:	0f 2e       	mov	r0, r31
     876:	ff ed       	ldi	r31, 0xDF	; 223
     878:	ef 2e       	mov	r14, r31
     87a:	f5 e0       	ldi	r31, 0x05	; 5
     87c:	ff 2e       	mov	r15, r31
     87e:	f0 2d       	mov	r31, r0
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	a9 01       	movw	r20, r18
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	cb 01       	movw	r24, r22
     88c:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
            printAt(self->freq2,self->pos);
     890:	48 85       	ldd	r20, Y+8	; 0x08
     892:	59 85       	ldd	r21, Y+9	; 0x09
     894:	6e 85       	ldd	r22, Y+14	; 0x0e
     896:	7f 85       	ldd	r23, Y+15	; 0x0f
     898:	07 2e       	mov	r0, r23
     89a:	00 0c       	add	r0, r0
     89c:	88 0b       	sbc	r24, r24
     89e:	99 0b       	sbc	r25, r25
     8a0:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        }
        self->debounce += 2;
     8a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8a8:	02 96       	adiw	r24, 0x02	; 2
     8aa:	9b 8f       	std	Y+27, r25	; 0x1b
     8ac:	8a 8f       	std	Y+26, r24	; 0x1a
        if(self->hold == 0){
     8ae:	88 8d       	ldd	r24, Y+24	; 0x18
     8b0:	99 8d       	ldd	r25, Y+25	; 0x19
     8b2:	89 2b       	or	r24, r25
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <updateGui+0x1de>
     8b6:	e6 c0       	rjmp	.+460    	; 0xa84 <updateGui+0x3aa>
            ASYNC(self, hold, NULL);   // starts hold cycle
     8b8:	c1 2c       	mov	r12, r1
     8ba:	d1 2c       	mov	r13, r1
     8bc:	0f 2e       	mov	r0, r31
     8be:	f6 e2       	ldi	r31, 0x26	; 38
     8c0:	ef 2e       	mov	r14, r31
     8c2:	f3 e0       	ldi	r31, 0x03	; 3
     8c4:	ff 2e       	mov	r15, r31
     8c6:	f0 2d       	mov	r31, r0
     8c8:	8e 01       	movw	r16, r28
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	a9 01       	movw	r20, r18
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	cb 01       	movw	r24, r22
     8d6:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
     8da:	d4 c0       	rjmp	.+424    	; 0xa84 <updateGui+0x3aa>
        }
        break;
    case 2:  // left
        self->pos = 0;
     8dc:	19 86       	std	Y+9, r1	; 0x09
     8de:	18 86       	std	Y+8, r1	; 0x08
        LCDDR3 = 0;
     8e0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
        LCDDR18 = 1;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
        self->debounce += 2;
     8ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8ee:	02 96       	adiw	r24, 0x02	; 2
     8f0:	9b 8f       	std	Y+27, r25	; 0x1b
     8f2:	8a 8f       	std	Y+26, r24	; 0x1a
        break;
     8f4:	c7 c0       	rjmp	.+398    	; 0xa84 <updateGui+0x3aa>
    case 3:   // right
        self->pos = 4;
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	99 87       	std	Y+9, r25	; 0x09
     8fc:	88 87       	std	Y+8, r24	; 0x08
        LCDDR3 = 1;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
        LCDDR18 = 0;
     904:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
        self->debounce += 2;
     908:	8a 8d       	ldd	r24, Y+26	; 0x1a
     90a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     90c:	02 96       	adiw	r24, 0x02	; 2
     90e:	9b 8f       	std	Y+27, r25	; 0x1b
     910:	8a 8f       	std	Y+26, r24	; 0x1a
        break;
     912:	b8 c0       	rjmp	.+368    	; 0xa84 <updateGui+0x3aa>
    case 4:   // center
        if(self->pos == 0){
     914:	88 85       	ldd	r24, Y+8	; 0x08
     916:	99 85       	ldd	r25, Y+9	; 0x09
     918:	00 97       	sbiw	r24, 0x00	; 0
     91a:	09 f0       	breq	.+2      	; 0x91e <updateGui+0x244>
     91c:	4f c0       	rjmp	.+158    	; 0x9bc <updateGui+0x2e2>
            if(self->freq1 != 0){
     91e:	cc 84       	ldd	r12, Y+12	; 0x0c
     920:	dd 84       	ldd	r13, Y+13	; 0x0d
     922:	c1 14       	cp	r12, r1
     924:	d1 04       	cpc	r13, r1
     926:	49 f1       	breq	.+82     	; 0x97a <updateGui+0x2a0>
                ASYNC(self->pulse1,saveFreq, self->freq1); 
     928:	0c 81       	ldd	r16, Y+4	; 0x04
     92a:	1d 81       	ldd	r17, Y+5	; 0x05
     92c:	0f 2e       	mov	r0, r31
     92e:	f3 ee       	ldi	r31, 0xE3	; 227
     930:	ef 2e       	mov	r14, r31
     932:	f5 e0       	ldi	r31, 0x05	; 5
     934:	ff 2e       	mov	r15, r31
     936:	f0 2d       	mov	r31, r0
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	a9 01       	movw	r20, r18
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	cb 01       	movw	r24, r22
     944:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
                self->savedFreq1 = self->freq1;
     948:	8c 85       	ldd	r24, Y+12	; 0x0c
     94a:	9d 85       	ldd	r25, Y+13	; 0x0d
     94c:	99 8b       	std	Y+17, r25	; 0x11
     94e:	88 8b       	std	Y+16, r24	; 0x10
                ASYNC(self->pulse1,setFreq, 0);
     950:	0c 81       	ldd	r16, Y+4	; 0x04
     952:	1d 81       	ldd	r17, Y+5	; 0x05
     954:	c1 2c       	mov	r12, r1
     956:	d1 2c       	mov	r13, r1
     958:	0f 2e       	mov	r0, r31
     95a:	ff ed       	ldi	r31, 0xDF	; 223
     95c:	ef 2e       	mov	r14, r31
     95e:	f5 e0       	ldi	r31, 0x05	; 5
     960:	ff 2e       	mov	r15, r31
     962:	f0 2d       	mov	r31, r0
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	a9 01       	movw	r20, r18
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	cb 01       	movw	r24, r22
     970:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
                self->freq1 = 0;
     974:	1d 86       	std	Y+13, r1	; 0x0d
     976:	1c 86       	std	Y+12, r1	; 0x0c
     978:	16 c0       	rjmp	.+44     	; 0x9a6 <updateGui+0x2cc>
            }else{
                ASYNC(self->pulse1, setSaveFreq, NULL);
     97a:	0c 81       	ldd	r16, Y+4	; 0x04
     97c:	1d 81       	ldd	r17, Y+5	; 0x05
     97e:	c1 2c       	mov	r12, r1
     980:	d1 2c       	mov	r13, r1
     982:	0f 2e       	mov	r0, r31
     984:	f7 ee       	ldi	r31, 0xE7	; 231
     986:	ef 2e       	mov	r14, r31
     988:	f5 e0       	ldi	r31, 0x05	; 5
     98a:	ff 2e       	mov	r15, r31
     98c:	f0 2d       	mov	r31, r0
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	a9 01       	movw	r20, r18
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	cb 01       	movw	r24, r22
     99a:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
                self->freq1 = self->savedFreq1;
     99e:	88 89       	ldd	r24, Y+16	; 0x10
     9a0:	99 89       	ldd	r25, Y+17	; 0x11
     9a2:	9d 87       	std	Y+13, r25	; 0x0d
     9a4:	8c 87       	std	Y+12, r24	; 0x0c
                
            }
            printAt(self->freq1,self->pos);
     9a6:	48 85       	ldd	r20, Y+8	; 0x08
     9a8:	59 85       	ldd	r21, Y+9	; 0x09
     9aa:	6c 85       	ldd	r22, Y+12	; 0x0c
     9ac:	7d 85       	ldd	r23, Y+13	; 0x0d
     9ae:	07 2e       	mov	r0, r23
     9b0:	00 0c       	add	r0, r0
     9b2:	88 0b       	sbc	r24, r24
     9b4:	99 0b       	sbc	r25, r25
     9b6:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
     9ba:	51 c0       	rjmp	.+162    	; 0xa5e <updateGui+0x384>
        }else if(self->pos == 4){
     9bc:	04 97       	sbiw	r24, 0x04	; 4
     9be:	09 f0       	breq	.+2      	; 0x9c2 <updateGui+0x2e8>
     9c0:	4e c0       	rjmp	.+156    	; 0xa5e <updateGui+0x384>
            if(self->freq2 != 0){
     9c2:	ce 84       	ldd	r12, Y+14	; 0x0e
     9c4:	df 84       	ldd	r13, Y+15	; 0x0f
     9c6:	c1 14       	cp	r12, r1
     9c8:	d1 04       	cpc	r13, r1
     9ca:	49 f1       	breq	.+82     	; 0xa1e <updateGui+0x344>
                ASYNC(self->pulse2,saveFreq, self->freq2); 
     9cc:	0e 81       	ldd	r16, Y+6	; 0x06
     9ce:	1f 81       	ldd	r17, Y+7	; 0x07
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f3 ee       	ldi	r31, 0xE3	; 227
     9d4:	ef 2e       	mov	r14, r31
     9d6:	f5 e0       	ldi	r31, 0x05	; 5
     9d8:	ff 2e       	mov	r15, r31
     9da:	f0 2d       	mov	r31, r0
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	a9 01       	movw	r20, r18
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	cb 01       	movw	r24, r22
     9e8:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
                self->savedFreq2 = self->freq2;
     9ec:	8e 85       	ldd	r24, Y+14	; 0x0e
     9ee:	9f 85       	ldd	r25, Y+15	; 0x0f
     9f0:	9b 8b       	std	Y+19, r25	; 0x13
     9f2:	8a 8b       	std	Y+18, r24	; 0x12
                ASYNC(self->pulse2,setFreq, 0);
     9f4:	0e 81       	ldd	r16, Y+6	; 0x06
     9f6:	1f 81       	ldd	r17, Y+7	; 0x07
     9f8:	c1 2c       	mov	r12, r1
     9fa:	d1 2c       	mov	r13, r1
     9fc:	0f 2e       	mov	r0, r31
     9fe:	ff ed       	ldi	r31, 0xDF	; 223
     a00:	ef 2e       	mov	r14, r31
     a02:	f5 e0       	ldi	r31, 0x05	; 5
     a04:	ff 2e       	mov	r15, r31
     a06:	f0 2d       	mov	r31, r0
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	a9 01       	movw	r20, r18
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	cb 01       	movw	r24, r22
     a14:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
                self->freq2 = 0;
     a18:	1f 86       	std	Y+15, r1	; 0x0f
     a1a:	1e 86       	std	Y+14, r1	; 0x0e
     a1c:	16 c0       	rjmp	.+44     	; 0xa4a <updateGui+0x370>
            }else{
                ASYNC(self->pulse2, setSaveFreq, NULL);
     a1e:	0e 81       	ldd	r16, Y+6	; 0x06
     a20:	1f 81       	ldd	r17, Y+7	; 0x07
     a22:	c1 2c       	mov	r12, r1
     a24:	d1 2c       	mov	r13, r1
     a26:	0f 2e       	mov	r0, r31
     a28:	f7 ee       	ldi	r31, 0xE7	; 231
     a2a:	ef 2e       	mov	r14, r31
     a2c:	f5 e0       	ldi	r31, 0x05	; 5
     a2e:	ff 2e       	mov	r15, r31
     a30:	f0 2d       	mov	r31, r0
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	a9 01       	movw	r20, r18
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	cb 01       	movw	r24, r22
     a3e:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
                self->freq2 = self->savedFreq2;
     a42:	8a 89       	ldd	r24, Y+18	; 0x12
     a44:	9b 89       	ldd	r25, Y+19	; 0x13
     a46:	9f 87       	std	Y+15, r25	; 0x0f
     a48:	8e 87       	std	Y+14, r24	; 0x0e
            }
            printAt(self->freq2,self->pos);
     a4a:	48 85       	ldd	r20, Y+8	; 0x08
     a4c:	59 85       	ldd	r21, Y+9	; 0x09
     a4e:	6e 85       	ldd	r22, Y+14	; 0x0e
     a50:	7f 85       	ldd	r23, Y+15	; 0x0f
     a52:	07 2e       	mov	r0, r23
     a54:	00 0c       	add	r0, r0
     a56:	88 0b       	sbc	r24, r24
     a58:	99 0b       	sbc	r25, r25
     a5a:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        }
        printAt(4,2);
     a5e:	42 e0       	ldi	r20, 0x02	; 2
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	64 e0       	ldi	r22, 0x04	; 4
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        break;
     a6e:	0a c0       	rjmp	.+20     	; 0xa84 <updateGui+0x3aa>
    default:
       
        self->debounce = 0;
     a70:	1b 8e       	std	Y+27, r1	; 0x1b
     a72:	1a 8e       	std	Y+26, r1	; 0x1a
        
        printAt(2,2);
     a74:	42 e0       	ldi	r20, 0x02	; 2
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	62 e0       	ldi	r22, 0x02	; 2
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 ba 02 	call	0x574	; 0x574 <printAt>
        break;
    }
    
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	08 95       	ret

00000a96 <main>:


int main(void)
{

    Gui__init();
     a96:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Gui__init>
    return TINYTIMBER(&mainObject, run, NULL);
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	6d e0       	ldi	r22, 0x0D	; 13
     aa0:	76 e0       	ldi	r23, 0x06	; 6
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <tinytimber>
    
}
     aaa:	08 95       	ret

00000aac <write>:
     aac:	8e b1       	in	r24, 0x0e	; 14
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	06 2e       	mov	r0, r22
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <write+0xc>
     ab4:	95 95       	asr	r25
     ab6:	87 95       	ror	r24
     ab8:	0a 94       	dec	r0
     aba:	e2 f7       	brpl	.-8      	; 0xab4 <write+0x8>
     abc:	80 ff       	sbrs	r24, 0
     abe:	0c c0       	rjmp	.+24     	; 0xad8 <write+0x2c>
     ac0:	2e b1       	in	r18, 0x0e	; 14
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <write+0x20>
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	6a 95       	dec	r22
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <write+0x1c>
     ad0:	80 95       	com	r24
     ad2:	82 23       	and	r24, r18
     ad4:	8e b9       	out	0x0e, r24	; 14
     ad6:	0a c0       	rjmp	.+20     	; 0xaec <write+0x40>
     ad8:	2e b1       	in	r18, 0x0e	; 14
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <write+0x38>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	6a 95       	dec	r22
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <write+0x34>
     ae8:	82 2b       	or	r24, r18
     aea:	8e b9       	out	0x0e, r24	; 14
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	08 95       	ret

00000af2 <cycle>:
void decFreq(pulseGenerator* self){
    self->freq--;
}
int getFreq(pulseGenerator* self){
    return self->freq;
}
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
     b04:	88 85       	ldd	r24, Y+8	; 0x08
     b06:	99 85       	ldd	r25, Y+9	; 0x09
     b08:	89 2b       	or	r24, r25
     b0a:	f1 f1       	breq	.+124    	; 0xb88 <cycle+0x96>
     b0c:	ce 80       	ldd	r12, Y+6	; 0x06
     b0e:	df 80       	ldd	r13, Y+7	; 0x07
     b10:	0c 81       	ldd	r16, Y+4	; 0x04
     b12:	1d 81       	ldd	r17, Y+5	; 0x05
     b14:	0f 2e       	mov	r0, r31
     b16:	f6 e5       	ldi	r31, 0x56	; 86
     b18:	ef 2e       	mov	r14, r31
     b1a:	f5 e0       	ldi	r31, 0x05	; 5
     b1c:	ff 2e       	mov	r15, r31
     b1e:	f0 2d       	mov	r31, r0
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	a9 01       	movw	r20, r18
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	cb 01       	movw	r24, r22
     b2c:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
     b30:	68 85       	ldd	r22, Y+8	; 0x08
     b32:	79 85       	ldd	r23, Y+9	; 0x09
     b34:	84 ef       	ldi	r24, 0xF4	; 244
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 8a 12 	call	0x2514	; 0x2514 <__divmodhi4>
     b3c:	2d e7       	ldi	r18, 0x7D	; 125
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	db 01       	movw	r26, r22
     b42:	0e 94 c3 12 	call	0x2586	; 0x2586 <__usmulhisi3>
     b46:	8b 01       	movw	r16, r22
     b48:	9c 01       	movw	r18, r24
     b4a:	99 23       	and	r25, r25
     b4c:	24 f4       	brge	.+8      	; 0xb56 <cycle+0x64>
     b4e:	0d 5f       	subi	r16, 0xFD	; 253
     b50:	1f 4f       	sbci	r17, 0xFF	; 255
     b52:	2f 4f       	sbci	r18, 0xFF	; 255
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	c9 01       	movw	r24, r18
     b58:	b8 01       	movw	r22, r16
     b5a:	95 95       	asr	r25
     b5c:	87 95       	ror	r24
     b5e:	77 95       	ror	r23
     b60:	67 95       	ror	r22
     b62:	95 95       	asr	r25
     b64:	87 95       	ror	r24
     b66:	77 95       	ror	r23
     b68:	67 95       	ror	r22
     b6a:	c1 2c       	mov	r12, r1
     b6c:	d1 2c       	mov	r13, r1
     b6e:	0f 2e       	mov	r0, r31
     b70:	f9 e7       	ldi	r31, 0x79	; 121
     b72:	ef 2e       	mov	r14, r31
     b74:	f5 e0       	ldi	r31, 0x05	; 5
     b76:	ff 2e       	mov	r15, r31
     b78:	f0 2d       	mov	r31, r0
     b7a:	8e 01       	movw	r16, r28
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	a9 01       	movw	r20, r18
     b82:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
     b86:	12 c0       	rjmp	.+36     	; 0xbac <cycle+0xba>
     b88:	c1 2c       	mov	r12, r1
     b8a:	d1 2c       	mov	r13, r1
     b8c:	0f 2e       	mov	r0, r31
     b8e:	f9 e7       	ldi	r31, 0x79	; 121
     b90:	ef 2e       	mov	r14, r31
     b92:	f5 e0       	ldi	r31, 0x05	; 5
     b94:	ff 2e       	mov	r15, r31
     b96:	f0 2d       	mov	r31, r0
     b98:	8e 01       	movw	r16, r28
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	a9 01       	movw	r20, r18
     ba0:	69 e0       	ldi	r22, 0x09	; 9
     ba2:	7d e3       	ldi	r23, 0x3D	; 61
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	cf 90       	pop	r12
     bbc:	08 95       	ret

00000bbe <setFreq>:
void setFreq(pulseGenerator* self, int freq){
    self->freq = freq;
     bbe:	fc 01       	movw	r30, r24
     bc0:	71 87       	std	Z+9, r23	; 0x09
     bc2:	60 87       	std	Z+8, r22	; 0x08
     bc4:	08 95       	ret

00000bc6 <saveFreq>:
}
void saveFreq(pulseGenerator* self, int freq){
    self->savedFreq = freq;
     bc6:	fc 01       	movw	r30, r24
     bc8:	73 87       	std	Z+11, r23	; 0x0b
     bca:	62 87       	std	Z+10, r22	; 0x0a
     bcc:	08 95       	ret

00000bce <setSaveFreq>:
}
void setSaveFreq(pulseGenerator* self){
    self->freq = self->savedFreq;
     bce:	fc 01       	movw	r30, r24
     bd0:	22 85       	ldd	r18, Z+10	; 0x0a
     bd2:	33 85       	ldd	r19, Z+11	; 0x0b
     bd4:	31 87       	std	Z+9, r19	; 0x09
     bd6:	20 87       	std	Z+8, r18	; 0x08
     bd8:	08 95       	ret

00000bda <interupts>:
    ASYNC(self->pulse1, cycle, NULL);
    ASYNC(self->pulse2, cycle, NULL);
}


void interupts(runObj* self){
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
    ASYNC(self->gui, updateGui, NULL);
     be6:	fc 01       	movw	r30, r24
     be8:	02 85       	ldd	r16, Z+10	; 0x0a
     bea:	13 85       	ldd	r17, Z+11	; 0x0b
     bec:	c1 2c       	mov	r12, r1
     bee:	d1 2c       	mov	r13, r1
     bf0:	0f 2e       	mov	r0, r31
     bf2:	fd e6       	ldi	r31, 0x6D	; 109
     bf4:	ef 2e       	mov	r14, r31
     bf6:	f3 e0       	ldi	r31, 0x03	; 3
     bf8:	ff 2e       	mov	r15, r31
     bfa:	f0 2d       	mov	r31, r0
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	a9 01       	movw	r20, r18
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	cb 01       	movw	r24, r22
     c08:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
}
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	cf 90       	pop	r12
     c18:	08 95       	ret

00000c1a <run>:

#include "run.h"



void run(runObj* self){
     c1a:	cf 92       	push	r12
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
    INSTALL(self, interupts, IRQ_PCINT0);
     c2c:	41 e0       	ldi	r20, 0x01	; 1
     c2e:	6d ee       	ldi	r22, 0xED	; 237
     c30:	75 e0       	ldi	r23, 0x05	; 5
     c32:	0e 94 54 12 	call	0x24a8	; 0x24a8 <install>
    INSTALL(self, interupts, IRQ_PCINT1);
     c36:	42 e0       	ldi	r20, 0x02	; 2
     c38:	6d ee       	ldi	r22, 0xED	; 237
     c3a:	75 e0       	ldi	r23, 0x05	; 5
     c3c:	ce 01       	movw	r24, r28
     c3e:	0e 94 54 12 	call	0x24a8	; 0x24a8 <install>

    ASYNC(self->pulse1, cycle, NULL);
     c42:	0e 81       	ldd	r16, Y+6	; 0x06
     c44:	1f 81       	ldd	r17, Y+7	; 0x07
     c46:	c1 2c       	mov	r12, r1
     c48:	d1 2c       	mov	r13, r1
     c4a:	0f 2e       	mov	r0, r31
     c4c:	f9 e7       	ldi	r31, 0x79	; 121
     c4e:	ef 2e       	mov	r14, r31
     c50:	f5 e0       	ldi	r31, 0x05	; 5
     c52:	ff 2e       	mov	r15, r31
     c54:	f0 2d       	mov	r31, r0
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	a9 01       	movw	r20, r18
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	cb 01       	movw	r24, r22
     c62:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
    ASYNC(self->pulse2, cycle, NULL);
     c66:	08 85       	ldd	r16, Y+8	; 0x08
     c68:	19 85       	ldd	r17, Y+9	; 0x09
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	a9 01       	movw	r20, r18
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	cb 01       	movw	r24, r22
     c76:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	08 95       	ret

00000c8c <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	00 d0       	rcall	.+0      	; 0xc92 <initialize+0x6>
     c92:	00 d0       	rcall	.+0      	; 0xc94 <initialize+0x8>
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	8f e3       	ldi	r24, 0x3F	; 63
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	2f e1       	ldi	r18, 0x1F	; 31
     c9e:	33 e0       	ldi	r19, 0x03	; 3
     ca0:	fc 01       	movw	r30, r24
     ca2:	70 97       	sbiw	r30, 0x10	; 16
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	80 83       	st	Z, r24
     ca8:	40 96       	adiw	r24, 0x10	; 16
     caa:	82 17       	cp	r24, r18
     cac:	93 07       	cpc	r25, r19
     cae:	c1 f7       	brne	.-16     	; 0xca0 <initialize+0x14>
     cb0:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <messages+0xe1>
     cb4:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <messages+0xe0>
     cb8:	ea e7       	ldi	r30, 0x7A	; 122
     cba:	f1 e0       	ldi	r31, 0x01	; 1
     cbc:	87 e9       	ldi	r24, 0x97	; 151
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
     cc4:	84 eb       	ldi	r24, 0xB4	; 180
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	96 8f       	std	Z+30, r25	; 0x1e
     cca:	85 8f       	std	Z+29, r24	; 0x1d
     ccc:	a1 ed       	ldi	r26, 0xD1	; 209
     cce:	b1 e0       	ldi	r27, 0x01	; 1
     cd0:	b3 af       	std	Z+59, r27	; 0x3b
     cd2:	a2 af       	std	Z+58, r26	; 0x3a
     cd4:	1d 92       	st	X+, r1
     cd6:	1c 92       	st	X, r1
     cd8:	fa 83       	std	Y+2, r31	; 0x02
     cda:	e9 83       	std	Y+1, r30	; 0x01
     cdc:	eb e7       	ldi	r30, 0x7B	; 123
     cde:	f3 e0       	ldi	r31, 0x03	; 3
     ce0:	fc 83       	std	Y+4, r31	; 0x04
     ce2:	eb 83       	std	Y+3, r30	; 0x03
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	06 96       	adiw	r24, 0x06	; 6
     cea:	0e 94 0f 13 	call	0x261e	; 0x261e <setjmp>
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	e9 81       	ldd	r30, Y+1	; 0x01
     cf4:	fa 81       	ldd	r31, Y+2	; 0x02
     cf6:	97 8b       	std	Z+23, r25	; 0x17
     cf8:	86 8b       	std	Z+22, r24	; 0x16
     cfa:	91 8f       	std	Z+25, r25	; 0x19
     cfc:	80 8f       	std	Z+24, r24	; 0x18
     cfe:	86 ee       	ldi	r24, 0xE6	; 230
     d00:	91 e1       	ldi	r25, 0x11	; 17
     d02:	94 8f       	std	Z+28, r25	; 0x1c
     d04:	83 8f       	std	Z+27, r24	; 0x1b
     d06:	15 82       	std	Z+5, r1	; 0x05
     d08:	14 82       	std	Z+4, r1	; 0x04
     d0a:	7d 96       	adiw	r30, 0x1d	; 29
     d0c:	fa 83       	std	Y+2, r31	; 0x02
     d0e:	e9 83       	std	Y+1, r30	; 0x01
     d10:	eb 81       	ldd	r30, Y+3	; 0x03
     d12:	fc 81       	ldd	r31, Y+4	; 0x04
     d14:	e0 5a       	subi	r30, 0xA0	; 160
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	fc 83       	std	Y+4, r31	; 0x04
     d1a:	eb 83       	std	Y+3, r30	; 0x03
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	8e 5e       	subi	r24, 0xEE	; 238
     d22:	91 40       	sbci	r25, 0x01	; 1
     d24:	f9 f6       	brne	.-66     	; 0xce4 <initialize+0x58>
     d26:	e2 e1       	ldi	r30, 0x12	; 18
     d28:	f2 e0       	ldi	r31, 0x02	; 2
     d2a:	11 82       	std	Z+1, r1	; 0x01
     d2c:	10 82       	st	Z, r1
     d2e:	15 82       	std	Z+5, r1	; 0x05
     d30:	14 82       	std	Z+4, r1	; 0x04
     d32:	13 82       	std	Z+3, r1	; 0x03
     d34:	12 82       	std	Z+2, r1	; 0x02
     d36:	e1 e6       	ldi	r30, 0x61	; 97
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 e8       	ldi	r24, 0x80	; 128
     d3c:	80 83       	st	Z, r24
     d3e:	10 82       	st	Z, r1
     d40:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d44:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <dispatch>:
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	00 d0       	rcall	.+0      	; 0xd68 <dispatch+0x6>
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <current>
     d74:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <current+0x1>
     d78:	06 96       	adiw	r24, 0x06	; 6
     d7a:	0e 94 0f 13 	call	0x261e	; 0x261e <setjmp>
     d7e:	89 2b       	or	r24, r25
     d80:	59 f4       	brne	.+22     	; 0xd98 <dispatch+0x36>
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <current+0x1>
     d8a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <current>
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	06 96       	adiw	r24, 0x06	; 6
     d94:	0e 94 2f 13 	call	0x265e	; 0x265e <longjmp>
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <schedule>:
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <msgQ>
     dae:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <msgQ+0x1>
     db2:	30 97       	sbiw	r30, 0x00	; 0
     db4:	61 f1       	breq	.+88     	; 0xe0e <schedule+0x6c>
     db6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <threadPool>
     dba:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <threadPool+0x1>
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	31 f1       	breq	.+76     	; 0xe0e <schedule+0x6c>
     dc2:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <activeStack>
     dc6:	d0 91 43 01 	lds	r29, 0x0143	; 0x800143 <activeStack+0x1>
     dca:	aa 81       	ldd	r26, Y+2	; 0x02
     dcc:	bb 81       	ldd	r27, Y+3	; 0x03
     dce:	10 97       	sbiw	r26, 0x00	; 0
     dd0:	79 f0       	breq	.+30     	; 0xdf0 <schedule+0x4e>
     dd2:	46 81       	ldd	r20, Z+6	; 0x06
     dd4:	57 81       	ldd	r21, Z+7	; 0x07
     dd6:	60 85       	ldd	r22, Z+8	; 0x08
     dd8:	71 85       	ldd	r23, Z+9	; 0x09
     dda:	16 96       	adiw	r26, 0x06	; 6
     ddc:	0d 91       	ld	r16, X+
     dde:	1d 91       	ld	r17, X+
     de0:	2d 91       	ld	r18, X+
     de2:	3c 91       	ld	r19, X
     de4:	19 97       	sbiw	r26, 0x09	; 9
     de6:	40 1b       	sub	r20, r16
     de8:	51 0b       	sbc	r21, r17
     dea:	62 0b       	sbc	r22, r18
     dec:	73 0b       	sbc	r23, r19
     dee:	7a f4       	brpl	.+30     	; 0xe0e <schedule+0x6c>
     df0:	fc 01       	movw	r30, r24
     df2:	20 81       	ld	r18, Z
     df4:	31 81       	ldd	r19, Z+1	; 0x01
     df6:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <threadPool+0x1>
     dfa:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <threadPool>
     dfe:	d1 83       	std	Z+1, r29	; 0x01
     e00:	c0 83       	st	Z, r28
     e02:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <activeStack+0x1>
     e06:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <activeStack>
     e0a:	0e 94 b1 06 	call	0xd62	; 0xd62 <dispatch>
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <__vector_1>:
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	2f 93       	push	r18
     e24:	3f 93       	push	r19
     e26:	4f 93       	push	r20
     e28:	5f 93       	push	r21
     e2a:	6f 93       	push	r22
     e2c:	7f 93       	push	r23
     e2e:	8f 93       	push	r24
     e30:	9f 93       	push	r25
     e32:	af 93       	push	r26
     e34:	bf 93       	push	r27
     e36:	ef 93       	push	r30
     e38:	ff 93       	push	r31
     e3a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
     e3e:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
     e42:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e46:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e4a:	c9 01       	movw	r24, r18
     e4c:	03 2e       	mov	r0, r19
     e4e:	00 0c       	add	r0, r0
     e50:	aa 0b       	sbc	r26, r26
     e52:	bb 0b       	sbc	r27, r27
     e54:	dc 01       	movw	r26, r24
     e56:	99 27       	eor	r25, r25
     e58:	88 27       	eor	r24, r24
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	84 2b       	or	r24, r20
     e60:	95 2b       	or	r25, r21
     e62:	a6 2b       	or	r26, r22
     e64:	b7 2b       	or	r27, r23
     e66:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     e6a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     e6e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     e72:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     e76:	b0 9b       	sbis	0x16, 0	; 22
     e78:	1b c0       	rjmp	.+54     	; 0xeb0 <__vector_1+0x98>
     e7a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e7e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e82:	c9 01       	movw	r24, r18
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	09 2e       	mov	r0, r25
     e88:	00 0c       	add	r0, r0
     e8a:	aa 0b       	sbc	r26, r26
     e8c:	bb 0b       	sbc	r27, r27
     e8e:	dc 01       	movw	r26, r24
     e90:	99 27       	eor	r25, r25
     e92:	88 27       	eor	r24, r24
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	84 2b       	or	r24, r20
     e9a:	95 2b       	or	r25, r21
     e9c:	a6 2b       	or	r26, r22
     e9e:	b7 2b       	or	r27, r23
     ea0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     ea4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     ea8:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     eac:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     eb0:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable>
     eb4:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x1>
     eb8:	30 97       	sbiw	r30, 0x00	; 0
     eba:	39 f0       	breq	.+14     	; 0xeca <__vector_1+0xb2>
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable>
     ec4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x1>
     ec8:	09 95       	icall
     eca:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	bf 91       	pop	r27
     ed4:	af 91       	pop	r26
     ed6:	9f 91       	pop	r25
     ed8:	8f 91       	pop	r24
     eda:	7f 91       	pop	r23
     edc:	6f 91       	pop	r22
     ede:	5f 91       	pop	r21
     ee0:	4f 91       	pop	r20
     ee2:	3f 91       	pop	r19
     ee4:	2f 91       	pop	r18
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	1f 90       	pop	r1
     eee:	18 95       	reti

00000ef0 <__vector_2>:
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	2f 93       	push	r18
     efc:	3f 93       	push	r19
     efe:	4f 93       	push	r20
     f00:	5f 93       	push	r21
     f02:	6f 93       	push	r22
     f04:	7f 93       	push	r23
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
     f16:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
     f1a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f1e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f22:	c9 01       	movw	r24, r18
     f24:	03 2e       	mov	r0, r19
     f26:	00 0c       	add	r0, r0
     f28:	aa 0b       	sbc	r26, r26
     f2a:	bb 0b       	sbc	r27, r27
     f2c:	dc 01       	movw	r26, r24
     f2e:	99 27       	eor	r25, r25
     f30:	88 27       	eor	r24, r24
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	84 2b       	or	r24, r20
     f38:	95 2b       	or	r25, r21
     f3a:	a6 2b       	or	r26, r22
     f3c:	b7 2b       	or	r27, r23
     f3e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     f42:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     f46:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     f4a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     f4e:	b0 9b       	sbis	0x16, 0	; 22
     f50:	1b c0       	rjmp	.+54     	; 0xf88 <__vector_2+0x98>
     f52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f5a:	c9 01       	movw	r24, r18
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	09 2e       	mov	r0, r25
     f60:	00 0c       	add	r0, r0
     f62:	aa 0b       	sbc	r26, r26
     f64:	bb 0b       	sbc	r27, r27
     f66:	dc 01       	movw	r26, r24
     f68:	99 27       	eor	r25, r25
     f6a:	88 27       	eor	r24, r24
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	84 2b       	or	r24, r20
     f72:	95 2b       	or	r25, r21
     f74:	a6 2b       	or	r26, r22
     f76:	b7 2b       	or	r27, r23
     f78:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     f7c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     f80:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     f84:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     f88:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x2>
     f8c:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x3>
     f90:	30 97       	sbiw	r30, 0x00	; 0
     f92:	39 f0       	breq	.+14     	; 0xfa2 <__vector_2+0xb2>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x2>
     f9c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x3>
     fa0:	09 95       	icall
     fa2:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
     fa6:	ff 91       	pop	r31
     fa8:	ef 91       	pop	r30
     faa:	bf 91       	pop	r27
     fac:	af 91       	pop	r26
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	7f 91       	pop	r23
     fb4:	6f 91       	pop	r22
     fb6:	5f 91       	pop	r21
     fb8:	4f 91       	pop	r20
     fba:	3f 91       	pop	r19
     fbc:	2f 91       	pop	r18
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_3>:
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
     fea:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
     fee:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
     ff2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ff6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ffa:	c9 01       	movw	r24, r18
     ffc:	03 2e       	mov	r0, r19
     ffe:	00 0c       	add	r0, r0
    1000:	aa 0b       	sbc	r26, r26
    1002:	bb 0b       	sbc	r27, r27
    1004:	dc 01       	movw	r26, r24
    1006:	99 27       	eor	r25, r25
    1008:	88 27       	eor	r24, r24
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	84 2b       	or	r24, r20
    1010:	95 2b       	or	r25, r21
    1012:	a6 2b       	or	r26, r22
    1014:	b7 2b       	or	r27, r23
    1016:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    101a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    101e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1022:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1026:	b0 9b       	sbis	0x16, 0	; 22
    1028:	1b c0       	rjmp	.+54     	; 0x1060 <__vector_3+0x98>
    102a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    102e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1032:	c9 01       	movw	r24, r18
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	09 2e       	mov	r0, r25
    1038:	00 0c       	add	r0, r0
    103a:	aa 0b       	sbc	r26, r26
    103c:	bb 0b       	sbc	r27, r27
    103e:	dc 01       	movw	r26, r24
    1040:	99 27       	eor	r25, r25
    1042:	88 27       	eor	r24, r24
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	84 2b       	or	r24, r20
    104a:	95 2b       	or	r25, r21
    104c:	a6 2b       	or	r26, r22
    104e:	b7 2b       	or	r27, r23
    1050:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1054:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1058:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    105c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1060:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x4>
    1064:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x5>
    1068:	30 97       	sbiw	r30, 0x00	; 0
    106a:	39 f0       	breq	.+14     	; 0x107a <__vector_3+0xb2>
    106c:	62 e0       	ldi	r22, 0x02	; 2
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x4>
    1074:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x5>
    1078:	09 95       	icall
    107a:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    107e:	ff 91       	pop	r31
    1080:	ef 91       	pop	r30
    1082:	bf 91       	pop	r27
    1084:	af 91       	pop	r26
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	7f 91       	pop	r23
    108c:	6f 91       	pop	r22
    108e:	5f 91       	pop	r21
    1090:	4f 91       	pop	r20
    1092:	3f 91       	pop	r19
    1094:	2f 91       	pop	r18
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	0f 90       	pop	r0
    109c:	1f 90       	pop	r1
    109e:	18 95       	reti

000010a0 <__vector_4>:
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	4f 93       	push	r20
    10b0:	5f 93       	push	r21
    10b2:	6f 93       	push	r22
    10b4:	7f 93       	push	r23
    10b6:	8f 93       	push	r24
    10b8:	9f 93       	push	r25
    10ba:	af 93       	push	r26
    10bc:	bf 93       	push	r27
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
    10c2:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    10c6:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    10ca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10ce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10d2:	c9 01       	movw	r24, r18
    10d4:	03 2e       	mov	r0, r19
    10d6:	00 0c       	add	r0, r0
    10d8:	aa 0b       	sbc	r26, r26
    10da:	bb 0b       	sbc	r27, r27
    10dc:	dc 01       	movw	r26, r24
    10de:	99 27       	eor	r25, r25
    10e0:	88 27       	eor	r24, r24
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	84 2b       	or	r24, r20
    10e8:	95 2b       	or	r25, r21
    10ea:	a6 2b       	or	r26, r22
    10ec:	b7 2b       	or	r27, r23
    10ee:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    10f2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    10f6:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    10fa:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    10fe:	b0 9b       	sbis	0x16, 0	; 22
    1100:	1b c0       	rjmp	.+54     	; 0x1138 <__vector_4+0x98>
    1102:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1106:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    110a:	c9 01       	movw	r24, r18
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	09 2e       	mov	r0, r25
    1110:	00 0c       	add	r0, r0
    1112:	aa 0b       	sbc	r26, r26
    1114:	bb 0b       	sbc	r27, r27
    1116:	dc 01       	movw	r26, r24
    1118:	99 27       	eor	r25, r25
    111a:	88 27       	eor	r24, r24
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	84 2b       	or	r24, r20
    1122:	95 2b       	or	r25, r21
    1124:	a6 2b       	or	r26, r22
    1126:	b7 2b       	or	r27, r23
    1128:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    112c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1130:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1134:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1138:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x6>
    113c:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x7>
    1140:	30 97       	sbiw	r30, 0x00	; 0
    1142:	39 f0       	breq	.+14     	; 0x1152 <__vector_4+0xb2>
    1144:	63 e0       	ldi	r22, 0x03	; 3
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x6>
    114c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x7>
    1150:	09 95       	icall
    1152:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <__vector_5>:
    1178:	1f 92       	push	r1
    117a:	0f 92       	push	r0
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	2f 93       	push	r18
    1184:	3f 93       	push	r19
    1186:	4f 93       	push	r20
    1188:	5f 93       	push	r21
    118a:	6f 93       	push	r22
    118c:	7f 93       	push	r23
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	af 93       	push	r26
    1194:	bf 93       	push	r27
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
    119a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    119e:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    11a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11aa:	c9 01       	movw	r24, r18
    11ac:	03 2e       	mov	r0, r19
    11ae:	00 0c       	add	r0, r0
    11b0:	aa 0b       	sbc	r26, r26
    11b2:	bb 0b       	sbc	r27, r27
    11b4:	dc 01       	movw	r26, r24
    11b6:	99 27       	eor	r25, r25
    11b8:	88 27       	eor	r24, r24
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	84 2b       	or	r24, r20
    11c0:	95 2b       	or	r25, r21
    11c2:	a6 2b       	or	r26, r22
    11c4:	b7 2b       	or	r27, r23
    11c6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    11ca:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    11ce:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    11d2:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    11d6:	b0 9b       	sbis	0x16, 0	; 22
    11d8:	1b c0       	rjmp	.+54     	; 0x1210 <__vector_5+0x98>
    11da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11e2:	c9 01       	movw	r24, r18
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	09 2e       	mov	r0, r25
    11e8:	00 0c       	add	r0, r0
    11ea:	aa 0b       	sbc	r26, r26
    11ec:	bb 0b       	sbc	r27, r27
    11ee:	dc 01       	movw	r26, r24
    11f0:	99 27       	eor	r25, r25
    11f2:	88 27       	eor	r24, r24
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	84 2b       	or	r24, r20
    11fa:	95 2b       	or	r25, r21
    11fc:	a6 2b       	or	r26, r22
    11fe:	b7 2b       	or	r27, r23
    1200:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1204:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1208:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    120c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1210:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x8>
    1214:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x9>
    1218:	30 97       	sbiw	r30, 0x00	; 0
    121a:	39 f0       	breq	.+14     	; 0x122a <__vector_5+0xb2>
    121c:	64 e0       	ldi	r22, 0x04	; 4
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x8>
    1224:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x9>
    1228:	09 95       	icall
    122a:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    122e:	ff 91       	pop	r31
    1230:	ef 91       	pop	r30
    1232:	bf 91       	pop	r27
    1234:	af 91       	pop	r26
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	7f 91       	pop	r23
    123c:	6f 91       	pop	r22
    123e:	5f 91       	pop	r21
    1240:	4f 91       	pop	r20
    1242:	3f 91       	pop	r19
    1244:	2f 91       	pop	r18
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	0f 90       	pop	r0
    124c:	1f 90       	pop	r1
    124e:	18 95       	reti

00001250 <__vector_10>:
    1250:	1f 92       	push	r1
    1252:	0f 92       	push	r0
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	0f 92       	push	r0
    1258:	11 24       	eor	r1, r1
    125a:	2f 93       	push	r18
    125c:	3f 93       	push	r19
    125e:	4f 93       	push	r20
    1260:	5f 93       	push	r21
    1262:	6f 93       	push	r22
    1264:	7f 93       	push	r23
    1266:	8f 93       	push	r24
    1268:	9f 93       	push	r25
    126a:	af 93       	push	r26
    126c:	bf 93       	push	r27
    126e:	ef 93       	push	r30
    1270:	ff 93       	push	r31
    1272:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1276:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    127a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    127e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1282:	c9 01       	movw	r24, r18
    1284:	03 2e       	mov	r0, r19
    1286:	00 0c       	add	r0, r0
    1288:	aa 0b       	sbc	r26, r26
    128a:	bb 0b       	sbc	r27, r27
    128c:	dc 01       	movw	r26, r24
    128e:	99 27       	eor	r25, r25
    1290:	88 27       	eor	r24, r24
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	84 2b       	or	r24, r20
    1298:	95 2b       	or	r25, r21
    129a:	a6 2b       	or	r26, r22
    129c:	b7 2b       	or	r27, r23
    129e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    12a2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    12a6:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    12aa:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    12ae:	b0 9b       	sbis	0x16, 0	; 22
    12b0:	1b c0       	rjmp	.+54     	; 0x12e8 <__vector_10+0x98>
    12b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ba:	c9 01       	movw	r24, r18
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	09 2e       	mov	r0, r25
    12c0:	00 0c       	add	r0, r0
    12c2:	aa 0b       	sbc	r26, r26
    12c4:	bb 0b       	sbc	r27, r27
    12c6:	dc 01       	movw	r26, r24
    12c8:	99 27       	eor	r25, r25
    12ca:	88 27       	eor	r24, r24
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	84 2b       	or	r24, r20
    12d2:	95 2b       	or	r25, r21
    12d4:	a6 2b       	or	r26, r22
    12d6:	b7 2b       	or	r27, r23
    12d8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    12dc:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    12e0:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    12e4:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    12e8:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0xa>
    12ec:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0xb>
    12f0:	30 97       	sbiw	r30, 0x00	; 0
    12f2:	39 f0       	breq	.+14     	; 0x1302 <__vector_10+0xb2>
    12f4:	65 e0       	ldi	r22, 0x05	; 5
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0xa>
    12fc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0xb>
    1300:	09 95       	icall
    1302:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	bf 91       	pop	r27
    130c:	af 91       	pop	r26
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	7f 91       	pop	r23
    1314:	6f 91       	pop	r22
    1316:	5f 91       	pop	r21
    1318:	4f 91       	pop	r20
    131a:	3f 91       	pop	r19
    131c:	2f 91       	pop	r18
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <__vector_11>:
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
    134a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    134e:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1352:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1356:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    135a:	c9 01       	movw	r24, r18
    135c:	03 2e       	mov	r0, r19
    135e:	00 0c       	add	r0, r0
    1360:	aa 0b       	sbc	r26, r26
    1362:	bb 0b       	sbc	r27, r27
    1364:	dc 01       	movw	r26, r24
    1366:	99 27       	eor	r25, r25
    1368:	88 27       	eor	r24, r24
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	84 2b       	or	r24, r20
    1370:	95 2b       	or	r25, r21
    1372:	a6 2b       	or	r26, r22
    1374:	b7 2b       	or	r27, r23
    1376:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    137a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    137e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1382:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1386:	b0 9b       	sbis	0x16, 0	; 22
    1388:	1b c0       	rjmp	.+54     	; 0x13c0 <__vector_11+0x98>
    138a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    138e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1392:	c9 01       	movw	r24, r18
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	09 2e       	mov	r0, r25
    1398:	00 0c       	add	r0, r0
    139a:	aa 0b       	sbc	r26, r26
    139c:	bb 0b       	sbc	r27, r27
    139e:	dc 01       	movw	r26, r24
    13a0:	99 27       	eor	r25, r25
    13a2:	88 27       	eor	r24, r24
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	84 2b       	or	r24, r20
    13aa:	95 2b       	or	r25, r21
    13ac:	a6 2b       	or	r26, r22
    13ae:	b7 2b       	or	r27, r23
    13b0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    13b4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    13b8:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    13bc:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    13c0:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0xc>
    13c4:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0xd>
    13c8:	30 97       	sbiw	r30, 0x00	; 0
    13ca:	39 f0       	breq	.+14     	; 0x13da <__vector_11+0xb2>
    13cc:	66 e0       	ldi	r22, 0x06	; 6
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0xc>
    13d4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0xd>
    13d8:	09 95       	icall
    13da:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    13de:	ff 91       	pop	r31
    13e0:	ef 91       	pop	r30
    13e2:	bf 91       	pop	r27
    13e4:	af 91       	pop	r26
    13e6:	9f 91       	pop	r25
    13e8:	8f 91       	pop	r24
    13ea:	7f 91       	pop	r23
    13ec:	6f 91       	pop	r22
    13ee:	5f 91       	pop	r21
    13f0:	4f 91       	pop	r20
    13f2:	3f 91       	pop	r19
    13f4:	2f 91       	pop	r18
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0f 90       	pop	r0
    13fc:	1f 90       	pop	r1
    13fe:	18 95       	reti

00001400 <__vector_12>:
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
    1422:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1426:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    142a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    142e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1432:	c9 01       	movw	r24, r18
    1434:	03 2e       	mov	r0, r19
    1436:	00 0c       	add	r0, r0
    1438:	aa 0b       	sbc	r26, r26
    143a:	bb 0b       	sbc	r27, r27
    143c:	dc 01       	movw	r26, r24
    143e:	99 27       	eor	r25, r25
    1440:	88 27       	eor	r24, r24
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	84 2b       	or	r24, r20
    1448:	95 2b       	or	r25, r21
    144a:	a6 2b       	or	r26, r22
    144c:	b7 2b       	or	r27, r23
    144e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1452:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1456:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    145a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    145e:	b0 9b       	sbis	0x16, 0	; 22
    1460:	1b c0       	rjmp	.+54     	; 0x1498 <__vector_12+0x98>
    1462:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1466:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    146a:	c9 01       	movw	r24, r18
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	09 2e       	mov	r0, r25
    1470:	00 0c       	add	r0, r0
    1472:	aa 0b       	sbc	r26, r26
    1474:	bb 0b       	sbc	r27, r27
    1476:	dc 01       	movw	r26, r24
    1478:	99 27       	eor	r25, r25
    147a:	88 27       	eor	r24, r24
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	84 2b       	or	r24, r20
    1482:	95 2b       	or	r25, r21
    1484:	a6 2b       	or	r26, r22
    1486:	b7 2b       	or	r27, r23
    1488:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    148c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1490:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1494:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1498:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0xe>
    149c:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0xf>
    14a0:	30 97       	sbiw	r30, 0x00	; 0
    14a2:	39 f0       	breq	.+14     	; 0x14b2 <__vector_12+0xb2>
    14a4:	67 e0       	ldi	r22, 0x07	; 7
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0xe>
    14ac:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0xf>
    14b0:	09 95       	icall
    14b2:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    14b6:	ff 91       	pop	r31
    14b8:	ef 91       	pop	r30
    14ba:	bf 91       	pop	r27
    14bc:	af 91       	pop	r26
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	7f 91       	pop	r23
    14c4:	6f 91       	pop	r22
    14c6:	5f 91       	pop	r21
    14c8:	4f 91       	pop	r20
    14ca:	3f 91       	pop	r19
    14cc:	2f 91       	pop	r18
    14ce:	0f 90       	pop	r0
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	0f 90       	pop	r0
    14d4:	1f 90       	pop	r1
    14d6:	18 95       	reti

000014d8 <__vector_13>:
    14d8:	1f 92       	push	r1
    14da:	0f 92       	push	r0
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	0f 92       	push	r0
    14e0:	11 24       	eor	r1, r1
    14e2:	2f 93       	push	r18
    14e4:	3f 93       	push	r19
    14e6:	4f 93       	push	r20
    14e8:	5f 93       	push	r21
    14ea:	6f 93       	push	r22
    14ec:	7f 93       	push	r23
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    14f2:	af 93       	push	r26
    14f4:	bf 93       	push	r27
    14f6:	ef 93       	push	r30
    14f8:	ff 93       	push	r31
    14fa:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    14fe:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1502:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1506:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    150a:	c9 01       	movw	r24, r18
    150c:	03 2e       	mov	r0, r19
    150e:	00 0c       	add	r0, r0
    1510:	aa 0b       	sbc	r26, r26
    1512:	bb 0b       	sbc	r27, r27
    1514:	dc 01       	movw	r26, r24
    1516:	99 27       	eor	r25, r25
    1518:	88 27       	eor	r24, r24
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	84 2b       	or	r24, r20
    1520:	95 2b       	or	r25, r21
    1522:	a6 2b       	or	r26, r22
    1524:	b7 2b       	or	r27, r23
    1526:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    152a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    152e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1532:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1536:	b0 9b       	sbis	0x16, 0	; 22
    1538:	1b c0       	rjmp	.+54     	; 0x1570 <__vector_13+0x98>
    153a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    153e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1542:	c9 01       	movw	r24, r18
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	09 2e       	mov	r0, r25
    1548:	00 0c       	add	r0, r0
    154a:	aa 0b       	sbc	r26, r26
    154c:	bb 0b       	sbc	r27, r27
    154e:	dc 01       	movw	r26, r24
    1550:	99 27       	eor	r25, r25
    1552:	88 27       	eor	r24, r24
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	84 2b       	or	r24, r20
    155a:	95 2b       	or	r25, r21
    155c:	a6 2b       	or	r26, r22
    155e:	b7 2b       	or	r27, r23
    1560:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1564:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1568:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    156c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1570:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x10>
    1574:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x11>
    1578:	30 97       	sbiw	r30, 0x00	; 0
    157a:	39 f0       	breq	.+14     	; 0x158a <__vector_13+0xb2>
    157c:	68 e0       	ldi	r22, 0x08	; 8
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x10>
    1584:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x11>
    1588:	09 95       	icall
    158a:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    158e:	ff 91       	pop	r31
    1590:	ef 91       	pop	r30
    1592:	bf 91       	pop	r27
    1594:	af 91       	pop	r26
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	7f 91       	pop	r23
    159c:	6f 91       	pop	r22
    159e:	5f 91       	pop	r21
    15a0:	4f 91       	pop	r20
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <__vector_14>:
    15b0:	1f 92       	push	r1
    15b2:	0f 92       	push	r0
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	0f 92       	push	r0
    15b8:	11 24       	eor	r1, r1
    15ba:	2f 93       	push	r18
    15bc:	3f 93       	push	r19
    15be:	4f 93       	push	r20
    15c0:	5f 93       	push	r21
    15c2:	6f 93       	push	r22
    15c4:	7f 93       	push	r23
    15c6:	8f 93       	push	r24
    15c8:	9f 93       	push	r25
    15ca:	af 93       	push	r26
    15cc:	bf 93       	push	r27
    15ce:	ef 93       	push	r30
    15d0:	ff 93       	push	r31
    15d2:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    15d6:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    15da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15e2:	c9 01       	movw	r24, r18
    15e4:	03 2e       	mov	r0, r19
    15e6:	00 0c       	add	r0, r0
    15e8:	aa 0b       	sbc	r26, r26
    15ea:	bb 0b       	sbc	r27, r27
    15ec:	dc 01       	movw	r26, r24
    15ee:	99 27       	eor	r25, r25
    15f0:	88 27       	eor	r24, r24
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	84 2b       	or	r24, r20
    15f8:	95 2b       	or	r25, r21
    15fa:	a6 2b       	or	r26, r22
    15fc:	b7 2b       	or	r27, r23
    15fe:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1602:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1606:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    160a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    160e:	b0 9b       	sbis	0x16, 0	; 22
    1610:	1b c0       	rjmp	.+54     	; 0x1648 <__vector_14+0x98>
    1612:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1616:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    161a:	c9 01       	movw	r24, r18
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	09 2e       	mov	r0, r25
    1620:	00 0c       	add	r0, r0
    1622:	aa 0b       	sbc	r26, r26
    1624:	bb 0b       	sbc	r27, r27
    1626:	dc 01       	movw	r26, r24
    1628:	99 27       	eor	r25, r25
    162a:	88 27       	eor	r24, r24
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	84 2b       	or	r24, r20
    1632:	95 2b       	or	r25, r21
    1634:	a6 2b       	or	r26, r22
    1636:	b7 2b       	or	r27, r23
    1638:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    163c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1640:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1644:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1648:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x12>
    164c:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x13>
    1650:	30 97       	sbiw	r30, 0x00	; 0
    1652:	39 f0       	breq	.+14     	; 0x1662 <__vector_14+0xb2>
    1654:	69 e0       	ldi	r22, 0x09	; 9
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x12>
    165c:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x13>
    1660:	09 95       	icall
    1662:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    1666:	ff 91       	pop	r31
    1668:	ef 91       	pop	r30
    166a:	bf 91       	pop	r27
    166c:	af 91       	pop	r26
    166e:	9f 91       	pop	r25
    1670:	8f 91       	pop	r24
    1672:	7f 91       	pop	r23
    1674:	6f 91       	pop	r22
    1676:	5f 91       	pop	r21
    1678:	4f 91       	pop	r20
    167a:	3f 91       	pop	r19
    167c:	2f 91       	pop	r18
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0f 90       	pop	r0
    1684:	1f 90       	pop	r1
    1686:	18 95       	reti

00001688 <__vector_15>:
    1688:	1f 92       	push	r1
    168a:	0f 92       	push	r0
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	0f 92       	push	r0
    1690:	11 24       	eor	r1, r1
    1692:	2f 93       	push	r18
    1694:	3f 93       	push	r19
    1696:	4f 93       	push	r20
    1698:	5f 93       	push	r21
    169a:	6f 93       	push	r22
    169c:	7f 93       	push	r23
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	af 93       	push	r26
    16a4:	bf 93       	push	r27
    16a6:	ef 93       	push	r30
    16a8:	ff 93       	push	r31
    16aa:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    16ae:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    16b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16ba:	c9 01       	movw	r24, r18
    16bc:	03 2e       	mov	r0, r19
    16be:	00 0c       	add	r0, r0
    16c0:	aa 0b       	sbc	r26, r26
    16c2:	bb 0b       	sbc	r27, r27
    16c4:	dc 01       	movw	r26, r24
    16c6:	99 27       	eor	r25, r25
    16c8:	88 27       	eor	r24, r24
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	84 2b       	or	r24, r20
    16d0:	95 2b       	or	r25, r21
    16d2:	a6 2b       	or	r26, r22
    16d4:	b7 2b       	or	r27, r23
    16d6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    16da:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    16de:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    16e2:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    16e6:	b0 9b       	sbis	0x16, 0	; 22
    16e8:	1b c0       	rjmp	.+54     	; 0x1720 <__vector_15+0x98>
    16ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16f2:	c9 01       	movw	r24, r18
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	09 2e       	mov	r0, r25
    16f8:	00 0c       	add	r0, r0
    16fa:	aa 0b       	sbc	r26, r26
    16fc:	bb 0b       	sbc	r27, r27
    16fe:	dc 01       	movw	r26, r24
    1700:	99 27       	eor	r25, r25
    1702:	88 27       	eor	r24, r24
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	84 2b       	or	r24, r20
    170a:	95 2b       	or	r25, r21
    170c:	a6 2b       	or	r26, r22
    170e:	b7 2b       	or	r27, r23
    1710:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1714:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1718:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    171c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1720:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x14>
    1724:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x15>
    1728:	30 97       	sbiw	r30, 0x00	; 0
    172a:	39 f0       	breq	.+14     	; 0x173a <__vector_15+0xb2>
    172c:	6a e0       	ldi	r22, 0x0A	; 10
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x14>
    1734:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x15>
    1738:	09 95       	icall
    173a:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	7f 91       	pop	r23
    174c:	6f 91       	pop	r22
    174e:	5f 91       	pop	r21
    1750:	4f 91       	pop	r20
    1752:	3f 91       	pop	r19
    1754:	2f 91       	pop	r18
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	0f 90       	pop	r0
    175c:	1f 90       	pop	r1
    175e:	18 95       	reti

00001760 <__vector_16>:
    1760:	1f 92       	push	r1
    1762:	0f 92       	push	r0
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	0f 92       	push	r0
    1768:	11 24       	eor	r1, r1
    176a:	2f 93       	push	r18
    176c:	3f 93       	push	r19
    176e:	4f 93       	push	r20
    1770:	5f 93       	push	r21
    1772:	6f 93       	push	r22
    1774:	7f 93       	push	r23
    1776:	8f 93       	push	r24
    1778:	9f 93       	push	r25
    177a:	af 93       	push	r26
    177c:	bf 93       	push	r27
    177e:	ef 93       	push	r30
    1780:	ff 93       	push	r31
    1782:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1786:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    178a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    178e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1792:	c9 01       	movw	r24, r18
    1794:	03 2e       	mov	r0, r19
    1796:	00 0c       	add	r0, r0
    1798:	aa 0b       	sbc	r26, r26
    179a:	bb 0b       	sbc	r27, r27
    179c:	dc 01       	movw	r26, r24
    179e:	99 27       	eor	r25, r25
    17a0:	88 27       	eor	r24, r24
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	84 2b       	or	r24, r20
    17a8:	95 2b       	or	r25, r21
    17aa:	a6 2b       	or	r26, r22
    17ac:	b7 2b       	or	r27, r23
    17ae:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    17b2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    17b6:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    17ba:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    17be:	b0 9b       	sbis	0x16, 0	; 22
    17c0:	1b c0       	rjmp	.+54     	; 0x17f8 <__vector_16+0x98>
    17c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17ca:	c9 01       	movw	r24, r18
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	09 2e       	mov	r0, r25
    17d0:	00 0c       	add	r0, r0
    17d2:	aa 0b       	sbc	r26, r26
    17d4:	bb 0b       	sbc	r27, r27
    17d6:	dc 01       	movw	r26, r24
    17d8:	99 27       	eor	r25, r25
    17da:	88 27       	eor	r24, r24
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	84 2b       	or	r24, r20
    17e2:	95 2b       	or	r25, r21
    17e4:	a6 2b       	or	r26, r22
    17e6:	b7 2b       	or	r27, r23
    17e8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    17ec:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    17f0:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    17f4:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    17f8:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x16>
    17fc:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x17>
    1800:	30 97       	sbiw	r30, 0x00	; 0
    1802:	39 f0       	breq	.+14     	; 0x1812 <__vector_16+0xb2>
    1804:	6b e0       	ldi	r22, 0x0B	; 11
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x16>
    180c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x17>
    1810:	09 95       	icall
    1812:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    1816:	ff 91       	pop	r31
    1818:	ef 91       	pop	r30
    181a:	bf 91       	pop	r27
    181c:	af 91       	pop	r26
    181e:	9f 91       	pop	r25
    1820:	8f 91       	pop	r24
    1822:	7f 91       	pop	r23
    1824:	6f 91       	pop	r22
    1826:	5f 91       	pop	r21
    1828:	4f 91       	pop	r20
    182a:	3f 91       	pop	r19
    182c:	2f 91       	pop	r18
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	0f 90       	pop	r0
    1834:	1f 90       	pop	r1
    1836:	18 95       	reti

00001838 <__vector_17>:
    1838:	1f 92       	push	r1
    183a:	0f 92       	push	r0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	0f 92       	push	r0
    1840:	11 24       	eor	r1, r1
    1842:	2f 93       	push	r18
    1844:	3f 93       	push	r19
    1846:	4f 93       	push	r20
    1848:	5f 93       	push	r21
    184a:	6f 93       	push	r22
    184c:	7f 93       	push	r23
    184e:	8f 93       	push	r24
    1850:	9f 93       	push	r25
    1852:	af 93       	push	r26
    1854:	bf 93       	push	r27
    1856:	ef 93       	push	r30
    1858:	ff 93       	push	r31
    185a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    185e:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1862:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1866:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    186a:	c9 01       	movw	r24, r18
    186c:	03 2e       	mov	r0, r19
    186e:	00 0c       	add	r0, r0
    1870:	aa 0b       	sbc	r26, r26
    1872:	bb 0b       	sbc	r27, r27
    1874:	dc 01       	movw	r26, r24
    1876:	99 27       	eor	r25, r25
    1878:	88 27       	eor	r24, r24
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	84 2b       	or	r24, r20
    1880:	95 2b       	or	r25, r21
    1882:	a6 2b       	or	r26, r22
    1884:	b7 2b       	or	r27, r23
    1886:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    188a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    188e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1892:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1896:	b0 9b       	sbis	0x16, 0	; 22
    1898:	1b c0       	rjmp	.+54     	; 0x18d0 <__vector_17+0x98>
    189a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    189e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18a2:	c9 01       	movw	r24, r18
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	09 2e       	mov	r0, r25
    18a8:	00 0c       	add	r0, r0
    18aa:	aa 0b       	sbc	r26, r26
    18ac:	bb 0b       	sbc	r27, r27
    18ae:	dc 01       	movw	r26, r24
    18b0:	99 27       	eor	r25, r25
    18b2:	88 27       	eor	r24, r24
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	84 2b       	or	r24, r20
    18ba:	95 2b       	or	r25, r21
    18bc:	a6 2b       	or	r26, r22
    18be:	b7 2b       	or	r27, r23
    18c0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    18c4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    18c8:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    18cc:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    18d0:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x18>
    18d4:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x19>
    18d8:	30 97       	sbiw	r30, 0x00	; 0
    18da:	39 f0       	breq	.+14     	; 0x18ea <__vector_17+0xb2>
    18dc:	6c e0       	ldi	r22, 0x0C	; 12
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x18>
    18e4:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x19>
    18e8:	09 95       	icall
    18ea:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	0f 90       	pop	r0
    190c:	1f 90       	pop	r1
    190e:	18 95       	reti

00001910 <__vector_18>:
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	11 24       	eor	r1, r1
    191a:	2f 93       	push	r18
    191c:	3f 93       	push	r19
    191e:	4f 93       	push	r20
    1920:	5f 93       	push	r21
    1922:	6f 93       	push	r22
    1924:	7f 93       	push	r23
    1926:	8f 93       	push	r24
    1928:	9f 93       	push	r25
    192a:	af 93       	push	r26
    192c:	bf 93       	push	r27
    192e:	ef 93       	push	r30
    1930:	ff 93       	push	r31
    1932:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1936:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    193a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    193e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1942:	c9 01       	movw	r24, r18
    1944:	03 2e       	mov	r0, r19
    1946:	00 0c       	add	r0, r0
    1948:	aa 0b       	sbc	r26, r26
    194a:	bb 0b       	sbc	r27, r27
    194c:	dc 01       	movw	r26, r24
    194e:	99 27       	eor	r25, r25
    1950:	88 27       	eor	r24, r24
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	84 2b       	or	r24, r20
    1958:	95 2b       	or	r25, r21
    195a:	a6 2b       	or	r26, r22
    195c:	b7 2b       	or	r27, r23
    195e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1962:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1966:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    196a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    196e:	b0 9b       	sbis	0x16, 0	; 22
    1970:	1b c0       	rjmp	.+54     	; 0x19a8 <__vector_18+0x98>
    1972:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1976:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    197a:	c9 01       	movw	r24, r18
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	09 2e       	mov	r0, r25
    1980:	00 0c       	add	r0, r0
    1982:	aa 0b       	sbc	r26, r26
    1984:	bb 0b       	sbc	r27, r27
    1986:	dc 01       	movw	r26, r24
    1988:	99 27       	eor	r25, r25
    198a:	88 27       	eor	r24, r24
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	84 2b       	or	r24, r20
    1992:	95 2b       	or	r25, r21
    1994:	a6 2b       	or	r26, r22
    1996:	b7 2b       	or	r27, r23
    1998:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    199c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    19a0:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    19a4:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    19a8:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x1a>
    19ac:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x1b>
    19b0:	30 97       	sbiw	r30, 0x00	; 0
    19b2:	39 f0       	breq	.+14     	; 0x19c2 <__vector_18+0xb2>
    19b4:	6d e0       	ldi	r22, 0x0D	; 13
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x1a>
    19bc:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x1b>
    19c0:	09 95       	icall
    19c2:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    19c6:	ff 91       	pop	r31
    19c8:	ef 91       	pop	r30
    19ca:	bf 91       	pop	r27
    19cc:	af 91       	pop	r26
    19ce:	9f 91       	pop	r25
    19d0:	8f 91       	pop	r24
    19d2:	7f 91       	pop	r23
    19d4:	6f 91       	pop	r22
    19d6:	5f 91       	pop	r21
    19d8:	4f 91       	pop	r20
    19da:	3f 91       	pop	r19
    19dc:	2f 91       	pop	r18
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_19>:
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	2f 93       	push	r18
    19f4:	3f 93       	push	r19
    19f6:	4f 93       	push	r20
    19f8:	5f 93       	push	r21
    19fa:	6f 93       	push	r22
    19fc:	7f 93       	push	r23
    19fe:	8f 93       	push	r24
    1a00:	9f 93       	push	r25
    1a02:	af 93       	push	r26
    1a04:	bf 93       	push	r27
    1a06:	ef 93       	push	r30
    1a08:	ff 93       	push	r31
    1a0a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1a0e:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1a12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a1a:	c9 01       	movw	r24, r18
    1a1c:	03 2e       	mov	r0, r19
    1a1e:	00 0c       	add	r0, r0
    1a20:	aa 0b       	sbc	r26, r26
    1a22:	bb 0b       	sbc	r27, r27
    1a24:	dc 01       	movw	r26, r24
    1a26:	99 27       	eor	r25, r25
    1a28:	88 27       	eor	r24, r24
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	84 2b       	or	r24, r20
    1a30:	95 2b       	or	r25, r21
    1a32:	a6 2b       	or	r26, r22
    1a34:	b7 2b       	or	r27, r23
    1a36:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1a3a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1a3e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1a42:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1a46:	b0 9b       	sbis	0x16, 0	; 22
    1a48:	1b c0       	rjmp	.+54     	; 0x1a80 <__vector_19+0x98>
    1a4a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a4e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a52:	c9 01       	movw	r24, r18
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	09 2e       	mov	r0, r25
    1a58:	00 0c       	add	r0, r0
    1a5a:	aa 0b       	sbc	r26, r26
    1a5c:	bb 0b       	sbc	r27, r27
    1a5e:	dc 01       	movw	r26, r24
    1a60:	99 27       	eor	r25, r25
    1a62:	88 27       	eor	r24, r24
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	84 2b       	or	r24, r20
    1a6a:	95 2b       	or	r25, r21
    1a6c:	a6 2b       	or	r26, r22
    1a6e:	b7 2b       	or	r27, r23
    1a70:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1a74:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1a78:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1a7c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1a80:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x1c>
    1a84:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x1d>
    1a88:	30 97       	sbiw	r30, 0x00	; 0
    1a8a:	39 f0       	breq	.+14     	; 0x1a9a <__vector_19+0xb2>
    1a8c:	6e e0       	ldi	r22, 0x0E	; 14
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x1c>
    1a94:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x1d>
    1a98:	09 95       	icall
    1a9a:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    1a9e:	ff 91       	pop	r31
    1aa0:	ef 91       	pop	r30
    1aa2:	bf 91       	pop	r27
    1aa4:	af 91       	pop	r26
    1aa6:	9f 91       	pop	r25
    1aa8:	8f 91       	pop	r24
    1aaa:	7f 91       	pop	r23
    1aac:	6f 91       	pop	r22
    1aae:	5f 91       	pop	r21
    1ab0:	4f 91       	pop	r20
    1ab2:	3f 91       	pop	r19
    1ab4:	2f 91       	pop	r18
    1ab6:	0f 90       	pop	r0
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	0f 90       	pop	r0
    1abc:	1f 90       	pop	r1
    1abe:	18 95       	reti

00001ac0 <__vector_20>:
    1ac0:	1f 92       	push	r1
    1ac2:	0f 92       	push	r0
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	0f 92       	push	r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	2f 93       	push	r18
    1acc:	3f 93       	push	r19
    1ace:	4f 93       	push	r20
    1ad0:	5f 93       	push	r21
    1ad2:	6f 93       	push	r22
    1ad4:	7f 93       	push	r23
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	af 93       	push	r26
    1adc:	bf 93       	push	r27
    1ade:	ef 93       	push	r30
    1ae0:	ff 93       	push	r31
    1ae2:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1ae6:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1aea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1af2:	c9 01       	movw	r24, r18
    1af4:	03 2e       	mov	r0, r19
    1af6:	00 0c       	add	r0, r0
    1af8:	aa 0b       	sbc	r26, r26
    1afa:	bb 0b       	sbc	r27, r27
    1afc:	dc 01       	movw	r26, r24
    1afe:	99 27       	eor	r25, r25
    1b00:	88 27       	eor	r24, r24
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	84 2b       	or	r24, r20
    1b08:	95 2b       	or	r25, r21
    1b0a:	a6 2b       	or	r26, r22
    1b0c:	b7 2b       	or	r27, r23
    1b0e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1b12:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1b16:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1b1a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1b1e:	b0 9b       	sbis	0x16, 0	; 22
    1b20:	1b c0       	rjmp	.+54     	; 0x1b58 <__vector_20+0x98>
    1b22:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b26:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b2a:	c9 01       	movw	r24, r18
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	09 2e       	mov	r0, r25
    1b30:	00 0c       	add	r0, r0
    1b32:	aa 0b       	sbc	r26, r26
    1b34:	bb 0b       	sbc	r27, r27
    1b36:	dc 01       	movw	r26, r24
    1b38:	99 27       	eor	r25, r25
    1b3a:	88 27       	eor	r24, r24
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	84 2b       	or	r24, r20
    1b42:	95 2b       	or	r25, r21
    1b44:	a6 2b       	or	r26, r22
    1b46:	b7 2b       	or	r27, r23
    1b48:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1b4c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1b50:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1b54:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1b58:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x1e>
    1b5c:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x1f>
    1b60:	30 97       	sbiw	r30, 0x00	; 0
    1b62:	39 f0       	breq	.+14     	; 0x1b72 <__vector_20+0xb2>
    1b64:	6f e0       	ldi	r22, 0x0F	; 15
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x1e>
    1b6c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x1f>
    1b70:	09 95       	icall
    1b72:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    1b76:	ff 91       	pop	r31
    1b78:	ef 91       	pop	r30
    1b7a:	bf 91       	pop	r27
    1b7c:	af 91       	pop	r26
    1b7e:	9f 91       	pop	r25
    1b80:	8f 91       	pop	r24
    1b82:	7f 91       	pop	r23
    1b84:	6f 91       	pop	r22
    1b86:	5f 91       	pop	r21
    1b88:	4f 91       	pop	r20
    1b8a:	3f 91       	pop	r19
    1b8c:	2f 91       	pop	r18
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <__vector_21>:
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	2f 93       	push	r18
    1ba4:	3f 93       	push	r19
    1ba6:	4f 93       	push	r20
    1ba8:	5f 93       	push	r21
    1baa:	6f 93       	push	r22
    1bac:	7f 93       	push	r23
    1bae:	8f 93       	push	r24
    1bb0:	9f 93       	push	r25
    1bb2:	af 93       	push	r26
    1bb4:	bf 93       	push	r27
    1bb6:	ef 93       	push	r30
    1bb8:	ff 93       	push	r31
    1bba:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1bbe:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1bc2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bc6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bca:	c9 01       	movw	r24, r18
    1bcc:	03 2e       	mov	r0, r19
    1bce:	00 0c       	add	r0, r0
    1bd0:	aa 0b       	sbc	r26, r26
    1bd2:	bb 0b       	sbc	r27, r27
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	99 27       	eor	r25, r25
    1bd8:	88 27       	eor	r24, r24
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	84 2b       	or	r24, r20
    1be0:	95 2b       	or	r25, r21
    1be2:	a6 2b       	or	r26, r22
    1be4:	b7 2b       	or	r27, r23
    1be6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1bea:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1bee:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1bf2:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1bf6:	b0 9b       	sbis	0x16, 0	; 22
    1bf8:	1b c0       	rjmp	.+54     	; 0x1c30 <__vector_21+0x98>
    1bfa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bfe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c02:	c9 01       	movw	r24, r18
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	09 2e       	mov	r0, r25
    1c08:	00 0c       	add	r0, r0
    1c0a:	aa 0b       	sbc	r26, r26
    1c0c:	bb 0b       	sbc	r27, r27
    1c0e:	dc 01       	movw	r26, r24
    1c10:	99 27       	eor	r25, r25
    1c12:	88 27       	eor	r24, r24
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	84 2b       	or	r24, r20
    1c1a:	95 2b       	or	r25, r21
    1c1c:	a6 2b       	or	r26, r22
    1c1e:	b7 2b       	or	r27, r23
    1c20:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1c24:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1c28:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1c2c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1c30:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x20>
    1c34:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x21>
    1c38:	30 97       	sbiw	r30, 0x00	; 0
    1c3a:	39 f0       	breq	.+14     	; 0x1c4a <__vector_21+0xb2>
    1c3c:	60 e1       	ldi	r22, 0x10	; 16
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x20>
    1c44:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x21>
    1c48:	09 95       	icall
    1c4a:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    1c4e:	ff 91       	pop	r31
    1c50:	ef 91       	pop	r30
    1c52:	bf 91       	pop	r27
    1c54:	af 91       	pop	r26
    1c56:	9f 91       	pop	r25
    1c58:	8f 91       	pop	r24
    1c5a:	7f 91       	pop	r23
    1c5c:	6f 91       	pop	r22
    1c5e:	5f 91       	pop	r21
    1c60:	4f 91       	pop	r20
    1c62:	3f 91       	pop	r19
    1c64:	2f 91       	pop	r18
    1c66:	0f 90       	pop	r0
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	0f 90       	pop	r0
    1c6c:	1f 90       	pop	r1
    1c6e:	18 95       	reti

00001c70 <__vector_22>:
    1c70:	1f 92       	push	r1
    1c72:	0f 92       	push	r0
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	0f 92       	push	r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	2f 93       	push	r18
    1c7c:	3f 93       	push	r19
    1c7e:	4f 93       	push	r20
    1c80:	5f 93       	push	r21
    1c82:	6f 93       	push	r22
    1c84:	7f 93       	push	r23
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
    1c8e:	ef 93       	push	r30
    1c90:	ff 93       	push	r31
    1c92:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1c96:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1c9a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c9e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ca2:	c9 01       	movw	r24, r18
    1ca4:	03 2e       	mov	r0, r19
    1ca6:	00 0c       	add	r0, r0
    1ca8:	aa 0b       	sbc	r26, r26
    1caa:	bb 0b       	sbc	r27, r27
    1cac:	dc 01       	movw	r26, r24
    1cae:	99 27       	eor	r25, r25
    1cb0:	88 27       	eor	r24, r24
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	84 2b       	or	r24, r20
    1cb8:	95 2b       	or	r25, r21
    1cba:	a6 2b       	or	r26, r22
    1cbc:	b7 2b       	or	r27, r23
    1cbe:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1cc2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1cc6:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1cca:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1cce:	b0 9b       	sbis	0x16, 0	; 22
    1cd0:	1b c0       	rjmp	.+54     	; 0x1d08 <__vector_22+0x98>
    1cd2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cd6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cda:	c9 01       	movw	r24, r18
    1cdc:	01 96       	adiw	r24, 0x01	; 1
    1cde:	09 2e       	mov	r0, r25
    1ce0:	00 0c       	add	r0, r0
    1ce2:	aa 0b       	sbc	r26, r26
    1ce4:	bb 0b       	sbc	r27, r27
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	99 27       	eor	r25, r25
    1cea:	88 27       	eor	r24, r24
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	84 2b       	or	r24, r20
    1cf2:	95 2b       	or	r25, r21
    1cf4:	a6 2b       	or	r26, r22
    1cf6:	b7 2b       	or	r27, r23
    1cf8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1cfc:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1d00:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1d04:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1d08:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x22>
    1d0c:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x23>
    1d10:	30 97       	sbiw	r30, 0x00	; 0
    1d12:	39 f0       	breq	.+14     	; 0x1d22 <__vector_22+0xb2>
    1d14:	61 e1       	ldi	r22, 0x11	; 17
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x22>
    1d1c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x23>
    1d20:	09 95       	icall
    1d22:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    1d26:	ff 91       	pop	r31
    1d28:	ef 91       	pop	r30
    1d2a:	bf 91       	pop	r27
    1d2c:	af 91       	pop	r26
    1d2e:	9f 91       	pop	r25
    1d30:	8f 91       	pop	r24
    1d32:	7f 91       	pop	r23
    1d34:	6f 91       	pop	r22
    1d36:	5f 91       	pop	r21
    1d38:	4f 91       	pop	r20
    1d3a:	3f 91       	pop	r19
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

00001d48 <enqueueByDeadline>:
    1d48:	ef 92       	push	r14
    1d4a:	ff 92       	push	r15
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	7b 01       	movw	r14, r22
    1d56:	eb 01       	movw	r28, r22
    1d58:	a8 81       	ld	r26, Y
    1d5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d5c:	10 97       	sbiw	r26, 0x00	; 0
    1d5e:	61 f1       	breq	.+88     	; 0x1db8 <enqueueByDeadline+0x70>
    1d60:	fc 01       	movw	r30, r24
    1d62:	06 81       	ldd	r16, Z+6	; 0x06
    1d64:	17 81       	ldd	r17, Z+7	; 0x07
    1d66:	20 85       	ldd	r18, Z+8	; 0x08
    1d68:	31 85       	ldd	r19, Z+9	; 0x09
    1d6a:	16 96       	adiw	r26, 0x06	; 6
    1d6c:	4d 91       	ld	r20, X+
    1d6e:	5d 91       	ld	r21, X+
    1d70:	6d 91       	ld	r22, X+
    1d72:	7c 91       	ld	r23, X
    1d74:	19 97       	sbiw	r26, 0x09	; 9
    1d76:	04 17       	cp	r16, r20
    1d78:	15 07       	cpc	r17, r21
    1d7a:	26 07       	cpc	r18, r22
    1d7c:	37 07       	cpc	r19, r23
    1d7e:	14 f4       	brge	.+4      	; 0x1d84 <enqueueByDeadline+0x3c>
    1d80:	1b c0       	rjmp	.+54     	; 0x1db8 <enqueueByDeadline+0x70>
    1d82:	df 01       	movw	r26, r30
    1d84:	ed 91       	ld	r30, X+
    1d86:	fc 91       	ld	r31, X
    1d88:	11 97       	sbiw	r26, 0x01	; 1
    1d8a:	30 97       	sbiw	r30, 0x00	; 0
    1d8c:	49 f0       	breq	.+18     	; 0x1da0 <enqueueByDeadline+0x58>
    1d8e:	46 81       	ldd	r20, Z+6	; 0x06
    1d90:	57 81       	ldd	r21, Z+7	; 0x07
    1d92:	60 85       	ldd	r22, Z+8	; 0x08
    1d94:	71 85       	ldd	r23, Z+9	; 0x09
    1d96:	04 17       	cp	r16, r20
    1d98:	15 07       	cpc	r17, r21
    1d9a:	26 07       	cpc	r18, r22
    1d9c:	37 07       	cpc	r19, r23
    1d9e:	8c f7       	brge	.-30     	; 0x1d82 <enqueueByDeadline+0x3a>
    1da0:	ec 01       	movw	r28, r24
    1da2:	f9 83       	std	Y+1, r31	; 0x01
    1da4:	e8 83       	st	Y, r30
    1da6:	10 97       	sbiw	r26, 0x00	; 0
    1da8:	21 f4       	brne	.+8      	; 0x1db2 <enqueueByDeadline+0x6a>
    1daa:	f7 01       	movw	r30, r14
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	07 c0       	rjmp	.+14     	; 0x1dc0 <enqueueByDeadline+0x78>
    1db2:	8d 93       	st	X+, r24
    1db4:	9c 93       	st	X, r25
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <enqueueByDeadline+0x78>
    1db8:	ec 01       	movw	r28, r24
    1dba:	b9 83       	std	Y+1, r27	; 0x01
    1dbc:	a8 83       	st	Y, r26
    1dbe:	f5 cf       	rjmp	.-22     	; 0x1daa <enqueueByDeadline+0x62>
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	08 95       	ret

00001dce <enqueueByBaseline>:
    1dce:	ef 92       	push	r14
    1dd0:	ff 92       	push	r15
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	7b 01       	movw	r14, r22
    1ddc:	eb 01       	movw	r28, r22
    1dde:	a8 81       	ld	r26, Y
    1de0:	b9 81       	ldd	r27, Y+1	; 0x01
    1de2:	10 97       	sbiw	r26, 0x00	; 0
    1de4:	61 f1       	breq	.+88     	; 0x1e3e <enqueueByBaseline+0x70>
    1de6:	fc 01       	movw	r30, r24
    1de8:	02 81       	ldd	r16, Z+2	; 0x02
    1dea:	13 81       	ldd	r17, Z+3	; 0x03
    1dec:	24 81       	ldd	r18, Z+4	; 0x04
    1dee:	35 81       	ldd	r19, Z+5	; 0x05
    1df0:	12 96       	adiw	r26, 0x02	; 2
    1df2:	4d 91       	ld	r20, X+
    1df4:	5d 91       	ld	r21, X+
    1df6:	6d 91       	ld	r22, X+
    1df8:	7c 91       	ld	r23, X
    1dfa:	15 97       	sbiw	r26, 0x05	; 5
    1dfc:	04 17       	cp	r16, r20
    1dfe:	15 07       	cpc	r17, r21
    1e00:	26 07       	cpc	r18, r22
    1e02:	37 07       	cpc	r19, r23
    1e04:	14 f4       	brge	.+4      	; 0x1e0a <enqueueByBaseline+0x3c>
    1e06:	1b c0       	rjmp	.+54     	; 0x1e3e <enqueueByBaseline+0x70>
    1e08:	df 01       	movw	r26, r30
    1e0a:	ed 91       	ld	r30, X+
    1e0c:	fc 91       	ld	r31, X
    1e0e:	11 97       	sbiw	r26, 0x01	; 1
    1e10:	30 97       	sbiw	r30, 0x00	; 0
    1e12:	49 f0       	breq	.+18     	; 0x1e26 <enqueueByBaseline+0x58>
    1e14:	42 81       	ldd	r20, Z+2	; 0x02
    1e16:	53 81       	ldd	r21, Z+3	; 0x03
    1e18:	64 81       	ldd	r22, Z+4	; 0x04
    1e1a:	75 81       	ldd	r23, Z+5	; 0x05
    1e1c:	04 17       	cp	r16, r20
    1e1e:	15 07       	cpc	r17, r21
    1e20:	26 07       	cpc	r18, r22
    1e22:	37 07       	cpc	r19, r23
    1e24:	8c f7       	brge	.-30     	; 0x1e08 <enqueueByBaseline+0x3a>
    1e26:	ec 01       	movw	r28, r24
    1e28:	f9 83       	std	Y+1, r31	; 0x01
    1e2a:	e8 83       	st	Y, r30
    1e2c:	10 97       	sbiw	r26, 0x00	; 0
    1e2e:	21 f4       	brne	.+8      	; 0x1e38 <enqueueByBaseline+0x6a>
    1e30:	f7 01       	movw	r30, r14
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	80 83       	st	Z, r24
    1e36:	07 c0       	rjmp	.+14     	; 0x1e46 <enqueueByBaseline+0x78>
    1e38:	8d 93       	st	X+, r24
    1e3a:	9c 93       	st	X, r25
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <enqueueByBaseline+0x78>
    1e3e:	ec 01       	movw	r28, r24
    1e40:	b9 83       	std	Y+1, r27	; 0x01
    1e42:	a8 83       	st	Y, r26
    1e44:	f5 cf       	rjmp	.-22     	; 0x1e30 <enqueueByBaseline+0x62>
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	08 95       	ret

00001e54 <dequeue>:
    1e54:	dc 01       	movw	r26, r24
    1e56:	ed 91       	ld	r30, X+
    1e58:	fc 91       	ld	r31, X
    1e5a:	11 97       	sbiw	r26, 0x01	; 1
    1e5c:	30 97       	sbiw	r30, 0x00	; 0
    1e5e:	59 f4       	brne	.+22     	; 0x1e76 <dequeue+0x22>
    1e60:	8f ef       	ldi	r24, 0xFF	; 255
    1e62:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1e66:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1e6a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	83 bf       	out	0x33, r24	; 51
    1e72:	88 95       	sleep
    1e74:	fd cf       	rjmp	.-6      	; 0x1e70 <dequeue+0x1c>
    1e76:	20 81       	ld	r18, Z
    1e78:	31 81       	ldd	r19, Z+1	; 0x01
    1e7a:	2d 93       	st	X+, r18
    1e7c:	3c 93       	st	X, r19
    1e7e:	cf 01       	movw	r24, r30
    1e80:	08 95       	ret

00001e82 <__vector_9>:
    1e82:	1f 92       	push	r1
    1e84:	0f 92       	push	r0
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	0f 92       	push	r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	2f 93       	push	r18
    1e8e:	3f 93       	push	r19
    1e90:	4f 93       	push	r20
    1e92:	5f 93       	push	r21
    1e94:	6f 93       	push	r22
    1e96:	7f 93       	push	r23
    1e98:	8f 93       	push	r24
    1e9a:	9f 93       	push	r25
    1e9c:	ef 93       	push	r30
    1e9e:	ff 93       	push	r31
    1ea0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <overflows>
    1ea4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <overflows+0x1>
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <overflows+0x1>
    1eae:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <overflows>
    1eb2:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1eb6:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1eba:	30 97       	sbiw	r30, 0x00	; 0
    1ebc:	01 f1       	breq	.+64     	; 0x1efe <__vector_9+0x7c>
    1ebe:	42 81       	ldd	r20, Z+2	; 0x02
    1ec0:	53 81       	ldd	r21, Z+3	; 0x03
    1ec2:	64 81       	ldd	r22, Z+4	; 0x04
    1ec4:	75 81       	ldd	r23, Z+5	; 0x05
    1ec6:	86 17       	cp	r24, r22
    1ec8:	97 07       	cpc	r25, r23
    1eca:	c9 f4       	brne	.+50     	; 0x1efe <__vector_9+0x7c>
    1ecc:	ca 01       	movw	r24, r20
    1ece:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ed2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed6:	42 1b       	sub	r20, r18
    1ed8:	53 0b       	sbc	r21, r19
    1eda:	41 30       	cpi	r20, 0x01	; 1
    1edc:	51 05       	cpc	r21, r1
    1ede:	29 f4       	brne	.+10     	; 0x1eea <__vector_9+0x68>
    1ee0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ee4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ee8:	01 96       	adiw	r24, 0x01	; 1
    1eea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1eee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ef2:	ef e6       	ldi	r30, 0x6F	; 111
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	82 60       	ori	r24, 0x02	; 2
    1efa:	80 83       	st	Z, r24
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <__vector_9+0x86>
    1efe:	ef e6       	ldi	r30, 0x6F	; 111
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8d 7f       	andi	r24, 0xFD	; 253
    1f06:	80 83       	st	Z, r24
    1f08:	ff 91       	pop	r31
    1f0a:	ef 91       	pop	r30
    1f0c:	9f 91       	pop	r25
    1f0e:	8f 91       	pop	r24
    1f10:	7f 91       	pop	r23
    1f12:	6f 91       	pop	r22
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <__vector_7>:
    1f26:	1f 92       	push	r1
    1f28:	0f 92       	push	r0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	cf 92       	push	r12
    1f32:	df 92       	push	r13
    1f34:	ef 92       	push	r14
    1f36:	ff 92       	push	r15
    1f38:	2f 93       	push	r18
    1f3a:	3f 93       	push	r19
    1f3c:	4f 93       	push	r20
    1f3e:	5f 93       	push	r21
    1f40:	6f 93       	push	r22
    1f42:	7f 93       	push	r23
    1f44:	8f 93       	push	r24
    1f46:	9f 93       	push	r25
    1f48:	af 93       	push	r26
    1f4a:	bf 93       	push	r27
    1f4c:	ef 93       	push	r30
    1f4e:	ff 93       	push	r31
    1f50:	c0 90 4c 01 	lds	r12, 0x014C	; 0x80014c <overflows>
    1f54:	d0 90 4d 01 	lds	r13, 0x014D	; 0x80014d <overflows+0x1>
    1f58:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f5c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f60:	b0 99       	sbic	0x16, 0	; 22
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <__vector_7+0x5c>
    1f64:	0d 2c       	mov	r0, r13
    1f66:	00 0c       	add	r0, r0
    1f68:	ee 08       	sbc	r14, r14
    1f6a:	ff 08       	sbc	r15, r15
    1f6c:	d6 01       	movw	r26, r12
    1f6e:	99 27       	eor	r25, r25
    1f70:	88 27       	eor	r24, r24
    1f72:	69 01       	movw	r12, r18
    1f74:	e1 2c       	mov	r14, r1
    1f76:	f1 2c       	mov	r15, r1
    1f78:	c8 2a       	or	r12, r24
    1f7a:	d9 2a       	or	r13, r25
    1f7c:	ea 2a       	or	r14, r26
    1f7e:	fb 2a       	or	r15, r27
    1f80:	15 c0       	rjmp	.+42     	; 0x1fac <__vector_7+0x86>
    1f82:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f86:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	c8 1a       	sub	r12, r24
    1f8e:	d8 0a       	sbc	r13, r24
    1f90:	0d 2c       	mov	r0, r13
    1f92:	00 0c       	add	r0, r0
    1f94:	ee 08       	sbc	r14, r14
    1f96:	ff 08       	sbc	r15, r15
    1f98:	d6 01       	movw	r26, r12
    1f9a:	99 27       	eor	r25, r25
    1f9c:	88 27       	eor	r24, r24
    1f9e:	69 01       	movw	r12, r18
    1fa0:	e1 2c       	mov	r14, r1
    1fa2:	f1 2c       	mov	r15, r1
    1fa4:	c8 2a       	or	r12, r24
    1fa6:	d9 2a       	or	r13, r25
    1fa8:	ea 2a       	or	r14, r26
    1faa:	fb 2a       	or	r15, r27
    1fac:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1fb0:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1fb4:	30 97       	sbiw	r30, 0x00	; 0
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <__vector_7+0x94>
    1fb8:	42 c0       	rjmp	.+132    	; 0x203e <__vector_7+0x118>
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	a4 81       	ldd	r26, Z+4	; 0x04
    1fc0:	b5 81       	ldd	r27, Z+5	; 0x05
    1fc2:	8c 19       	sub	r24, r12
    1fc4:	9d 09       	sbc	r25, r13
    1fc6:	ae 09       	sbc	r26, r14
    1fc8:	bf 09       	sbc	r27, r15
    1fca:	18 16       	cp	r1, r24
    1fcc:	19 06       	cpc	r1, r25
    1fce:	1a 06       	cpc	r1, r26
    1fd0:	1b 06       	cpc	r1, r27
    1fd2:	ec f1       	brlt	.+122    	; 0x204e <__vector_7+0x128>
    1fd4:	82 e5       	ldi	r24, 0x52	; 82
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <dequeue>
    1fdc:	64 e5       	ldi	r22, 0x54	; 84
    1fde:	71 e0       	ldi	r23, 0x01	; 1
    1fe0:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <enqueueByDeadline>
    1fe4:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1fe8:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1fec:	30 97       	sbiw	r30, 0x00	; 0
    1fee:	39 f1       	breq	.+78     	; 0x203e <__vector_7+0x118>
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	a4 81       	ldd	r26, Z+4	; 0x04
    1ff6:	b5 81       	ldd	r27, Z+5	; 0x05
    1ff8:	8c 19       	sub	r24, r12
    1ffa:	9d 09       	sbc	r25, r13
    1ffc:	ae 09       	sbc	r26, r14
    1ffe:	bf 09       	sbc	r27, r15
    2000:	18 16       	cp	r1, r24
    2002:	19 06       	cpc	r1, r25
    2004:	1a 06       	cpc	r1, r26
    2006:	1b 06       	cpc	r1, r27
    2008:	2c f7       	brge	.-54     	; 0x1fd4 <__vector_7+0xae>
    200a:	21 c0       	rjmp	.+66     	; 0x204e <__vector_7+0x128>
    200c:	9c 01       	movw	r18, r24
    200e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2012:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2016:	84 1b       	sub	r24, r20
    2018:	95 0b       	sbc	r25, r21
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	31 f4       	brne	.+12     	; 0x202a <__vector_7+0x104>
    201e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2022:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2026:	2f 5f       	subi	r18, 0xFF	; 255
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    202e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    2032:	ef e6       	ldi	r30, 0x6F	; 111
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	82 60       	ori	r24, 0x02	; 2
    203a:	80 83       	st	Z, r24
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <__vector_7+0x122>
    203e:	ef e6       	ldi	r30, 0x6F	; 111
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	8d 7f       	andi	r24, 0xFD	; 253
    2046:	80 83       	st	Z, r24
    2048:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    204c:	0c c0       	rjmp	.+24     	; 0x2066 <__vector_7+0x140>
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	a4 81       	ldd	r26, Z+4	; 0x04
    2054:	b5 81       	ldd	r27, Z+5	; 0x05
    2056:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    205a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    205e:	2a 17       	cp	r18, r26
    2060:	3b 07       	cpc	r19, r27
    2062:	69 f7       	brne	.-38     	; 0x203e <__vector_7+0x118>
    2064:	d3 cf       	rjmp	.-90     	; 0x200c <__vector_7+0xe6>
    2066:	ff 91       	pop	r31
    2068:	ef 91       	pop	r30
    206a:	bf 91       	pop	r27
    206c:	af 91       	pop	r26
    206e:	9f 91       	pop	r25
    2070:	8f 91       	pop	r24
    2072:	7f 91       	pop	r23
    2074:	6f 91       	pop	r22
    2076:	5f 91       	pop	r21
    2078:	4f 91       	pop	r20
    207a:	3f 91       	pop	r19
    207c:	2f 91       	pop	r18
    207e:	ff 90       	pop	r15
    2080:	ef 90       	pop	r14
    2082:	df 90       	pop	r13
    2084:	cf 90       	pop	r12
    2086:	0f 90       	pop	r0
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	0f 90       	pop	r0
    208c:	1f 90       	pop	r1
    208e:	18 95       	reti

00002090 <async>:
    2090:	3f 92       	push	r3
    2092:	4f 92       	push	r4
    2094:	5f 92       	push	r5
    2096:	6f 92       	push	r6
    2098:	7f 92       	push	r7
    209a:	8f 92       	push	r8
    209c:	9f 92       	push	r9
    209e:	af 92       	push	r10
    20a0:	bf 92       	push	r11
    20a2:	cf 92       	push	r12
    20a4:	df 92       	push	r13
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	2b 01       	movw	r4, r22
    20b4:	3c 01       	movw	r6, r24
    20b6:	49 01       	movw	r8, r18
    20b8:	5a 01       	movw	r10, r20
    20ba:	8f b7       	in	r24, 0x3f	; 63
    20bc:	80 78       	andi	r24, 0x80	; 128
    20be:	38 2e       	mov	r3, r24
    20c0:	f8 94       	cli
    20c2:	86 e4       	ldi	r24, 0x46	; 70
    20c4:	91 e0       	ldi	r25, 0x01	; 1
    20c6:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <dequeue>
    20ca:	ec 01       	movw	r28, r24
    20cc:	1b 87       	std	Y+11, r17	; 0x0b
    20ce:	0a 87       	std	Y+10, r16	; 0x0a
    20d0:	fd 86       	std	Y+13, r15	; 0x0d
    20d2:	ec 86       	std	Y+12, r14	; 0x0c
    20d4:	df 86       	std	Y+15, r13	; 0x0f
    20d6:	ce 86       	std	Y+14, r12	; 0x0e
    20d8:	33 20       	and	r3, r3
    20da:	61 f0       	breq	.+24     	; 0x20f4 <async+0x64>
    20dc:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <current>
    20e0:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <current+0x1>
    20e4:	02 80       	ldd	r0, Z+2	; 0x02
    20e6:	f3 81       	ldd	r31, Z+3	; 0x03
    20e8:	e0 2d       	mov	r30, r0
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	a4 81       	ldd	r26, Z+4	; 0x04
    20f0:	b5 81       	ldd	r27, Z+5	; 0x05
    20f2:	08 c0       	rjmp	.+16     	; 0x2104 <async+0x74>
    20f4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <timestamp>
    20f8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <timestamp+0x1>
    20fc:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <timestamp+0x2>
    2100:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <timestamp+0x3>
    2104:	48 0e       	add	r4, r24
    2106:	59 1e       	adc	r5, r25
    2108:	6a 1e       	adc	r6, r26
    210a:	7b 1e       	adc	r7, r27
    210c:	4a 82       	std	Y+2, r4	; 0x02
    210e:	5b 82       	std	Y+3, r5	; 0x03
    2110:	6c 82       	std	Y+4, r6	; 0x04
    2112:	7d 82       	std	Y+5, r7	; 0x05
    2114:	18 14       	cp	r1, r8
    2116:	19 04       	cpc	r1, r9
    2118:	1a 04       	cpc	r1, r10
    211a:	1b 04       	cpc	r1, r11
    211c:	44 f0       	brlt	.+16     	; 0x212e <async+0x9e>
    211e:	0f 2e       	mov	r0, r31
    2120:	88 24       	eor	r8, r8
    2122:	8a 94       	dec	r8
    2124:	98 2c       	mov	r9, r8
    2126:	a8 2c       	mov	r10, r8
    2128:	ff e7       	ldi	r31, 0x7F	; 127
    212a:	bf 2e       	mov	r11, r31
    212c:	f0 2d       	mov	r31, r0
    212e:	84 0c       	add	r8, r4
    2130:	95 1c       	adc	r9, r5
    2132:	a6 1c       	adc	r10, r6
    2134:	b7 1c       	adc	r11, r7
    2136:	8e 82       	std	Y+6, r8	; 0x06
    2138:	9f 82       	std	Y+7, r9	; 0x07
    213a:	a8 86       	std	Y+8, r10	; 0x08
    213c:	b9 86       	std	Y+9, r11	; 0x09
    213e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <overflows>
    2142:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <overflows+0x1>
    2146:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    214a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    214e:	b0 99       	sbic	0x16, 0	; 22
    2150:	0e c0       	rjmp	.+28     	; 0x216e <async+0xde>
    2152:	09 2e       	mov	r0, r25
    2154:	00 0c       	add	r0, r0
    2156:	aa 0b       	sbc	r26, r26
    2158:	bb 0b       	sbc	r27, r27
    215a:	dc 01       	movw	r26, r24
    215c:	99 27       	eor	r25, r25
    215e:	88 27       	eor	r24, r24
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	84 2b       	or	r24, r20
    2166:	95 2b       	or	r25, r21
    2168:	a6 2b       	or	r26, r22
    216a:	b7 2b       	or	r27, r23
    216c:	13 c0       	rjmp	.+38     	; 0x2194 <async+0x104>
    216e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2172:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	09 2e       	mov	r0, r25
    217a:	00 0c       	add	r0, r0
    217c:	aa 0b       	sbc	r26, r26
    217e:	bb 0b       	sbc	r27, r27
    2180:	dc 01       	movw	r26, r24
    2182:	99 27       	eor	r25, r25
    2184:	88 27       	eor	r24, r24
    2186:	a9 01       	movw	r20, r18
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	84 2b       	or	r24, r20
    218e:	95 2b       	or	r25, r21
    2190:	a6 2b       	or	r26, r22
    2192:	b7 2b       	or	r27, r23
    2194:	48 1a       	sub	r4, r24
    2196:	59 0a       	sbc	r5, r25
    2198:	6a 0a       	sbc	r6, r26
    219a:	7b 0a       	sbc	r7, r27
    219c:	14 14       	cp	r1, r4
    219e:	15 04       	cpc	r1, r5
    21a0:	16 04       	cpc	r1, r6
    21a2:	17 04       	cpc	r1, r7
    21a4:	ac f5       	brge	.+106    	; 0x2210 <async+0x180>
    21a6:	62 e5       	ldi	r22, 0x52	; 82
    21a8:	71 e0       	ldi	r23, 0x01	; 1
    21aa:	ce 01       	movw	r24, r28
    21ac:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <enqueueByBaseline>
    21b0:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    21b4:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    21b8:	30 97       	sbiw	r30, 0x00	; 0
    21ba:	21 f1       	breq	.+72     	; 0x2204 <async+0x174>
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	a4 81       	ldd	r26, Z+4	; 0x04
    21c2:	b5 81       	ldd	r27, Z+5	; 0x05
    21c4:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    21c8:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    21cc:	2a 17       	cp	r18, r26
    21ce:	3b 07       	cpc	r19, r27
    21d0:	c9 f4       	brne	.+50     	; 0x2204 <async+0x174>
    21d2:	9c 01       	movw	r18, r24
    21d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    21d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    21dc:	84 1b       	sub	r24, r20
    21de:	95 0b       	sbc	r25, r21
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	31 f4       	brne	.+12     	; 0x21f0 <async+0x160>
    21e4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    21e8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    21ec:	2f 5f       	subi	r18, 0xFF	; 255
    21ee:	3f 4f       	sbci	r19, 0xFF	; 255
    21f0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    21f4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    21f8:	ef e6       	ldi	r30, 0x6F	; 111
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	82 60       	ori	r24, 0x02	; 2
    2200:	80 83       	st	Z, r24
    2202:	41 c0       	rjmp	.+130    	; 0x2286 <async+0x1f6>
    2204:	ef e6       	ldi	r30, 0x6F	; 111
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	8d 7f       	andi	r24, 0xFD	; 253
    220c:	80 83       	st	Z, r24
    220e:	3b c0       	rjmp	.+118    	; 0x2286 <async+0x1f6>
    2210:	64 e5       	ldi	r22, 0x54	; 84
    2212:	71 e0       	ldi	r23, 0x01	; 1
    2214:	ce 01       	movw	r24, r28
    2216:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <enqueueByDeadline>
    221a:	33 20       	and	r3, r3
    221c:	b9 f1       	breq	.+110    	; 0x228c <async+0x1fc>
    221e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <threadPool>
    2222:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <threadPool+0x1>
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	81 f1       	breq	.+96     	; 0x228a <async+0x1fa>
    222a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <activeStack>
    222e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <activeStack+0x1>
    2232:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <msgQ>
    2236:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <msgQ+0x1>
    223a:	02 81       	ldd	r16, Z+2	; 0x02
    223c:	13 81       	ldd	r17, Z+3	; 0x03
    223e:	d9 01       	movw	r26, r18
    2240:	16 96       	adiw	r26, 0x06	; 6
    2242:	4d 91       	ld	r20, X+
    2244:	5d 91       	ld	r21, X+
    2246:	6d 91       	ld	r22, X+
    2248:	7c 91       	ld	r23, X
    224a:	19 97       	sbiw	r26, 0x09	; 9
    224c:	d8 01       	movw	r26, r16
    224e:	16 96       	adiw	r26, 0x06	; 6
    2250:	0d 91       	ld	r16, X+
    2252:	1d 91       	ld	r17, X+
    2254:	2d 91       	ld	r18, X+
    2256:	3c 91       	ld	r19, X
    2258:	19 97       	sbiw	r26, 0x09	; 9
    225a:	40 1b       	sub	r20, r16
    225c:	51 0b       	sbc	r21, r17
    225e:	62 0b       	sbc	r22, r18
    2260:	73 0b       	sbc	r23, r19
    2262:	9a f4       	brpl	.+38     	; 0x228a <async+0x1fa>
    2264:	dc 01       	movw	r26, r24
    2266:	2d 91       	ld	r18, X+
    2268:	3c 91       	ld	r19, X
    226a:	11 97       	sbiw	r26, 0x01	; 1
    226c:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <threadPool+0x1>
    2270:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <threadPool>
    2274:	ed 93       	st	X+, r30
    2276:	fc 93       	st	X, r31
    2278:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <activeStack+0x1>
    227c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <activeStack>
    2280:	0e 94 b1 06 	call	0xd62	; 0xd62 <dispatch>
    2284:	02 c0       	rjmp	.+4      	; 0x228a <async+0x1fa>
    2286:	33 20       	and	r3, r3
    2288:	09 f0       	breq	.+2      	; 0x228c <async+0x1fc>
    228a:	78 94       	sei
    228c:	ce 01       	movw	r24, r28
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	df 90       	pop	r13
    229c:	cf 90       	pop	r12
    229e:	bf 90       	pop	r11
    22a0:	af 90       	pop	r10
    22a2:	9f 90       	pop	r9
    22a4:	8f 90       	pop	r8
    22a6:	7f 90       	pop	r7
    22a8:	6f 90       	pop	r6
    22aa:	5f 90       	pop	r5
    22ac:	4f 90       	pop	r4
    22ae:	3f 90       	pop	r3
    22b0:	08 95       	ret

000022b2 <sync>:
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	ec 01       	movw	r28, r24
    22c4:	7b 01       	movw	r14, r22
    22c6:	6a 01       	movw	r12, r20
    22c8:	1f b7       	in	r17, 0x3f	; 63
    22ca:	10 78       	andi	r17, 0x80	; 128
    22cc:	f8 94       	cli
    22ce:	a8 81       	ld	r26, Y
    22d0:	b9 81       	ldd	r27, Y+1	; 0x01
    22d2:	10 97       	sbiw	r26, 0x00	; 0
    22d4:	61 f1       	breq	.+88     	; 0x232e <sync+0x7c>
    22d6:	14 96       	adiw	r26, 0x04	; 4
    22d8:	ed 91       	ld	r30, X+
    22da:	fc 91       	ld	r31, X
    22dc:	15 97       	sbiw	r26, 0x05	; 5
    22de:	30 97       	sbiw	r30, 0x00	; 0
    22e0:	41 f0       	breq	.+16     	; 0x22f2 <sync+0x40>
    22e2:	a0 81       	ld	r26, Z
    22e4:	b1 81       	ldd	r27, Z+1	; 0x01
    22e6:	14 96       	adiw	r26, 0x04	; 4
    22e8:	ed 91       	ld	r30, X+
    22ea:	fc 91       	ld	r31, X
    22ec:	15 97       	sbiw	r26, 0x05	; 5
    22ee:	30 97       	sbiw	r30, 0x00	; 0
    22f0:	c1 f7       	brne	.-16     	; 0x22e2 <sync+0x30>
    22f2:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <current>
    22f6:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <current+0x1>
    22fa:	2a 17       	cp	r18, r26
    22fc:	3b 07       	cpc	r19, r27
    22fe:	21 f0       	breq	.+8      	; 0x2308 <sync+0x56>
    2300:	11 23       	and	r17, r17
    2302:	09 f4       	brne	.+2      	; 0x2306 <sync+0x54>
    2304:	3d c0       	rjmp	.+122    	; 0x2380 <sync+0xce>
    2306:	07 c0       	rjmp	.+14     	; 0x2316 <sync+0x64>
    2308:	11 23       	and	r17, r17
    230a:	09 f4       	brne	.+2      	; 0x230e <sync+0x5c>
    230c:	3c c0       	rjmp	.+120    	; 0x2386 <sync+0xd4>
    230e:	78 94       	sei
    2310:	8f ef       	ldi	r24, 0xFF	; 255
    2312:	9f ef       	ldi	r25, 0xFF	; 255
    2314:	52 c0       	rjmp	.+164    	; 0x23ba <sync+0x108>
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	d1 f1       	breq	.+116    	; 0x2392 <sync+0xe0>
    231e:	fc 01       	movw	r30, r24
    2320:	15 82       	std	Z+5, r1	; 0x05
    2322:	14 82       	std	Z+4, r1	; 0x04
    2324:	36 c0       	rjmp	.+108    	; 0x2392 <sync+0xe0>
    2326:	78 94       	sei
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	46 c0       	rjmp	.+140    	; 0x23ba <sync+0x108>
    232e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <current>
    2332:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <current+0x1>
    2336:	99 83       	std	Y+1, r25	; 0x01
    2338:	88 83       	st	Y, r24
    233a:	11 23       	and	r17, r17
    233c:	29 f0       	breq	.+10     	; 0x2348 <sync+0x96>
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	9b 81       	ldd	r25, Y+3	; 0x03
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	09 f0       	breq	.+2      	; 0x2348 <sync+0x96>
    2346:	78 94       	sei
    2348:	b6 01       	movw	r22, r12
    234a:	ce 01       	movw	r24, r28
    234c:	f7 01       	movw	r30, r14
    234e:	09 95       	icall
    2350:	f8 2e       	mov	r15, r24
    2352:	09 2f       	mov	r16, r25
    2354:	8f b7       	in	r24, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	19 82       	std	Y+1, r1	; 0x01
    235a:	18 82       	st	Y, r1
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	9b 81       	ldd	r25, Y+3	; 0x03
    2360:	82 30       	cpi	r24, 0x02	; 2
    2362:	91 05       	cpc	r25, r1
    2364:	38 f0       	brcs	.+14     	; 0x2374 <sync+0xc2>
    2366:	1b 82       	std	Y+3, r1	; 0x03
    2368:	1a 82       	std	Y+2, r1	; 0x02
    236a:	fc 01       	movw	r30, r24
    236c:	15 82       	std	Z+5, r1	; 0x05
    236e:	14 82       	std	Z+4, r1	; 0x04
    2370:	0e 94 b1 06 	call	0xd62	; 0xd62 <dispatch>
    2374:	11 23       	and	r17, r17
    2376:	51 f0       	breq	.+20     	; 0x238c <sync+0xda>
    2378:	78 94       	sei
    237a:	8f 2d       	mov	r24, r15
    237c:	90 2f       	mov	r25, r16
    237e:	1d c0       	rjmp	.+58     	; 0x23ba <sync+0x108>
    2380:	8f ef       	ldi	r24, 0xFF	; 255
    2382:	9f ef       	ldi	r25, 0xFF	; 255
    2384:	1a c0       	rjmp	.+52     	; 0x23ba <sync+0x108>
    2386:	8f ef       	ldi	r24, 0xFF	; 255
    2388:	9f ef       	ldi	r25, 0xFF	; 255
    238a:	17 c0       	rjmp	.+46     	; 0x23ba <sync+0x108>
    238c:	8f 2d       	mov	r24, r15
    238e:	90 2f       	mov	r25, r16
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <sync+0x108>
    2392:	3b 83       	std	Y+3, r19	; 0x03
    2394:	2a 83       	std	Y+2, r18	; 0x02
    2396:	f9 01       	movw	r30, r18
    2398:	d5 83       	std	Z+5, r29	; 0x05
    239a:	c4 83       	std	Z+4, r28	; 0x04
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 b1 06 	call	0xd62	; 0xd62 <dispatch>
    23a2:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <current>
    23a6:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <current+0x1>
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	89 2b       	or	r24, r25
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <sync+0x102>
    23b2:	b9 cf       	rjmp	.-142    	; 0x2326 <sync+0x74>
    23b4:	f9 83       	std	Y+1, r31	; 0x01
    23b6:	e8 83       	st	Y, r30
    23b8:	c2 cf       	rjmp	.-124    	; 0x233e <sync+0x8c>
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	ff 90       	pop	r15
    23c4:	ef 90       	pop	r14
    23c6:	df 90       	pop	r13
    23c8:	cf 90       	pop	r12
    23ca:	08 95       	ret

000023cc <run>:
    23cc:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <current>
    23d0:	10 91 41 01 	lds	r17, 0x0141	; 0x800141 <current+0x1>
    23d4:	84 e5       	ldi	r24, 0x54	; 84
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <dequeue>
    23dc:	ec 01       	movw	r28, r24
    23de:	d8 01       	movw	r26, r16
    23e0:	13 96       	adiw	r26, 0x03	; 3
    23e2:	9c 93       	st	X, r25
    23e4:	8e 93       	st	-X, r24
    23e6:	12 97       	sbiw	r26, 0x02	; 2
    23e8:	78 94       	sei
    23ea:	4e 85       	ldd	r20, Y+14	; 0x0e
    23ec:	5f 85       	ldd	r21, Y+15	; 0x0f
    23ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    23f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    23f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <sync>
    23fa:	8f b7       	in	r24, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <msgPool>
    2402:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <msgPool+0x1>
    2406:	99 83       	std	Y+1, r25	; 0x01
    2408:	88 83       	st	Y, r24
    240a:	d0 93 47 01 	sts	0x0147, r29	; 0x800147 <msgPool+0x1>
    240e:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <msgPool>
    2412:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <activeStack>
    2416:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <activeStack+0x1>
    241a:	00 81       	ld	r16, Z
    241c:	11 81       	ldd	r17, Z+1	; 0x01
    241e:	e8 01       	movw	r28, r16
    2420:	2a 81       	ldd	r18, Y+2	; 0x02
    2422:	3b 81       	ldd	r19, Y+3	; 0x03
    2424:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <msgQ>
    2428:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <msgQ+0x1>
    242c:	10 97       	sbiw	r26, 0x00	; 0
    242e:	c1 f0       	breq	.+48     	; 0x2460 <run+0x94>
    2430:	21 15       	cp	r18, r1
    2432:	31 05       	cpc	r19, r1
    2434:	59 f2       	breq	.-106    	; 0x23cc <run>
    2436:	16 96       	adiw	r26, 0x06	; 6
    2438:	8d 91       	ld	r24, X+
    243a:	9d 91       	ld	r25, X+
    243c:	0d 90       	ld	r0, X+
    243e:	bc 91       	ld	r27, X
    2440:	a0 2d       	mov	r26, r0
    2442:	e9 01       	movw	r28, r18
    2444:	4e 81       	ldd	r20, Y+6	; 0x06
    2446:	5f 81       	ldd	r21, Y+7	; 0x07
    2448:	68 85       	ldd	r22, Y+8	; 0x08
    244a:	79 85       	ldd	r23, Y+9	; 0x09
    244c:	84 1b       	sub	r24, r20
    244e:	95 0b       	sbc	r25, r21
    2450:	a6 0b       	sbc	r26, r22
    2452:	b7 0b       	sbc	r27, r23
    2454:	18 16       	cp	r1, r24
    2456:	19 06       	cpc	r1, r25
    2458:	1a 06       	cpc	r1, r26
    245a:	1b 06       	cpc	r1, r27
    245c:	0c f0       	brlt	.+2      	; 0x2460 <run+0x94>
    245e:	b6 cf       	rjmp	.-148    	; 0x23cc <run>
    2460:	10 93 43 01 	sts	0x0143, r17	; 0x800143 <activeStack+0x1>
    2464:	00 93 42 01 	sts	0x0142, r16	; 0x800142 <activeStack>
    2468:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <threadPool>
    246c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <threadPool+0x1>
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	f0 93 45 01 	sts	0x0145, r31	; 0x800145 <threadPool+0x1>
    2478:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <threadPool>
    247c:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <activeStack>
    2480:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <activeStack+0x1>
    2484:	14 96       	adiw	r26, 0x04	; 4
    2486:	ed 91       	ld	r30, X+
    2488:	fc 91       	ld	r31, X
    248a:	15 97       	sbiw	r26, 0x05	; 5
    248c:	30 97       	sbiw	r30, 0x00	; 0
    248e:	41 f0       	breq	.+16     	; 0x24a0 <run+0xd4>
    2490:	a0 81       	ld	r26, Z
    2492:	b1 81       	ldd	r27, Z+1	; 0x01
    2494:	14 96       	adiw	r26, 0x04	; 4
    2496:	ed 91       	ld	r30, X+
    2498:	fc 91       	ld	r31, X
    249a:	15 97       	sbiw	r26, 0x05	; 5
    249c:	30 97       	sbiw	r30, 0x00	; 0
    249e:	c1 f7       	brne	.-16     	; 0x2490 <run+0xc4>
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 b1 06 	call	0xd62	; 0xd62 <dispatch>
    24a6:	92 cf       	rjmp	.-220    	; 0x23cc <run>

000024a8 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    24a8:	42 31       	cpi	r20, 0x12	; 18
    24aa:	b8 f4       	brcc	.+46     	; 0x24da <install+0x32>
        char status;
        DISABLE(status);
    24ac:	2f b7       	in	r18, 0x3f	; 63
    24ae:	f8 94       	cli
        otable[i] = obj;
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	44 0f       	add	r20, r20
    24b4:	55 1f       	adc	r21, r21
    24b6:	fa 01       	movw	r30, r20
    24b8:	ea 5a       	subi	r30, 0xAA	; 170
    24ba:	fe 4f       	sbci	r31, 0xFE	; 254
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
        mtable[i] = m;
    24c0:	fa 01       	movw	r30, r20
    24c2:	e2 51       	subi	r30, 0x12	; 18
    24c4:	fe 4f       	sbci	r31, 0xFE	; 254
    24c6:	71 83       	std	Z+1, r23	; 0x01
    24c8:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	fc 01       	movw	r30, r24
    24d0:	53 83       	std	Z+3, r21	; 0x03
    24d2:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    24d4:	22 23       	and	r18, r18
    24d6:	0c f4       	brge	.+2      	; 0x24da <install+0x32>
    24d8:	78 94       	sei
    24da:	08 95       	ret

000024dc <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    24dc:	8c 01       	movw	r16, r24
    24de:	7b 01       	movw	r14, r22
    24e0:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    24e2:	8f b7       	in	r24, 0x3f	; 63
    24e4:	f8 94       	cli
    initialize();
    24e6:	0e 94 46 06 	call	0xc8c	; 0xc8c <initialize>
    ENABLE(1);
    24ea:	78 94       	sei
    if (m != NULL)
    24ec:	e1 14       	cp	r14, r1
    24ee:	f1 04       	cpc	r15, r1
    24f0:	41 f0       	breq	.+16     	; 0x2502 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	a9 01       	movw	r20, r18
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	70 e0       	ldi	r23, 0x00	; 0
    24fc:	cb 01       	movw	r24, r22
    24fe:	0e 94 48 10 	call	0x2090	; 0x2090 <async>
    DISABLE(status);
    2502:	8f b7       	in	r24, 0x3f	; 63
    2504:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2506:	0e 94 d1 06 	call	0xda2	; 0xda2 <schedule>
    ENABLE(1);
    250a:	78 94       	sei
    while (1) {
        SLEEP();
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	83 bf       	out	0x33, r24	; 51
    2510:	88 95       	sleep
    2512:	fd cf       	rjmp	.-6      	; 0x250e <tinytimber+0x32>

00002514 <__divmodhi4>:
    2514:	97 fb       	bst	r25, 7
    2516:	07 2e       	mov	r0, r23
    2518:	16 f4       	brtc	.+4      	; 0x251e <__divmodhi4+0xa>
    251a:	00 94       	com	r0
    251c:	07 d0       	rcall	.+14     	; 0x252c <__divmodhi4_neg1>
    251e:	77 fd       	sbrc	r23, 7
    2520:	09 d0       	rcall	.+18     	; 0x2534 <__divmodhi4_neg2>
    2522:	0e 94 ca 12 	call	0x2594	; 0x2594 <__udivmodhi4>
    2526:	07 fc       	sbrc	r0, 7
    2528:	05 d0       	rcall	.+10     	; 0x2534 <__divmodhi4_neg2>
    252a:	3e f4       	brtc	.+14     	; 0x253a <__divmodhi4_exit>

0000252c <__divmodhi4_neg1>:
    252c:	90 95       	com	r25
    252e:	81 95       	neg	r24
    2530:	9f 4f       	sbci	r25, 0xFF	; 255
    2532:	08 95       	ret

00002534 <__divmodhi4_neg2>:
    2534:	70 95       	com	r23
    2536:	61 95       	neg	r22
    2538:	7f 4f       	sbci	r23, 0xFF	; 255

0000253a <__divmodhi4_exit>:
    253a:	08 95       	ret

0000253c <__divmodsi4>:
    253c:	05 2e       	mov	r0, r21
    253e:	97 fb       	bst	r25, 7
    2540:	1e f4       	brtc	.+6      	; 0x2548 <__divmodsi4+0xc>
    2542:	00 94       	com	r0
    2544:	0e 94 b5 12 	call	0x256a	; 0x256a <__negsi2>
    2548:	57 fd       	sbrc	r21, 7
    254a:	07 d0       	rcall	.+14     	; 0x255a <__divmodsi4_neg2>
    254c:	0e 94 de 12 	call	0x25bc	; 0x25bc <__udivmodsi4>
    2550:	07 fc       	sbrc	r0, 7
    2552:	03 d0       	rcall	.+6      	; 0x255a <__divmodsi4_neg2>
    2554:	4e f4       	brtc	.+18     	; 0x2568 <__divmodsi4_exit>
    2556:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__negsi2>

0000255a <__divmodsi4_neg2>:
    255a:	50 95       	com	r21
    255c:	40 95       	com	r20
    255e:	30 95       	com	r19
    2560:	21 95       	neg	r18
    2562:	3f 4f       	sbci	r19, 0xFF	; 255
    2564:	4f 4f       	sbci	r20, 0xFF	; 255
    2566:	5f 4f       	sbci	r21, 0xFF	; 255

00002568 <__divmodsi4_exit>:
    2568:	08 95       	ret

0000256a <__negsi2>:
    256a:	90 95       	com	r25
    256c:	80 95       	com	r24
    256e:	70 95       	com	r23
    2570:	61 95       	neg	r22
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	8f 4f       	sbci	r24, 0xFF	; 255
    2576:	9f 4f       	sbci	r25, 0xFF	; 255
    2578:	08 95       	ret

0000257a <__tablejump2__>:
    257a:	ee 0f       	add	r30, r30
    257c:	ff 1f       	adc	r31, r31
    257e:	05 90       	lpm	r0, Z+
    2580:	f4 91       	lpm	r31, Z
    2582:	e0 2d       	mov	r30, r0
    2584:	09 94       	ijmp

00002586 <__usmulhisi3>:
    2586:	0e 94 00 13 	call	0x2600	; 0x2600 <__umulhisi3>

0000258a <__usmulhisi3_tail>:
    258a:	b7 ff       	sbrs	r27, 7
    258c:	08 95       	ret
    258e:	82 1b       	sub	r24, r18
    2590:	93 0b       	sbc	r25, r19
    2592:	08 95       	ret

00002594 <__udivmodhi4>:
    2594:	aa 1b       	sub	r26, r26
    2596:	bb 1b       	sub	r27, r27
    2598:	51 e1       	ldi	r21, 0x11	; 17
    259a:	07 c0       	rjmp	.+14     	; 0x25aa <__udivmodhi4_ep>

0000259c <__udivmodhi4_loop>:
    259c:	aa 1f       	adc	r26, r26
    259e:	bb 1f       	adc	r27, r27
    25a0:	a6 17       	cp	r26, r22
    25a2:	b7 07       	cpc	r27, r23
    25a4:	10 f0       	brcs	.+4      	; 0x25aa <__udivmodhi4_ep>
    25a6:	a6 1b       	sub	r26, r22
    25a8:	b7 0b       	sbc	r27, r23

000025aa <__udivmodhi4_ep>:
    25aa:	88 1f       	adc	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	5a 95       	dec	r21
    25b0:	a9 f7       	brne	.-22     	; 0x259c <__udivmodhi4_loop>
    25b2:	80 95       	com	r24
    25b4:	90 95       	com	r25
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	08 95       	ret

000025bc <__udivmodsi4>:
    25bc:	a1 e2       	ldi	r26, 0x21	; 33
    25be:	1a 2e       	mov	r1, r26
    25c0:	aa 1b       	sub	r26, r26
    25c2:	bb 1b       	sub	r27, r27
    25c4:	fd 01       	movw	r30, r26
    25c6:	0d c0       	rjmp	.+26     	; 0x25e2 <__udivmodsi4_ep>

000025c8 <__udivmodsi4_loop>:
    25c8:	aa 1f       	adc	r26, r26
    25ca:	bb 1f       	adc	r27, r27
    25cc:	ee 1f       	adc	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	a2 17       	cp	r26, r18
    25d2:	b3 07       	cpc	r27, r19
    25d4:	e4 07       	cpc	r30, r20
    25d6:	f5 07       	cpc	r31, r21
    25d8:	20 f0       	brcs	.+8      	; 0x25e2 <__udivmodsi4_ep>
    25da:	a2 1b       	sub	r26, r18
    25dc:	b3 0b       	sbc	r27, r19
    25de:	e4 0b       	sbc	r30, r20
    25e0:	f5 0b       	sbc	r31, r21

000025e2 <__udivmodsi4_ep>:
    25e2:	66 1f       	adc	r22, r22
    25e4:	77 1f       	adc	r23, r23
    25e6:	88 1f       	adc	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	1a 94       	dec	r1
    25ec:	69 f7       	brne	.-38     	; 0x25c8 <__udivmodsi4_loop>
    25ee:	60 95       	com	r22
    25f0:	70 95       	com	r23
    25f2:	80 95       	com	r24
    25f4:	90 95       	com	r25
    25f6:	9b 01       	movw	r18, r22
    25f8:	ac 01       	movw	r20, r24
    25fa:	bd 01       	movw	r22, r26
    25fc:	cf 01       	movw	r24, r30
    25fe:	08 95       	ret

00002600 <__umulhisi3>:
    2600:	a2 9f       	mul	r26, r18
    2602:	b0 01       	movw	r22, r0
    2604:	b3 9f       	mul	r27, r19
    2606:	c0 01       	movw	r24, r0
    2608:	a3 9f       	mul	r26, r19
    260a:	70 0d       	add	r23, r0
    260c:	81 1d       	adc	r24, r1
    260e:	11 24       	eor	r1, r1
    2610:	91 1d       	adc	r25, r1
    2612:	b2 9f       	mul	r27, r18
    2614:	70 0d       	add	r23, r0
    2616:	81 1d       	adc	r24, r1
    2618:	11 24       	eor	r1, r1
    261a:	91 1d       	adc	r25, r1
    261c:	08 95       	ret

0000261e <setjmp>:
    261e:	dc 01       	movw	r26, r24
    2620:	2d 92       	st	X+, r2
    2622:	3d 92       	st	X+, r3
    2624:	4d 92       	st	X+, r4
    2626:	5d 92       	st	X+, r5
    2628:	6d 92       	st	X+, r6
    262a:	7d 92       	st	X+, r7
    262c:	8d 92       	st	X+, r8
    262e:	9d 92       	st	X+, r9
    2630:	ad 92       	st	X+, r10
    2632:	bd 92       	st	X+, r11
    2634:	cd 92       	st	X+, r12
    2636:	dd 92       	st	X+, r13
    2638:	ed 92       	st	X+, r14
    263a:	fd 92       	st	X+, r15
    263c:	0d 93       	st	X+, r16
    263e:	1d 93       	st	X+, r17
    2640:	cd 93       	st	X+, r28
    2642:	dd 93       	st	X+, r29
    2644:	ff 91       	pop	r31
    2646:	ef 91       	pop	r30
    2648:	8d b7       	in	r24, 0x3d	; 61
    264a:	8d 93       	st	X+, r24
    264c:	8e b7       	in	r24, 0x3e	; 62
    264e:	8d 93       	st	X+, r24
    2650:	8f b7       	in	r24, 0x3f	; 63
    2652:	8d 93       	st	X+, r24
    2654:	ed 93       	st	X+, r30
    2656:	fd 93       	st	X+, r31
    2658:	88 27       	eor	r24, r24
    265a:	99 27       	eor	r25, r25
    265c:	09 94       	ijmp

0000265e <longjmp>:
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	81 30       	cpi	r24, 0x01	; 1
    2664:	91 05       	cpc	r25, r1
    2666:	81 1d       	adc	r24, r1
    2668:	2d 90       	ld	r2, X+
    266a:	3d 90       	ld	r3, X+
    266c:	4d 90       	ld	r4, X+
    266e:	5d 90       	ld	r5, X+
    2670:	6d 90       	ld	r6, X+
    2672:	7d 90       	ld	r7, X+
    2674:	8d 90       	ld	r8, X+
    2676:	9d 90       	ld	r9, X+
    2678:	ad 90       	ld	r10, X+
    267a:	bd 90       	ld	r11, X+
    267c:	cd 90       	ld	r12, X+
    267e:	dd 90       	ld	r13, X+
    2680:	ed 90       	ld	r14, X+
    2682:	fd 90       	ld	r15, X+
    2684:	0d 91       	ld	r16, X+
    2686:	1d 91       	ld	r17, X+
    2688:	cd 91       	ld	r28, X+
    268a:	dd 91       	ld	r29, X+
    268c:	ed 91       	ld	r30, X+
    268e:	fd 91       	ld	r31, X+
    2690:	0d 90       	ld	r0, X+
    2692:	f8 94       	cli
    2694:	fe bf       	out	0x3e, r31	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	ed bf       	out	0x3d, r30	; 61
    269a:	ed 91       	ld	r30, X+
    269c:	fd 91       	ld	r31, X+
    269e:	09 94       	ijmp

000026a0 <_exit>:
    26a0:	f8 94       	cli

000026a2 <__stop_program>:
    26a2:	ff cf       	rjmp	.-2      	; 0x26a2 <__stop_program>
